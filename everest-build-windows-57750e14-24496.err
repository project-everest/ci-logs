Cloning into 'fstarlang_binaries'...
Already on 'master'
Cloning into 'mitls-fstar'...
Already on 'master'
Cloning into 'quackyducky'...
Already on 'master'
Cloning into 'vale'...
Already on 'master'
Cloning into 'FStar'...
Checking out files:  24% (769/3116)   Checking out files:  25% (779/3116)   Checking out files:  26% (811/3116)   Checking out files:  27% (842/3116)   Checking out files:  28% (873/3116)   Checking out files:  29% (904/3116)   Checking out files:  30% (935/3116)   Checking out files:  31% (966/3116)   Checking out files:  32% (998/3116)   Checking out files:  33% (1029/3116)   Checking out files:  34% (1060/3116)   Checking out files:  35% (1091/3116)   Checking out files:  36% (1122/3116)   Checking out files:  37% (1153/3116)   Checking out files:  38% (1185/3116)   Checking out files:  39% (1216/3116)   Checking out files:  40% (1247/3116)   Checking out files:  41% (1278/3116)   Checking out files:  42% (1309/3116)   Checking out files:  43% (1340/3116)   Checking out files:  44% (1372/3116)   Checking out files:  45% (1403/3116)   Checking out files:  46% (1434/3116)   Checking out files:  47% (1465/3116)   Checking out files:  47% (1478/3116)   Checking out files:  48% (1496/3116)   Checking out files:  49% (1527/3116)   Checking out files:  50% (1558/3116)   Checking out files:  51% (1590/3116)   Checking out files:  52% (1621/3116)   Checking out files:  53% (1652/3116)   Checking out files:  54% (1683/3116)   Checking out files:  55% (1714/3116)   Checking out files:  56% (1745/3116)   Checking out files:  57% (1777/3116)   Checking out files:  58% (1808/3116)   Checking out files:  59% (1839/3116)   Checking out files:  60% (1870/3116)   Checking out files:  61% (1901/3116)   Checking out files:  62% (1932/3116)   Checking out files:  63% (1964/3116)   Checking out files:  64% (1995/3116)   Checking out files:  65% (2026/3116)   Checking out files:  66% (2057/3116)   Checking out files:  67% (2088/3116)   Checking out files:  68% (2119/3116)   Checking out files:  69% (2151/3116)   Checking out files:  70% (2182/3116)   Checking out files:  71% (2213/3116)   Checking out files:  72% (2244/3116)   Checking out files:  72% (2267/3116)   Checking out files:  73% (2275/3116)   Checking out files:  74% (2306/3116)   Checking out files:  75% (2337/3116)   Checking out files:  76% (2369/3116)   Checking out files:  77% (2400/3116)   Checking out files:  78% (2431/3116)   Checking out files:  79% (2462/3116)   Checking out files:  80% (2493/3116)   Checking out files:  81% (2524/3116)   Checking out files:  82% (2556/3116)   Checking out files:  83% (2587/3116)   Checking out files:  84% (2618/3116)   Checking out files:  85% (2649/3116)   Checking out files:  86% (2680/3116)   Checking out files:  87% (2711/3116)   Checking out files:  88% (2743/3116)   Checking out files:  89% (2774/3116)   Checking out files:  90% (2805/3116)   Checking out files:  91% (2836/3116)   Checking out files:  92% (2867/3116)   Checking out files:  93% (2898/3116)   Checking out files:  94% (2930/3116)   Checking out files:  95% (2961/3116)   Checking out files:  96% (2992/3116)   Checking out files:  96% (3005/3116)   Checking out files:  97% (3023/3116)   Checking out files:  98% (3054/3116)   Checking out files:  99% (3085/3116)   Checking out files: 100% (3116/3116)   Checking out files: 100% (3116/3116), done.
Already on 'master'
Cloning into 'MLCrypto'...
Submodule 'openssl' (https://github.com/openssl/openssl) registered for path 'openssl'
Cloning into '/cygdrive/c/build/agent2/_work/12/s/MLCrypto/openssl'...
Submodule 'boringssl' (https://boringssl.googlesource.com/boringssl) registered for path 'openssl/boringssl'
Submodule 'krb5' (https://github.com/krb5/krb5) registered for path 'openssl/krb5'
Submodule 'pyca.cryptography' (https://github.com/pyca/cryptography.git) registered for path 'openssl/pyca-cryptography'
Cloning into '/cygdrive/c/build/agent2/_work/12/s/MLCrypto/openssl/boringssl'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/MLCrypto/openssl/krb5'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/MLCrypto/openssl/pyca-cryptography'...
Already on 'master'
Cloning into 'hacl-star'...
Checking out files:  12% (648/5294)   Checking out files:  13% (689/5294)   Checking out files:  14% (742/5294)   Checking out files:  15% (795/5294)   Checking out files:  16% (848/5294)   Checking out files:  17% (900/5294)   Checking out files:  18% (953/5294)   Checking out files:  19% (1006/5294)   Checking out files:  20% (1059/5294)   Checking out files:  21% (1112/5294)   Checking out files:  22% (1165/5294)   Checking out files:  23% (1218/5294)   Checking out files:  24% (1271/5294)   Checking out files:  25% (1324/5294)   Checking out files:  26% (1377/5294)   Checking out files:  26% (1421/5294)   Checking out files:  27% (1430/5294)   Checking out files:  28% (1483/5294)   Checking out files:  29% (1536/5294)   Checking out files:  30% (1589/5294)   Checking out files:  31% (1642/5294)   Checking out files:  32% (1695/5294)   Checking out files:  33% (1748/5294)   Checking out files:  34% (1800/5294)   Checking out files:  35% (1853/5294)   Checking out files:  36% (1906/5294)   Checking out files:  37% (1959/5294)   Checking out files:  38% (2012/5294)   Checking out files:  39% (2065/5294)   Checking out files:  39% (2105/5294)   Checking out files:  40% (2118/5294)   Checking out files:  41% (2171/5294)   Checking out files:  42% (2224/5294)   Checking out files:  43% (2277/5294)   Checking out files:  44% (2330/5294)   Checking out files:  45% (2383/5294)   Checking out files:  46% (2436/5294)   Checking out files:  47% (2489/5294)   Checking out files:  48% (2542/5294)   Checking out files:  49% (2595/5294)   Checking out files:  50% (2647/5294)   Checking out files:  51% (2700/5294)   Checking out files:  52% (2753/5294)   Checking out files:  53% (2806/5294)   Checking out files:  53% (2811/5294)   Checking out files:  54% (2859/5294)   Checking out files:  55% (2912/5294)   Checking out files:  56% (2965/5294)   Checking out files:  57% (3018/5294)   Checking out files:  58% (3071/5294)   Checking out files:  59% (3124/5294)   Checking out files:  60% (3177/5294)   Checking out files:  61% (3230/5294)   Checking out files:  62% (3283/5294)   Checking out files:  63% (3336/5294)   Checking out files:  64% (3389/5294)   Checking out files:  65% (3442/5294)   Checking out files:  66% (3495/5294)   Checking out files:  67% (3547/5294)   Checking out files:  67% (3585/5294)   Checking out files:  68% (3600/5294)   Checking out files:  69% (3653/5294)   Checking out files:  70% (3706/5294)   Checking out files:  71% (3759/5294)   Checking out files:  72% (3812/5294)   Checking out files:  73% (3865/5294)   Checking out files:  74% (3918/5294)   Checking out files:  75% (3971/5294)   Checking out files:  76% (4024/5294)   Checking out files:  77% (4077/5294)   Checking out files:  78% (4130/5294)   Checking out files:  79% (4183/5294)   Checking out files:  80% (4236/5294)   Checking out files:  81% (4289/5294)   Checking out files:  82% (4342/5294)   Checking out files:  82% (4346/5294)   Checking out files:  83% (4395/5294)   Checking out files:  84% (4447/5294)   Checking out files:  85% (4500/5294)   Checking out files:  86% (4553/5294)   Checking out files:  87% (4606/5294)   Checking out files:  88% (4659/5294)   Checking out files:  89% (4712/5294)   Checking out files:  90% (4765/5294)   Checking out files:  91% (4818/5294)   Checking out files:  92% (4871/5294)   Checking out files:  93% (4924/5294)   Checking out files:  94% (4977/5294)   Checking out files:  95% (5030/5294)   Checking out files:  96% (5083/5294)   Checking out files:  97% (5136/5294)   Checking out files:  97% (5144/5294)   Checking out files:  98% (5189/5294)   Checking out files:  99% (5242/5294)   Checking out files: 100% (5294/5294)   Checking out files: 100% (5294/5294), done.
Submodule 'other_providers/libsodium' (https://github.com/jedisct1/libsodium.git) registered for path 'other_providers/libsodium'
Submodule 'other_providers/openssl' (https://github.com/openssl/openssl.git) registered for path 'other_providers/openssl'
Submodule 'other_providers/vale' (https://github.com/project-everest/vale.git) registered for path 'other_providers/vale'
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/libsodium'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/openssl'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/vale'...
Submodule 'boringssl' (https://boringssl.googlesource.com/boringssl) registered for path 'other_providers/openssl/boringssl'
Submodule 'krb5' (https://github.com/krb5/krb5) registered for path 'other_providers/openssl/krb5'
Submodule 'pyca.cryptography' (https://github.com/pyca/cryptography.git) registered for path 'other_providers/openssl/pyca-cryptography'
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/openssl/boringssl'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/openssl/krb5'...
Cloning into '/cygdrive/c/build/agent2/_work/12/s/hacl-star/other_providers/openssl/pyca-cryptography'...
warning: unable to rmdir other_providers/libsodium: Directory not empty
warning: unable to rmdir other_providers/vale: Directory not empty
Switched to a new branch 'pqcrypto'
warning: unable to rmdir krb5: Directory not empty
Cloning into 'kremlin'...
Already on 'master'
Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
FStar.List.Tot.Properties.fst(858,2-858,37): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.List.Tot.Properties.fst(856,12-856,18))
FStar.List.Tot.Properties.fst(858,2-858,37): (Warning 252) could not prove post-condition (see also FStar.List.Tot.Properties.fst(856,12-856,18))
FStar.List.Tot.Properties.fst(887,2-888,24): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.List.Tot.Properties.fst(886,12-886,18))
FStar.OrdSet.fst(48,16-48,18): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type Prims.eqtype; got type Type0 (see also prims.fst(27,22-27,29))
FStar.Monotonic.HyperStack.fst(373,4-373,33): (Warning 252) (Hint-replay failed): assertion failed (see also FStar.Monotonic.HyperStack.fst(38,12-41,66))
FStar.Monotonic.HyperStack.fst(373,4-373,33): (Warning 252) (Hint-replay failed): assertion failed (see also FStar.Monotonic.HyperStack.fst(38,12-41,66))
FStar.Seq.Properties.fst(474,2-477,29): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.Seq.Properties.fst(472,20-472,28))
FStar.Fin.fst(36,2-51,18): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.Fin.fst(33,41-33,68))
FStar.Fin.fst(36,2-51,18): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.Fin.fst(33,41-33,68))
FStar.Integers.fst(440,5-454,43): (Warning 252) (Hint-replay failed): Patterns are incomplete
FStar.ModifiesGen.fst(182,42-182,44): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(167,45-167,50))
FStar.ModifiesGen.fst(501,35-501,37): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(357,11-357,36))
FStar.ModifiesGen.fst(547,91-547,93): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(415,11-415,67))
FStar.ModifiesGen.fst(551,78-551,80): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(439,24-439,42))
FStar.ModifiesGen.fst(908,20-908,25): (Warning 252) (Hint-replay failed): assertion failed (see also FStar.ModifiesGen.fsti(599,15-599,55))
FStar.ModifiesGen.fst(924,55-924,57): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(649,4-649,20))
FStar.ModifiesGen.fst(942,2-942,8): (Warning 252) (Hint-replay failed): assertion failed (see also FStar.ModifiesGen.fst(942,57-942,141))
FStar.ModifiesGen.fst(948,79-948,81): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(726,11-726,45))
FStar.ModifiesGen.fst(950,72-950,74): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(737,11-737,32))
FStar.ModifiesGen.fst(992,2-993,117): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fst(991,11-991,28))
FStar.ModifiesGen.fst(1231,20-1231,22): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(503,34-503,59))
FStar.ModifiesGen.fst(1309,2-1309,64): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(987,12-987,71))
FStar.ModifiesGen.fst(1316,2-1316,8): (Warning 252) (Hint-replay failed): assertion failed (see also FStar.ModifiesGen.fst(1316,9-1316,48))
FStar.ModifiesGen.fst(1588,2-1598,39): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fst(1587,11-1587,84))
FStar.ModifiesGen.fst(1624,41-1624,60): (Warning 252) (Hint-replay failed): could not prove post-condition
FStar.ModifiesGen.fst(1720,2-1728,39): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fst(1719,11-1719,42))
FStar.ModifiesGen.fst(1830,4-1830,21): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type aux:
FStar.Ghost.erased (FStar.GSet.set (FStar.ModifiesGen.aloc (c b)))
{ FStar.GSet.subset (FStar.ModifiesGen.aloc_domain (c b) regions live_addrs)
(FStar.Ghost.reveal aux) /\
FStar.GSet.subset (FStar.Ghost.reveal aux)
(FStar.ModifiesGen.aloc_domain (c b) regions (fun _ -> FStar.GSet.complement FStar.GSet.empty)
) }; got type FStar.Ghost.erased (FStar.GSet.set (FStar.ModifiesGen.aloc (c b))) (see also FStar.ModifiesGen.fst(30,8-30,71))
FStar.ModifiesGen.fst(1839,9-1839,119): (Warning 252) (Hint-replay failed): assertion failed
FStar.ModifiesGen.fst(1842,9-1842,121): (Warning 252) (Hint-replay failed): assertion failed
FStar.ModifiesGen.fst(1913,2-1919,167): (Warning 252) (Hint-replay failed): could not prove post-condition (see also FStar.ModifiesGen.fsti(1171,2-1171,78))
FStar.Tactics.Typeclasses.fst(76,4-121,16): (Warning 252) (Hint-replay failed): Patterns are incomplete
FStar.Tactics.Typeclasses.fst(76,4-121,16): (Warning 252) (Hint-replay failed): Patterns are incomplete
LowStar.BufferView.fst(79,31-79,33): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type FStar.Seq.Properties.lseq (FStar.Pervasives.dfst vb)
(LowStar.Buffer.length (LowStar.BufferView.as_buffer vb)); got type FStar.Seq.Base.seq (FStar.Pervasives.dfst vb) (see also FStar.Seq.Properties.fst(24,19-24,36))
LowStar.BufferView.fst(84,4-98,24): (Warning 252) (Hint-replay failed): could not prove post-condition (see also LowStar.BufferView.fst(82,11-82,41))
LowStar.BufferView.fst(156,38-156,40): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type FStar.Seq.Properties.lseq (FStar.Pervasives.dfst vb)
(LowStar.Buffer.length (LowStar.BufferView.as_buffer vb)); got type FStar.Seq.Base.seq (FStar.Pervasives.dfst vb) (see also FStar.Seq.Properties.fst(24,19-24,36))
FStar.Buffer.fst(65,4-65,10): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type Prims.nat; got type FStar.UInt.uint_t FStar.UInt32.n (see also prims.fst(408,17-408,23))
FStar.Reflection.Arith.fst(116,30-116,32): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type t: FStar.Reflection.Types.term{t << t}; got type FStar.Reflection.Types.term (see also FStar.Reflection.Arith.fst(110,4-153,14))
FStar.Reflection.Arith.fst(116,30-116,32): (Warning 252) Subtyping check failed; expected type t: FStar.Reflection.Types.term{t << t}; got type FStar.Reflection.Types.term (see also FStar.Reflection.Arith.fst(110,4-153,14))
FStar.Reflection.Arith.fst(116,30-116,32): (Warning 252) Subtyping check failed; expected type t: FStar.Reflection.Types.term{t << t}; got type FStar.Reflection.Types.term (see also FStar.Reflection.Arith.fst(110,4-153,14))
LowStar.Buffer.fst(56,2-56,95): (Warning 252) (Hint-replay failed): could not prove post-condition (see also LowStar.Buffer.fsti(131,11-131,136))
LowStar.Buffer.fst(1040,2-1040,8): (Warning 252) (Hint-replay failed): assertion failed (see also LowStar.Buffer.fst(1040,9-1040,59))
LowStar.Buffer.fst(1056,83-1056,85): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type h:
(h:
FStar.Monotonic.HyperStack.mem
{ LowStar.Buffer.live h
(LowStar.Buffer.gsub b
(FStar.UInt32.__uint_to_t 1)
(FStar.UInt32.sub (LowStar.Buffer.len b) (FStar.UInt32.__uint_to_t 1))) })
{ %[ FStar.Seq.Base.length (FStar.Seq.Base.slice s 1 (FStar.Seq.Base.length s)) ] <<
%[ FStar.Seq.Base.length s ] }; got type FStar.Monotonic.HyperStack.mem (see also LowStar.Buffer.fst(1051,24-1051,32))
LowStar.Buffer.fst(1097,36-1097,37): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type _: LowStar.Buffer.buffer' a {Buffer? _}; got type LowStar.Buffer.buffer a (see also LowStar.Buffer.fst(16,2-16,8))
LowStar.Buffer.fst(1134,80-1134,82): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type h: FStar.Monotonic.HyperStack.mem{LowStar.Buffer.live h b'}; got type FStar.Monotonic.HyperStack.mem (see also LowStar.Buffer.fst(1105,31-1105,39))
LowStar.Buffer.fst(1146,42-1146,43): (Warning 252) (Hint-replay failed): Subtyping check failed; expected type _: LowStar.Buffer.buffer' a {Buffer? _}; got type LowStar.Buffer.buffer a (see also LowStar.Buffer.fst(16,2-16,8))
Not extracting type definition FStar.Ghost.erased to KreMLin (assumed type)
Not extracting type definition FStar.Monotonic.Witnessed.get to KreMLin (assumed type)
Not extracting type definition FStar.Monotonic.Witnessed.set to KreMLin (assumed type)
Not extracting type definition FStar.Date.dateTime to KreMLin (assumed type)
Not extracting type definition FStar.Date.timeSpan to KreMLin (assumed type)
Not extracting FStar.Exn.raise to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.ST.gst_witness to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.ST.gst_recall to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.ST.gst_witness to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.ST.gst_recall to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.All.exit to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.All.try_with to KreMLin (polymorphic assumes are not supported)
Not extracting exception Failure to KreMLin (exceptions unsupported)
Not extracting FStar.All.failwith to KreMLin (polymorphic assumes are not supported)
Not extracting type definition FStar.Dyn.dyn to KreMLin (assumed type)
Not extracting FStar.Dyn.mkdyn to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.Dyn.undyn to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.All.pipe_right to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.All.pipe_left to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.All.failwith to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.All.exit to KreMLin (polymorphic assumes are not supported)
Not extracting FStar.HyperStack.All.try_with to KreMLin (polymorphic assumes are not supported)
Not extracting type definition FStar.Float.float to KreMLin (assumed type)
(Warning 250) Error while extracting FStar.List.filter_map to KreMLin (Failure("Internal error: name not found filter_map_acc\n"))

(Warning 250) Error while extracting FStar.List.index to KreMLin (Failure("Internal error: name not found index1\n"))

Not extracting type definition FStar.Char.char to KreMLin (assumed type)
Not extracting exception EOF to KreMLin (exceptions unsupported)
Not extracting type definition FStar.IO.fd_read to KreMLin (assumed type)
Not extracting type definition FStar.IO.fd_write to KreMLin (assumed type)
Not extracting FStar.IO.print_any to KreMLin (polymorphic assumes are not supported)
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\Spec.Loops.fst.hints; ran without hints
Not extracting type definition FStar.Bytes.bytes to KreMLin (assumed type)
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\FStar.Kremlin.Endianness.fst.hints; ran without hints
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\C.Loops.fst.hints; ran without hints
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\C.Endianness.fst.hints; ran without hints
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\C.fst.hints; ran without hints
Not extracting type definition C.channel to KreMLin (assumed type)
Not extracting type definition C.intptr_t to KreMLin (assumed type)
Not extracting type definition C.char to KreMLin (assumed type)
Not extracting type definition C.int to KreMLin (assumed type)
Not extracting type definition C.clock_t to KreMLin (assumed type)
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\C.String.fst.hints; ran without hints
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\C.Failure.fst.hints; ran without hints
Unable to open hints file: C:\build\agent2\_work\12\s\kremlin\kremlib\TestLib.fsti.hints; ran without hints
Not extracting type definition TestLib.cycles to KreMLin (assumed type)
Cannot re-check FStar.IO.uu___is_EOF as valid Low* and will not extract it.  If FStar.IO.uu___is_EOF is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: in top-level declaration FStar.IO.uu___is_EOF, in file FStar_IO: Malformed input:
Reference to undefined type: Prims.exn
Cannot re-check FStar.Int.div_eucl as valid Low* and will not extract it.  If FStar.Int.div_eucl is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: in top-level declaration FStar.Int.div_eucl, in file FStar_Int: Malformed input:
subtype mismatch, krml_checked_int_t -> krml_checked_int_t (a.k.a. krml_checked_int_t -> krml_checked_int_t) vs krml_checked_int_t (a.k.a. krml_checked_int_t)
Cannot re-check FStar.All.uu___is_Failure as valid Low* and will not extract it.  If FStar.All.uu___is_Failure is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: in top-level declaration FStar.All.uu___is_Failure, in file FStar_All: Malformed input:
Reference to undefined type: Prims.exn
Cannot re-check FStar.All.__proj__Failure__item__uu___ as valid Low* and will not extract it.  If FStar.All.__proj__Failure__item__uu___ is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: in top-level declaration FStar.All.__proj__Failure__item__uu___, in file FStar_All: Malformed input:
Reference to undefined type: Prims.exn
Cannot re-check FStar.Monotonic.Heap.ref_of' as valid Low* and will not extract it.  If FStar.Monotonic.Heap.ref_of' is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: after the definition of uu____7736, in top-level declaration FStar.Monotonic.Heap.ref_of', in file FStar_Monotonic_Heap: Malformed input:
Not a record any*
Cannot re-check FStar.Math.Lib.div as valid Low* and will not extract it.  If FStar.Math.Lib.div is not meant to be extracted, consider marking it as Ghost, noextract, or using a bundle. If it is meant to be extracted, use -dast for further debugging.

Warning 4: in top-level declaration FStar.Math.Lib.div, in file FStar_Math_Lib: Malformed input:
subtype mismatch, krml_checked_int_t -> krml_checked_int_t (a.k.a. krml_checked_int_t -> krml_checked_int_t) vs krml_checked_int_t (a.k.a. krml_checked_int_t)
Warning 9: : Some globals did not compile to C values and must be initialized before starting main(). You did not provide a main function, so users of your library MUST MAKE SURE they call kremlinit_globals(); (see kremlinit.c). Once you have fixed this, use -warn-error +9 to make this warning non-fatal.
Warning 14: : FStar.Math.Lib.signed_modulo is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.arithmetic_shift_right is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.shift_left is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.div_non_eucl is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.min is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.max is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Math.Lib.abs is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int16.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int16.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Seq.Base.hd__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.tl__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.index__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tl__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tail__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.hd__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.length__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.cons__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.append__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.empty__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.seq__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__uint64_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.hd__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.tl__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.index__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tl__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tail__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.hd__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.length__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.cons__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.append__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.empty__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.seq__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__uint32_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.append__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.empty__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Properties.last__uint8_t is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.hd__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.cons__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.tl__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.index__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tl__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tail__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.hd__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.length__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.seq__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__uint8_t is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt8.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt8.to_string_hex is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt8.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt63.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt63.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__CCConv__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__CConst__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__CEpilogue__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__CPrologue__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__Comment__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.__internal_ocaml_attributes is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int63.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int63.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int64.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int64.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int32.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int32.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int8.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int8.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Int.shift_left is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.to_int_t is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.lte is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.lt is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.gte is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.gt is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.mod_ is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.mul_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.mul is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.sub_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.sub is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.add_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.add is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.fits is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.min_int is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.max_int is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.op_At_Percent is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Int.op_Slash is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt16.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt16.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.debug_print_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.write_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.read_line is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.open_write_file is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.open_read_file is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.input_line is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.IO.print_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.string_of_char is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.collect is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.get is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.substring is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.sub is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.index_of is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.index is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.uppercase is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.lowercase is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.compare is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.concat is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.String.concat is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.op_Hat is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.strcat is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.split is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.String.split is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.make is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.length is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.strlen is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.string_of_list is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.String.string_of_list is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.String.list_of_string is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.String.list_of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : Prims.list__FStar_Char_char is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Bytes.bytes_of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.print_bytes is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.hex_of_bytes is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.hex_of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.bytes_of_hex is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.string_of_hex is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Pervasives.Native.option__Prims_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Bytes.utf8_encode is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt32.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt32.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.HyperStack.IO.print_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : C.String.of_literal is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt64.of_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.UInt64.to_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : FStar.Seq.Base.empty__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.to_uint_t is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.lte is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.lt is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.gte is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.gt is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.mod_ is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.udiv is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.div_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.div is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.mul_div is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.mul_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.mul_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.mul is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.sub_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.sub_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.sub is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.add_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.add_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.add is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.decr_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.incr_mod is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.decr_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.incr_underspec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.decr is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.incr is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.pow2_n is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.fits is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.UInt.max_int is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.BitVector.shift_right_vec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.BitVector.shift_left_vec is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.append__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.index__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.hd__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.hd__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.tl__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tl__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.List.Tot.Base.tail__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.cons__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Seq.Base.seq__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__bool is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Pervasives.Native.norm is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__FStar_Pervasives_Native_norm_step is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Pervasives.Native.delta_attr is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Pervasives.Native.delta_fully is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Pervasives.Native.delta_only is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : FStar.Pervasives.Native.norm_step is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__Prims_string is not Low*; it uses a garbage-collected type (e.g. list) and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.list__Prims_string is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : Prims.string_of_int is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.string_of_int is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : Prims.strcat is not Low*; it uses F*'s Prims.string type and will leak memory; you need to link with a garbage-collector; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions; if you are looking to use C strings, look into C.String (in kremlib/) and Server (in test/). See the KreMLin tutorial for more information.
Warning 14: : Prims.abs is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.pow2 is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_LessThan is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_GreaterThanOrEqual is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_GreaterThan is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_LessThanOrEqual is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Modulus is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Minus is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Addition is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Subtraction is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Division is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 14: : Prims.op_Multiply is not Low*; it uses mathematical integers and runtime checks may fail; rewrite your code to use machine integers, or if you must, use -add-include '"kremlin/internal/compat.h"'; if this declaration is for specification purposes only, consider marking it noextract or using -bundle <name-of-the-module> to only keep reachable definitions.
Warning 11: in top-level declaration kremlinit_globals: this expression is not Low*; the enclosing function cannot be translated into C*: fun (r(0, ): Prims_int) :FStar_Pervasives_Native_option__FStar_Pervasives_dtuple4_____FStar_Pervasives_Native_option_____bool_any { { tag = FStar_Pervasives_Native_None; } }
'nuget.exe' is not recognized as an internal or external command,
operable program or batch file.
scons: *** Error 1
crypto/asn1/x_int64.c: In function 'uint64_print':
crypto/asn1/x_int64.c:105:32: warning: unknown conversion type character 'j' in format [-Wformat=]
return BIO_printf(out, "%jd\n", **(int64_t **)pval);
^
crypto/asn1/x_int64.c:105:32: warning: too many arguments for format [-Wformat-extra-args]
crypto/asn1/x_int64.c:106:28: warning: unknown conversion type character 'j' in format [-Wformat=]
return BIO_printf(out, "%ju\n", **(uint64_t **)pval);
^
crypto/asn1/x_int64.c:106:28: warning: too many arguments for format [-Wformat-extra-args]
crypto/bio/b_sock2.c: In function 'BIO_socket':
crypto/bio/b_sock2.c:45:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock2.c:51:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock2.c: In function 'BIO_accept_ex':
crypto/bio/b_sock2.c:263:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock2.c:268:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock.c: In function 'BIO_get_accept_socket':
crypto/bio/b_sock.c:202:13: warning: overflow in implicit constant conversion [-Woverflow]
int s = INVALID_SOCKET;
^
crypto/bio/b_sock.c:207:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock.c:210:16: warning: overflow in implicit constant conversion [-Woverflow]
return INVALID_SOCKET;
^
crypto/bio/b_sock.c:217:13: warning: overflow in implicit constant conversion [-Woverflow]
s = INVALID_SOCKET;
^
crypto/bio/b_sock.c:224:13: warning: overflow in implicit constant conversion [-Woverflow]
s = INVALID_SOCKET;
^
In file included from crypto/bn/bn_print.c:15:0:
crypto/bn/bn_print.c: In function 'BN_bn2dec':
crypto/bn/bn_lcl.h:94:27: warning: unknown conversion type character 'l' in format [-Wformat=]
#  define BN_DEC_FMT1     "%llu"
^
crypto/bn/bn_print.c:104:57: note: in expansion of macro 'BN_DEC_FMT1'
n = BIO_snprintf(p, tbytes - (size_t)(p - buf), BN_DEC_FMT1, *lp);
^
crypto/bn/bn_lcl.h:94:27: warning: too many arguments for format [-Wformat-extra-args]
#  define BN_DEC_FMT1     "%llu"
^
crypto/bn/bn_print.c:104:57: note: in expansion of macro 'BN_DEC_FMT1'
n = BIO_snprintf(p, tbytes - (size_t)(p - buf), BN_DEC_FMT1, *lp);
^
crypto/bn/bn_lcl.h:95:27: warning: unknown conversion type character 'l' in format [-Wformat=]
#  define BN_DEC_FMT2     "%019llu"
^
crypto/bn/bn_print.c:110:61: note: in expansion of macro 'BN_DEC_FMT2'
n = BIO_snprintf(p, tbytes - (size_t)(p - buf), BN_DEC_FMT2, *lp);
^
crypto/bn/bn_lcl.h:95:27: warning: too many arguments for format [-Wformat-extra-args]
#  define BN_DEC_FMT2     "%019llu"
^
crypto/bn/bn_print.c:110:61: note: in expansion of macro 'BN_DEC_FMT2'
n = BIO_snprintf(p, tbytes - (size_t)(p - buf), BN_DEC_FMT2, *lp);
^
crypto/bn/bn_print.c: In function 'BN_options':
crypto/bn/bn_print.c:340:42: warning: unknown conversion type character 'z' in format [-Wformat=]
BIO_snprintf(data, sizeof(data), "bn(%zu,%zu)",
^
crypto/bn/bn_print.c:340:42: warning: unknown conversion type character 'z' in format [-Wformat=]
crypto/bn/bn_print.c:340:42: warning: too many arguments for format [-Wformat-extra-args]
crypto/threads_win.c: In function 'CRYPTO_atomic_add':
crypto/threads_win.c:132:35: warning: passing argument 1 of '_InterlockedExchangeAdd' from incompatible pointer type [-Wincompatible-pointer-types]
*ret = InterlockedExchangeAdd(val, amount) + amount;
^
In file included from /usr/x86_64-w64-mingw32/sys-root/mingw/include/winnt.h:27:0,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/minwindef.h:163,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windef.h:8,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windows.h:69,
from crypto/threads_win.c:11:
/usr/x86_64-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h:1026:10: note: expected 'volatile long int *' but argument is of type 'int *'
__LONG32 _InterlockedExchangeAdd(__LONG32 volatile *Addend, __LONG32 Value) {
^
crypto/threads_win.c: In function 'CRYPTO_atomic_read':
crypto/threads_win.c:138:39: warning: passing argument 1 of '_InterlockedCompareExchange' from incompatible pointer type [-Wincompatible-pointer-types]
*ret = InterlockedCompareExchange(val, 0, 0);
^
In file included from /usr/x86_64-w64-mingw32/sys-root/mingw/include/winnt.h:27:0,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/minwindef.h:163,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windef.h:8,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windows.h:69,
from crypto/threads_win.c:11:
/usr/x86_64-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h:1037:10: note: expected 'volatile long int *' but argument is of type 'int *'
__LONG32 _InterlockedCompareExchange(__LONG32 volatile *Destination, __LONG32 ExChange, __LONG32 Comperand) {
^
crypto/threads_win.c: In function 'CRYPTO_atomic_write':
crypto/threads_win.c:144:25: warning: passing argument 1 of '_InterlockedExchange' from incompatible pointer type [-Wincompatible-pointer-types]
InterlockedExchange(val, n);
^
In file included from /usr/x86_64-w64-mingw32/sys-root/mingw/include/winnt.h:27:0,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/minwindef.h:163,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windef.h:8,
from /usr/x86_64-w64-mingw32/sys-root/mingw/include/windows.h:69,
from crypto/threads_win.c:11:
/usr/x86_64-w64-mingw32/sys-root/mingw/include/psdk_inc/intrin-impl.h:1088:10: note: expected 'volatile long int *' but argument is of type 'int *'
__LONG32 _InterlockedExchange(__LONG32 volatile *Target, __LONG32 Value) {
^
test/testutil/tests.c: In function 'test_size_t_eq':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:202:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, eq, ==, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:202:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, eq, ==, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:202:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, eq, ==, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c: In function 'test_size_t_ne':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:203:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ne, !=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:203:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ne, !=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:203:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ne, !=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c: In function 'test_size_t_lt':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:204:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, lt, <, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:204:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, lt, <, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:204:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, lt, <, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c: In function 'test_size_t_le':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:205:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, le, <=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:205:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, le, <=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:205:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, le, <=, fmt)                          \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c: In function 'test_size_t_gt':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:206:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, gt, >, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:206:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, gt, >, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:206:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, gt, >, fmt)                           \
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c: In function 'test_size_t_ge':
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:207:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ge, >=, fmt)
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: unknown conversion type character 'z' in format [-Wformat=]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:207:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ge, >=, fmt)
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
test/testutil/tests.c:196:27: warning: too many arguments for format [-Wformat-extra-args]
"[" fmt "] compared to [" fmt "]",            \
^
test/testutil/tests.c:207:5: note: in expansion of macro 'DEFINE_COMPARISON'
DEFINE_COMPARISON(type, name, ge, >=, fmt)
^
test/testutil/tests.c:215:1: note: in expansion of macro 'DEFINE_COMPARISONS'
DEFINE_COMPARISONS(size_t, size_t, "%zu")
^
ar: creating libssl.a
ar: creating test/libtestutil.a
ar: creating libcrypto.a
openssl_stub.c: In function ‘ocaml_load_chain’:
openssl_stub.c:2187:16: warning: variable ‘first’ set but not used [-Wunused-but-set-variable]
X509 *x509, *first = NULL;
^
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:12: uint128-c/FStar_UInt128.h] Error 2
make: *** [Makefile:9: uint128-c] Error 2
make: *** Waiting for unfinished jobs....
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:50: chacha-c/out.krml] Error 2
make[1]: *** Waiting for unfinished jobs....
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:94: salsa-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:83: poly-c/out.krml] Error 2
make: *** [Makefile:9: poly1305-c] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:111: chacha-vec128-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:76: poly-c/out.krml] Error 2
make: *** [Makefile:9: salsa-family-c] Error 2
make: *** [Makefile:9: poly1305_32-c] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:42: hmac-sha256-c/out.krml] Error 2
make[1]: *** Waiting for unfinished jobs....
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:49: aead-c/Hacl_Chacha20Poly1305.c] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make[1]: *** Waiting for unfinished jobs....

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:136: ed25519-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make: *** [Makefile:9: ed25519-c] Error 2

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:41: policies-c/Hacl_Policies.c] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:38: ccomp-c/FStar.h] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make[1]: *** Waiting for unfinished jobs....

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:44: box-c/NaCl.c] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make: *** [Makefile:9: api-c] Error 2

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:96: x25519-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make: *** [Makefile:9: curve25519-c] Error 2

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:45: sha2-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)
make: *** [Makefile:9: hash-c] Error 2

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:57: hmac-sha384-c/out.krml] Error 2
C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native: unknown option '-fnouint128'.
KreMLin: from a ML-like subset to C

Usage: C:\build\agent2\_work\12\s\kremlin\_build\src\Kremlin.native [OPTIONS] FILES

High-level description:
1. If some FILES end with .fst or .fsti, and [-verify] is set, KreMLin will
call [fstar] on them to perform verification.
2. If some FILES end with .fst or .fsti, KreMLin will call [fstar] on them to
perform extraction and produce [out.krml].
3. If exactly one FILE ends with [.krml] or [.json], or if a [.krml] file was
produced at step 2., KreMLin will generate a series of [.c] and [.h] files
in the directory specified by [-tmpdir], or in the current directory.
4. If some FILES end with [.c], KreMLin will compile them along with the [.c]
files generated at step 3. to obtain a series of [.o] files.
5. If some FILES end with [.o], [.S] or [.a], KreMLin will link them along with the
[.o] files obtained at step 4. to obtain a final executable.

The [-skip-extraction] option stops KreMLin after step 1.
The [-skip-translation] option stops KreMLin after step 2.
The [-skip-compilation] option stops KreMLin after step 3.
The [-skip-linking] option stops KreMLin after step 4.

The [-warn-error] option follows the OCaml syntax, namely:
- [r] is a range of warnings (either a number [n], or a range [n..n])
- [-r] silences range [r]
- [+r] enables range [r]
- [@r] makes range [r] fatal.

The default is +1..2@3+4..8@9+10@11+12..15 and the available warnings are:
1: not generating code for a provided file
2: found a reference to a function without implementation
3: external command failed
4: type error / malformed input
5: type definition contains an application of an undefined type abbreviation
6: variable-length array
7: private F* function cannot be marked as C static
8: C inline function reference across translation units
9: need to manually call static initializers for globals
10: deprecated feature
11: subexpression is not Low*; cannot proceed
12: cannot be compiled to Wasm
13: monomorphic instance about to be dropped
14: cannot perform tail-call optimization
15: function is not Low*; need compatibility headers

The [-bundle] option takes an argument of the form Api=Pattern1,...,Patternn
The Api= part is optional and Api is made up of a non-empty list of modules
separated by + (for instance: Interface1+Interface2). A pattern is either Foo.Bar
(exact match) or Foo.Baz.* (prefix). The semantics are as follows: all the
modules that match a pattern are grouped into a single C translation unit, and
their declarations are marked as static, inasmuch as cross-translation unit
calls permit. If the Api= part is present, then the module named Api must be
found within the set of input files, and its declarations are appended to the
translation unit without any visibility modifications.

The default arguments are: 

All include directories and paths supports special prefixes:
- if a path starts with FSTAR_LIB, this will expand to wherever F*'s ulib
directory is
- if a path starts with FSTAR_HOME, this will expand to wherever the source
checkout of F* is (this does not always exist, e.g. in the case of an OPAM
setup)

The compiler switches turn on the following options.
[-cc gcc] (default) adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc clang] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses -ccopt -std=c11]
[-cc g++] adds [-ccopts -Wall,-Werror,-Wno-unused-variable,-Wno-unknown-warning-option,-Wno-unused-but-set-variable,-g,-fwrapv,-fstack-check,-D_BSD_SOURCE,-D_DEFAULT_SOURCE,-D__USE_MINGW_ANSI_STDIO,-Wno-parentheses]
[-cc msvc] adds [-warn-error +6 -falloca]
[-cc compcert] adds [-warn-error @6@8 -fnostruct-passing -fnoanonymous-unions -ccopts -g,-D_BSD_SOURCE,-D_DEFAULT_SOURCE]

The [-fc89] option triggers [-fnoanonymous-unions], [-fnocompound-literals] and
[-fc89-scope]. It also changes the invocations above to use [-std=c89]. Note
that if you're using the uint128 type, you will have to manually compile this
code with -DKRML_VERIFIED_UINT128.

To debug Wasm codegen, it might be useful to trigger the same compilation path
as Wasm, but emit C code instead. This can be achieved with [-wasm -d
force-c,c-calls,wasm-calls -drop C,TestLib -add-include '"hack.h"']
where [hack.h] contains [#define WasmSupport_check_buffer_size(X)].

Supported options:
-cc                     compiler to use; one of gcc (default), compcert, g++, clang, msvc
-m32                    turn on 32-bit cross-compiling
-fsopt                  option to pass to F* (use -fsopts to pass a comma-separated list of values)
-ccopt                  option to pass to the C compiler and linker (use -ccopts to pass a comma-separated list of values)
-ldopt                  option to pass to the C linker (use -ldopts to pass a comma-separated list of values)
-skip-extraction        stop after step 1.
-skip-translation       stop after step 2.
-skip-compilation       stop after step 3.
-skip-linking           stop after step 4.
-verify                 ask F* to verify the program
-verbose                show the output of intermediary tools when acting as a driver for F* or the C compiler
-diagnostics list       recursive functions and overly nested data types (useful for MSVC)
-wasm                   emit a .wasm file instead of C

-add-early-include      prepend #include the-argument to every generated file, before kremlib.h
-add-include            prepend #include the-argument to every generated file, after the #define __FOO_H
-add-include-tmh        append #include <FILE.tmh>, where FILE is the current basename
-minimal                do not prepend #include "kremlib.h"; do not bundle FStar
-static-header          generate a .h for the given module where all functions are marked a static inline
-no-prefix              don't prepend the module name to declarations from this module
-bundle                 group modules into a single C translation unit (see above)
-drop                   do not extract code for this module (see above)
-library                this is a model and all functions should be made abstract
-header                 prepend the contents of the given file at the beginning of each .c and .h
-tmpdir                 temporary directory for .out, .c, .h and .o files
-I                      add directory to search path (F* and C compiler)
-o                      name of the resulting executable
-warn-error             decide which errors are fatal / warnings / silent (default: +1..2@3+4..8@9+10@11+12..15)

-by-ref                 pass the given struct type by reference, always
-falloca                use alloca(3) for variable-length arrays on the stack
-fnostruct-passing      disable passing structures by value and use pointers instead
-fnoanonymous-unions    disable C11 anonymous unions
-fnocompound-literals   don't generate C11 compound literals
-ftail-calls            statically compile tail-calls into loops
-funroll-loops          textually expand loops smaller than N
-fparentheses           add unnecessary parentheses to silence GCC and Clang's -Wparentheses
-fno-shadow             add unnecessary renamings to defeat GCC and Clang's -Wshadow, as well as the various MSVC warnings
-fcurly-braces          always add curly braces around blocks
-fnoshort-enums         use C11 enums instead of C macros and uint8_t for enums
-fc89-scope             use C89 scoping rules
-fc89                   generate C89-compatible code (meta-option, see above)

-djson                  dump the input AST as JSON
-dast                   pretty-print the internal AST
-dmonomorphization      pretty-print the internal AST after monomorphization
-dinline                pretty-print the internal AST after inlining
-dpattern               pretty-print after pattern matches compilation
-dsimplify              pretty-print the internal AST after going to a statement language
-dstructs               pretty-print the internal AST after struct transformations
-dc                     pretty-print the output C
-dwasm                  pretty-print the output Wasm
-d                      debug the specific comma-separated list of values; currently supported: inline,bundle,reachability,c-calls,wasm-calls,wasm-memory,wasm,force-c,cflat

-help                   Display this list of options
--help                  Display this list of options
make[1]: *** [Makefile:67: hmac-sha512-c/out.krml] Error 2
make: *** [Makefile:9: hmac-c] Error 2
Warning 10: : -drop is deprecated
use a combination of -bundle and -d reachability to make sure the functions are eliminated as you wish
Warning 13: : FStar.Monotonic.HyperStack.mem, a monomorphic instance, is first used, and therefore inserted, in file FStar which is about to be dropped; you may get a C compiler error about FStar_Monotonic_HyperStack_mem if any other module uses this definition
Warning 13: : FStar.UInt128.t, a monomorphic instance, is first used, and therefore inserted, in file FStar which is about to be dropped; you may get a C compiler error about FStar_UInt128_t if any other module uses this definition
Warning 13: : Hacl.UInt128.t, a monomorphic instance, is first used, and therefore inserted, in file Hacl_UInt128 which is about to be dropped; you may get a C compiler error about Hacl_UInt128_t if any other module uses this definition
Warning 13: : Hacl.Types.u32, a monomorphic instance, is first used, and therefore inserted, in file Hacl_Types which is about to be dropped; you may get a C compiler error about Hacl_Types_u32 if any other module uses this definition
Warning 13: : Hacl.Types.h8, a monomorphic instance, is first used, and therefore inserted, in file Hacl_Types which is about to be dropped; you may get a C compiler error about Hacl_Types_h8 if any other module uses this definition
Warning 13: : Hacl.Types.uint8_p, a monomorphic instance, is first used, and therefore inserted, in file Hacl_Types which is about to be dropped; you may get a C compiler error about Hacl_Types_uint8_p if any other module uses this definition
make: *** [Makefile:9: lib/kremlin-c] Error 2
Command exited with non-zero status 2
374.36user 476.10system 15:39.31elapsed 90%CPU (0avgtext+0avgdata 7288502272maxresident)k
0inputs+0outputs (31575263major+0minor)pagefaults 0swaps
