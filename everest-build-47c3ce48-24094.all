This is /home/everbld/everest-ci/ci
Working directory: /cygdrive/c/build/agent1/_work/6/s
About to run: everest_rebuild
BUILD_SOURCEBRANCHNAME: master
BUILD_DEFINITIONNAME: Everest-CI-Windows
BUILD_BUILDID: 24094
DEFINITIONNAME:
Z3 is /home/everbld/everest/z3-4.5.1.1f29cebd4df6-x64-win/bin/z3
Removing FStar/
Removing fstarlang_binaries/
Removing hacl-star/
Removing kremlin/
Removing mitls-fstar/
Removing vale/
# Switching to the everest directory ... now in /cygdrive/c/build/agent1/_work/6/s

Checking environment
... which found
... no suspicious bash
... 64-bit cygwin
... no suspicious cygwin packages
... all 45 cygwin packages seem to be installed
... proper mingw directory seems to be in PATH
... github.com access ok
... ocaml minimum version requirements met
... opam found
... all 18 ocamlfind packages found
... sample ocamlbuild project compiles successfully
... fsc found in PATH
... cloning FStarLang/binaries
Cloning into 'fstarlang_binaries'...
Already on 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at e1dfa05 Adding new build package and removing oldest.
... version of z3 found in PATH: 1f29cebd4df6
... version of z3 found in z3-tested is: 1f29cebd4df6
... nuget found in PATH
... Python line found at /cygdrive/c/Python27
... scons.bat found in PATH

Remember to run source "/home/everbld/.bash_profile" if it was modified!
Note: you *may* want to add C:/build/agent1/_work/6/s/FStar/bin and C:/build/agent1/_work/6/s/kremlin to your PATH
Note: you *may* want to export FSTAR_HOME=C:/build/agent1/_work/6/s/FStar
Note: you *may* want to export KREMLIN_HOME=C:/build/agent1/_work/6/s/kremlin
Note: you *may* want to export HACL_HOME=C:/build/agent1/_work/6/s/hacl-star

Pulling mitls-fstar
Note: you're welcome to create symbolic links if you already have cloned the repository elsewhere
Cloning into 'mitls-fstar'...
Already on 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at 43282fd7 [CI] regenerate hints

Pulling vale
Cloning into 'vale'...
Already on 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at 777e2cf Fix SConscript error message when csc.exe is not found

Pulling FStar
Cloning into 'FStar'...
Checking out files:  30% (949/3076)   Checking out files:  31% (954/3076)   Checking out files:  32% (985/3076)   Checking out files:  33% (1016/3076)   Checking out files:  34% (1046/3076)   Checking out files:  35% (1077/3076)   Checking out files:  36% (1108/3076)   Checking out files:  37% (1139/3076)   Checking out files:  38% (1169/3076)   Checking out files:  39% (1200/3076)   Checking out files:  40% (1231/3076)   Checking out files:  41% (1262/3076)   Checking out files:  42% (1292/3076)   Checking out files:  43% (1323/3076)   Checking out files:  44% (1354/3076)   Checking out files:  45% (1385/3076)   Checking out files:  46% (1415/3076)   Checking out files:  47% (1446/3076)   Checking out files:  48% (1477/3076)   Checking out files:  49% (1508/3076)   Checking out files:  50% (1538/3076)   Checking out files:  51% (1569/3076)   Checking out files:  52% (1600/3076)   Checking out files:  53% (1631/3076)   Checking out files:  54% (1662/3076)   Checking out files:  55% (1692/3076)   Checking out files:  56% (1723/3076)   Checking out files:  57% (1754/3076)   Checking out files:  58% (1785/3076)   Checking out files:  59% (1815/3076)   Checking out files:  60% (1846/3076)   Checking out files:  61% (1877/3076)   Checking out files:  61% (1896/3076)   Checking out files:  62% (1908/3076)   Checking out files:  63% (1938/3076)   Checking out files:  64% (1969/3076)   Checking out files:  65% (2000/3076)   Checking out files:  66% (2031/3076)   Checking out files:  67% (2061/3076)   Checking out files:  68% (2092/3076)   Checking out files:  69% (2123/3076)   Checking out files:  70% (2154/3076)   Checking out files:  71% (2184/3076)   Checking out files:  72% (2215/3076)   Checking out files:  73% (2246/3076)   Checking out files:  74% (2277/3076)   Checking out files:  75% (2307/3076)   Checking out files:  76% (2338/3076)   Checking out files:  77% (2369/3076)   Checking out files:  78% (2400/3076)   Checking out files:  79% (2431/3076)   Checking out files:  80% (2461/3076)   Checking out files:  81% (2492/3076)   Checking out files:  82% (2523/3076)   Checking out files:  83% (2554/3076)   Checking out files:  84% (2584/3076)   Checking out files:  85% (2615/3076)   Checking out files:  86% (2646/3076)   Checking out files:  87% (2677/3076)   Checking out files:  88% (2707/3076)   Checking out files:  89% (2738/3076)   Checking out files:  89% (2752/3076)   Checking out files:  90% (2769/3076)   Checking out files:  91% (2800/3076)   Checking out files:  92% (2830/3076)   Checking out files:  93% (2861/3076)   Checking out files:  94% (2892/3076)   Checking out files:  95% (2923/3076)   Checking out files:  96% (2953/3076)   Checking out files:  97% (2984/3076)   Checking out files:  98% (3015/3076)   Checking out files:  99% (3046/3076)   Checking out files: 100% (3076/3076)   Checking out files: 100% (3076/3076), done.
Branch stable set up to track remote branch stable from origin.
Switched to a new branch 'stable'
HEAD is now at d997d4461 Merge branch 'taramana_python' of ssh://github.com/FStarLang/FStar into stable
Submodule 'ucontrib/CoreCrypto/ml/openssl' (https://github.com/openssl/openssl) registered for path 'ucontrib/CoreCrypto/ml/openssl'
Cloning into '/cygdrive/c/build/agent1/_work/6/s/FStar/ucontrib/CoreCrypto/ml/openssl'...
Submodule path 'ucontrib/CoreCrypto/ml/openssl': checked out '3a1548643f3f9ef6905e31bcde8603a525789abc'

Pulling hacl-star
Cloning into 'hacl-star'...
Checking out files:  17% (923/5294)   Checking out files:  18% (953/5294)   Checking out files:  19% (1006/5294)   Checking out files:  20% (1059/5294)   Checking out files:  21% (1112/5294)   Checking out files:  22% (1165/5294)   Checking out files:  23% (1218/5294)   Checking out files:  24% (1271/5294)   Checking out files:  25% (1324/5294)   Checking out files:  26% (1377/5294)   Checking out files:  27% (1430/5294)   Checking out files:  28% (1483/5294)   Checking out files:  29% (1536/5294)   Checking out files:  30% (1589/5294)   Checking out files:  31% (1642/5294)   Checking out files:  32% (1695/5294)   Checking out files:  33% (1748/5294)   Checking out files:  34% (1800/5294)   Checking out files:  34% (1845/5294)   Checking out files:  35% (1853/5294)   Checking out files:  36% (1906/5294)   Checking out files:  37% (1959/5294)   Checking out files:  38% (2012/5294)   Checking out files:  39% (2065/5294)   Checking out files:  40% (2118/5294)   Checking out files:  41% (2171/5294)   Checking out files:  42% (2224/5294)   Checking out files:  43% (2277/5294)   Checking out files:  44% (2330/5294)   Checking out files:  45% (2383/5294)   Checking out files:  46% (2436/5294)   Checking out files:  47% (2489/5294)   Checking out files:  48% (2542/5294)   Checking out files:  49% (2595/5294)   Checking out files:  50% (2647/5294)   Checking out files:  51% (2700/5294)   Checking out files:  51% (2710/5294)   Checking out files:  52% (2753/5294)   Checking out files:  53% (2806/5294)   Checking out files:  54% (2859/5294)   Checking out files:  55% (2912/5294)   Checking out files:  56% (2965/5294)   Checking out files:  57% (3018/5294)   Checking out files:  58% (3071/5294)   Checking out files:  59% (3124/5294)   Checking out files:  60% (3177/5294)   Checking out files:  61% (3230/5294)   Checking out files:  62% (3283/5294)   Checking out files:  63% (3336/5294)   Checking out files:  64% (3389/5294)   Checking out files:  65% (3442/5294)   Checking out files:  66% (3495/5294)   Checking out files:  67% (3547/5294)   Checking out files:  68% (3600/5294)   Checking out files:  69% (3653/5294)   Checking out files:  69% (3674/5294)   Checking out files:  70% (3706/5294)   Checking out files:  71% (3759/5294)   Checking out files:  72% (3812/5294)   Checking out files:  73% (3865/5294)   Checking out files:  74% (3918/5294)   Checking out files:  75% (3971/5294)   Checking out files:  76% (4024/5294)   Checking out files:  77% (4077/5294)   Checking out files:  78% (4130/5294)   Checking out files:  79% (4183/5294)   Checking out files:  80% (4236/5294)   Checking out files:  81% (4289/5294)   Checking out files:  82% (4342/5294)   Checking out files:  83% (4395/5294)   Checking out files:  84% (4447/5294)   Checking out files:  85% (4500/5294)   Checking out files:  86% (4553/5294)   Checking out files:  86% (4592/5294)   Checking out files:  87% (4606/5294)   Checking out files:  88% (4659/5294)   Checking out files:  89% (4712/5294)   Checking out files:  90% (4765/5294)   Checking out files:  91% (4818/5294)   Checking out files:  92% (4871/5294)   Checking out files:  93% (4924/5294)   Checking out files:  94% (4977/5294)   Checking out files:  95% (5030/5294)   Checking out files:  96% (5083/5294)   Checking out files:  97% (5136/5294)   Checking out files:  98% (5189/5294)   Checking out files:  99% (5242/5294)   Checking out files: 100% (5294/5294)   Checking out files: 100% (5294/5294), done.
Submodule 'other_providers/libsodium' (https://github.com/jedisct1/libsodium.git) registered for path 'other_providers/libsodium'
Submodule 'other_providers/openssl' (https://github.com/openssl/openssl.git) registered for path 'other_providers/openssl'
Submodule 'other_providers/vale' (https://github.com/project-everest/vale.git) registered for path 'other_providers/vale'
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/libsodium'...
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/openssl'...
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/vale'...
Submodule path 'other_providers/libsodium': checked out 'e878bc141be12820dc6dbcd7a97bf50070bc1e2a'
Submodule path 'other_providers/openssl': checked out '85d6ad34aa0158fb25538e116e611e6b858d3638'
Submodule 'boringssl' (https://boringssl.googlesource.com/boringssl) registered for path 'other_providers/openssl/boringssl'
Submodule 'krb5' (https://github.com/krb5/krb5) registered for path 'other_providers/openssl/krb5'
Submodule 'pyca.cryptography' (https://github.com/pyca/cryptography.git) registered for path 'other_providers/openssl/pyca-cryptography'
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/openssl/boringssl'...
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/openssl/krb5'...
Cloning into '/cygdrive/c/build/agent1/_work/6/s/hacl-star/other_providers/openssl/pyca-cryptography'...
Submodule path 'other_providers/openssl/boringssl': checked out '2070f8ad9151dc8f3a73bffaa146b5e6937a583f'
Submodule path 'other_providers/openssl/krb5': checked out 'b9ad6c49505c96a088326b62a52568e3484f2168'
Submodule path 'other_providers/openssl/pyca-cryptography': checked out 'c1f8e460330b7ce83d4ea5a9b753a35321f0cf9e'
Submodule path 'other_providers/vale': checked out '3b55394035a0f456b29db52e6fcc8bcc8a7e76d4'
Already on 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at 547ec026 fixed vec128 on neon ***NO_CI***
warning: unable to rmdir krb5: Directory not empty
Submodule path 'other_providers/openssl': checked out '6828358c6565af0e31ac1a9ff9c54c94a04bec75'

Pulling kremlin
Cloning into 'kremlin'...
Already on 'master'
Your branch is up-to-date with 'origin/master'.
HEAD is now at 1dbacde Merge pull request #70 from psumbera/master
exported FSTAR_HOME=C:/build/agent1/_work/6/s/FStar
exported OPENSSL_HOME=C:/build/agent1/_work/6/s/FStar/ucontrib/CoreCrypto/ml/openssl
exported KREMLIN_HOME=C:/build/agent1/_work/6/s/kremlin
exported VALE_HOME=C:/build/agent1/_work/6/s/vale
exported HACL_HOME=C:/build/agent1/_work/6/s/hacl-star
exported PATH=/cygdrive/c/build/agent1/_work/6/s/FStar/ucontrib/CoreCrypto/ml/openssl:/cygdrive/c/build/agent1/_work/6/s/FStar/bin:/cygdrive/c/build/agent1/_work/6/s/kremlin:/home/everbld/.opam/4.05.0+mingw64c/bin:/cygdrive/c/Windows/Microsoft.NET/Framework64/v4.0.30319/:/home/everbld/everest/nuget/bin:/home/everbld/everest/z3-4.5.1.1f29cebd4df6-x64-win/bin:/cygdrive/c/PROGRA~2/MICROS~1.0/VC/bin/amd64:/cygdrive/c/PROGRA~2/MICROS~1.0/VC/bin:/cygdrive/c/PROGRA~2/MICROS~4/F#/4.0/FRAMEW~1/v4.0/:/usr/x86_64-w64-mingw32/sys-root/mingw/bin:/usr/local/bin:/usr/bin:/cygdrive/c/build/agent1/externals/git/cmd:/cygdrive/c/Python36/Scripts:/cygdrive/c/Python36:/cygdrive/c/Docker/Resources/bin:/cygdrive/c/windows/system32:/cygdrive/c/windows:/cygdrive/c/windows/System32/Wbem:/cygdrive/c/windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Users/everbld/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Program Files/Docker/Docker/resources/bin:%USERPROFILE%/.dnx/bin:/cygdrive/c/Program Files/Microsoft DNX/Dnvm:/cygdrive/c/Program Files/Microsoft SQL Server/120/Tools/Binn:/cygdrive/c/Program Files/Microsoft SQL Server/130/Tools/Binn:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/nodejs:/usr/bin:/cygdrive/c/Program Files/Git/mingw64/bin:/cygdrive/c/Users/everbld/AppData/Roaming/npm:/cygdrive/c/build/agent1/bin:/cygdrive/c/build/agent1/bin
================================================================================
Rebuilding kremlin
Running: make -C kremlin -j 16 -k
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/kremlin'
ocamlbuild -I src -I lib -I parser -use-menhir -use-ocamlfind -classic-display -menhir "menhir --infer --explain" Kremlin.native Tests.native
ocamlfind ocamlopt unix.cmxa -I 'C:/cygwin64/home/everbld/.opam/4.05.0+mingw64c/lib/ocaml\ocamlbuild' 'C:/cygwin64/home/everbld/.opam/4.05.0+mingw64c/lib/ocaml\ocamlbuild/ocamlbuildlib.cmxa' -linkpkg myocamlbuild.ml 'C:/cygwin64/home/everbld/.opam/4.05.0+mingw64c/lib/ocaml\ocamlbuild/ocamlbuild.cmx' -o myocamlbuild.exe
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Kremlin.ml > src/Kremlin.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/Ansi.ml > lib/Ansi.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Ast.ml > src/Ast.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Atom.mli > src/Atom.mli.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Common.ml > src/Common.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Constant.ml > src/Constant.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/KList.ml > lib/KList.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/Option.ml > lib/Option.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Atom.cmi src/Atom.mli
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Common.cmo src/Common.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Constant.cmo src/Constant.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KList.cmo lib/KList.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Option.cmo lib/Option.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/AstToCFlat.ml > src/AstToCFlat.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Ansi.cmo lib/Ansi.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Ast.cmo src/Ast.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/CFlat.ml > src/CFlat.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/CFlatToWasm.ml > src/CFlatToWasm.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CFlat.cmo src/CFlat.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/KPrint.ml > lib/KPrint.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Options.ml > src/Options.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Bundle.ml > src/Bundle.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Idents.ml > src/Idents.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/KString.ml > lib/KString.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Idents.cmo src/Idents.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KString.cmo lib/KString.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Bundle.cmo src/Bundle.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Warnings.ml > src/Warnings.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Flags.ml > src/Flags.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KPrint.cmo lib/KPrint.ml
ocamlfind ocamldep -syntax camlp4o -syntax pa_ulex -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules parser/Lexer.ml > parser/Lexer.ml.depends
menhir --infer --explain --raw-depend --ocamldep ' ocamlfind ocamldep -modules' parser/parser.mly > parser/parser.mly.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Flags.cmo src/Flags.ml
menhir --infer --explain --ocamlc ' ocamlfind ocamlc -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I parser -I src -I lib' --infer parser/parser.mly
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules parser/parser.mli > parser/parser.mli.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I parser -I src -I lib -o parser/parser.cmi parser/parser.mli
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Options.cmo src/Options.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/PrintAst.ml > src/PrintAst.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Location.ml > src/Location.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/PrintCommon.ml > src/PrintCommon.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules lib/Utils.ml > lib/Utils.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -syntax camlp4o -syntax pa_ulex -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I parser -I src -I lib -o parser/Lexer.cmo parser/Lexer.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Utils.cmo lib/Utils.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintCommon.cmo src/PrintCommon.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Location.cmo src/Location.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintAst.cmo src/PrintAst.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Warnings.cmo src/Warnings.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Helpers.ml > src/Helpers.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/DeBruijn.ml > src/DeBruijn.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/DeBruijn.cmo src/DeBruijn.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CFlatToWasm.cmo src/CFlatToWasm.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Helpers.cmo src/Helpers.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/AstToCStar.ml > src/AstToCStar.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/CStar.ml > src/CStar.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Checker.ml > src/Checker.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Drop.ml > src/Drop.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Drop.cmo src/Drop.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CStar.cmo src/CStar.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Checker.cmo src/Checker.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Builtin.ml > src/Builtin.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Bundles.ml > src/Bundles.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Inlining.ml > src/Inlining.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Simplify.ml > src/Simplify.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/GlobalNames.ml > src/GlobalNames.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/SimplifyC89.ml > src/SimplifyC89.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/GlobalNames.cmo src/GlobalNames.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/SimplifyC89.cmo src/SimplifyC89.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Simplify.cmo src/Simplify.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Inlining.cmo src/Inlining.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/CStarToC.ml > src/CStarToC.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/C.ml > src/C.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/C.cmo src/C.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/DataTypes.ml > src/DataTypes.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Driver.ml > src/Driver.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/GcTypes.ml > src/GcTypes.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/InputAst.ml > src/InputAst.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/InputAstToAst.ml > src/InputAstToAst.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/InputAst.cmo src/InputAst.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Output.ml > src/Output.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Driver.cmo src/Driver.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/PrintC.ml > src/PrintC.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintC.cmo src/PrintC.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/OutputJs.ml > src/OutputJs.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Print.ml > src/Print.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/SimplifyWasm.ml > src/SimplifyWasm.ml.depends
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Structs.ml > src/Structs.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/AstToCFlat.cmo src/AstToCFlat.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/AstToCStar.cmo src/AstToCStar.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Builtin.cmo src/Builtin.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Bundles.cmo src/Bundles.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CStarToC.cmo src/CStarToC.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/DataTypes.cmo src/DataTypes.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/GcTypes.cmo src/GcTypes.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/InputAstToAst.cmo src/InputAstToAst.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Output.cmo src/Output.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/OutputJs.cmo src/OutputJs.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Print.cmo src/Print.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/SimplifyWasm.cmo src/SimplifyWasm.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Structs.cmo src/Structs.ml
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Kremlin.cmo src/Kremlin.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules src/Atom.ml > src/Atom.ml.depends
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Atom.cmx src/Atom.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Common.cmx src/Common.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Constant.cmx src/Constant.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KList.cmx lib/KList.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Option.cmx lib/Option.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Ansi.cmx lib/Ansi.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Ast.cmx src/Ast.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CFlat.cmx src/CFlat.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Idents.cmx src/Idents.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KString.cmx lib/KString.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Bundle.cmx src/Bundle.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/KPrint.cmx lib/KPrint.ml
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules parser/parser.ml > parser/parser.ml.depends
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Flags.cmx src/Flags.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I parser -I src -I lib -o parser/parser.cmx parser/parser.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Options.cmx src/Options.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -syntax camlp4o -syntax pa_ulex -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I parser -I src -I lib -o parser/Lexer.cmx parser/Lexer.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser -o lib/Utils.cmx lib/Utils.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintCommon.cmx src/PrintCommon.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Location.cmx src/Location.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintAst.cmx src/PrintAst.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Warnings.cmx src/Warnings.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/DeBruijn.cmx src/DeBruijn.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CFlatToWasm.cmx src/CFlatToWasm.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Helpers.cmx src/Helpers.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Drop.cmx src/Drop.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CStar.cmx src/CStar.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Checker.cmx src/Checker.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/GlobalNames.cmx src/GlobalNames.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/SimplifyC89.cmx src/SimplifyC89.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Simplify.cmx src/Simplify.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Inlining.cmx src/Inlining.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/C.cmx src/C.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/InputAst.cmx src/InputAst.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Driver.cmx src/Driver.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/PrintC.cmx src/PrintC.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/AstToCFlat.cmx src/AstToCFlat.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/AstToCStar.cmx src/AstToCStar.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Builtin.cmx src/Builtin.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Bundles.cmx src/Bundles.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/CStarToC.cmx src/CStarToC.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/DataTypes.cmx src/DataTypes.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/GcTypes.cmx src/GcTypes.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/InputAstToAst.cmx src/InputAstToAst.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Output.cmx src/Output.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/OutputJs.cmx src/OutputJs.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Print.cmx src/Print.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/SimplifyWasm.cmx src/SimplifyWasm.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Structs.cmx src/Structs.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o src/Kremlin.cmx src/Kremlin.ml
ocamlfind ocamlopt -linkpkg -g -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser lib/Ansi.cmx lib/KList.cmx lib/KPrint.cmx lib/KString.cmx lib/Option.cmx src/Atom.cmx src/Common.cmx src/Constant.cmx src/Ast.cmx src/Idents.cmx src/Bundle.cmx src/Flags.cmx parser/parser.cmx parser/Lexer.cmx lib/Utils.cmx src/CFlat.cmx src/PrintCommon.cmx src/Location.cmx src/Options.cmx src/PrintAst.cmx src/Warnings.cmx src/CFlatToWasm.cmx src/DeBruijn.cmx src/Helpers.cmx src/AstToCFlat.cmx src/CStar.cmx src/Drop.cmx src/Checker.cmx src/AstToCStar.cmx src/Builtin.cmx src/GlobalNames.cmx src/SimplifyC89.cmx src/Simplify.cmx src/Inlining.cmx src/Bundles.cmx src/C.cmx src/CStarToC.cmx src/DataTypes.cmx src/Driver.cmx src/GcTypes.cmx src/InputAst.cmx src/InputAstToAst.cmx src/PrintC.cmx src/Output.cmx src/OutputJs.cmx src/Print.cmx src/SimplifyWasm.cmx src/Structs.cmx src/Kremlin.cmx -o src/Kremlin.native
ocamlfind ocamldep -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -modules Tests.ml > Tests.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o Tests.cmo Tests.ml
ocamlfind ocamlopt -c -g -annot -bin-annot -strict-sequence -w @1-2-3@8..12@14..21@23..29-30@31..38-39@40-41@43@57 -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I src -I parser -I lib -o Tests.cmx Tests.ml
ocamlfind ocamlopt -linkpkg -g -package ppx_deriving.std -package ppx_deriving_yojson -package zarith -package pprint -package unix -package menhirLib -package ulex -package process -package fix -package wasm -I lib -I src -I parser lib/KList.cmx lib/KPrint.cmx lib/KString.cmx lib/Option.cmx src/Atom.cmx src/Common.cmx src/Constant.cmx src/Ast.cmx src/Idents.cmx src/Bundle.cmx src/Flags.cmx parser/parser.cmx parser/Lexer.cmx lib/Utils.cmx src/C.cmx src/CStar.cmx src/PrintCommon.cmx src/Location.cmx src/Options.cmx src/PrintAst.cmx src/Warnings.cmx src/CStarToC.cmx src/Print.cmx src/PrintC.cmx Tests.cmx -o Tests.native
ln -sf Kremlin.native krml
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/kremlin'
================================================================================



================================================================================
Rebuilding FStar
Running: build_fstar
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
cp "../extraction/ml/FStar_Extraction_ML_PrintML_4.05.X.ml" ../extraction/ml/FStar_Extraction_ML_PrintML.ml
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
# TODO : call menhir directly when positions are fixed instead of
Warning: you are using the standard library and/or the %inline keyword. We
# letting OCamlbuild go through ocamlyacc
menhir  --only-preprocess-for-ocamlyacc ../parser/parse.mly > parse.mly
recommend switching on --infer in order to avoid obscure type error messages.
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
echo 'open FStar_Util' > FStar_Version.ml
echo 'let dummy () = ();;' >> FStar_Version.ml
echo 'FStar_Options._version := "0.9.5.0";;' >> FStar_Version.ml
echo 'FStar_Options._platform := "Windows_x64";;' >> FStar_Version.ml
echo 'FStar_Options._compiler := "OCaml 4.05.0";;' >> FStar_Version.ml
echo 'FStar_Options._date := "2018-08-06T17:30:11-07:00";;' >> FStar_Version.ml
echo 'FStar_Options._commit:= "d997d4461";;' >> FStar_Version.ml
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
echo "%{" > ../parser/boot/parse.fsy
echo "#light \"off\"" >> ../parser/boot/parse.fsy
echo "// (c) Microsoft Corporation. All rights reserved" >> ../parser/boot/parse.fsy
echo "open Prims" >> ../parser/boot/parse.fsy
echo "open FStar" >> ../parser/boot/parse.fsy
echo "open FStar.Errors" >> ../parser/boot/parse.fsy
echo "open FStar.List" >> ../parser/boot/parse.fsy
echo "open FStar.Util" >> ../parser/boot/parse.fsy
echo "open FStar.Range" >> ../parser/boot/parse.fsy
echo "open FStar.Options" >> ../parser/boot/parse.fsy
echo "open FStar.Parser.Const" >> ../parser/boot/parse.fsy
echo "open FStar.Parser.AST" >> ../parser/boot/parse.fsy
echo "open FStar.Parser.Util" >> ../parser/boot/parse.fsy
echo "open FStar.Const" >> ../parser/boot/parse.fsy
echo "open FStar.Ident" >> ../parser/boot/parse.fsy
echo "open FStar.String" >> ../parser/boot/parse.fsy
# TODO : fsyacc seems to complain as soon as there is an arrow -> in a %type declaration...
cat parse.mly | sed -e '/%{/d' \
-e '/^open /d' \
-e '/%token/s/[a-zA-Z0-9_]*\.//g' \
-e '/%type/s/[a-zA-Z0-9_]*\.//g' \
-e '/%token.*->.*/d' \
-e '/%type.*->.*/d' \
>> ../parser/boot/parse.fsy
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
# We are opening the same module twice but we need these modules
# open for the definition of tokens
echo "open Prims" > FStar_Parser_Parse.ml
echo "open FStar_Errors" >> FStar_Parser_Parse.ml
echo "open FStar_List" >> FStar_Parser_Parse.ml
echo "open FStar_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Range" >> FStar_Parser_Parse.ml
echo "open FStar_Options" >> FStar_Parser_Parse.ml
echo "open FStar_Syntax_Syntax" >> FStar_Parser_Parse.ml
echo "open FStar_Parser_Const" >> FStar_Parser_Parse.ml
echo "open FStar_Syntax_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Parser_AST" >> FStar_Parser_Parse.ml
echo "open FStar_Parser_Util" >> FStar_Parser_Parse.ml
echo "open FStar_Const" >> FStar_Parser_Parse.ml
echo "open FStar_Ident" >> FStar_Parser_Parse.ml
echo "open FStar_String" >> FStar_Parser_Parse.ml
# TODO: create a proper OCamlbuild rule for this production so that
# OCamlbuild knows how to generate parse.mly first (possibly using
# menhir) and removes the production as needed.
ocamlyacc parse.mly 2> yac-log
cat yac-log
7 shift/reduce conflicts.
cat parse.ml >> FStar_Parser_Parse.ml
rm parse.ml parse.mli
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
cd ../../ && ocamlbuild -cflag -g -I src/ocaml-output -I src/basic/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/prettyprint/ml -I src/tactics/ml -I ulib/ml -j 24 -build-dir src/ocaml-output/_build -use-ocamlfind main.native
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/fstar/ml/main.ml > src/fstar/ml/main.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Main.ml > src/ocaml-output/FStar_Main.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_All.ml > ulib/ml/FStar_All.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Dependencies.ml > src/ocaml-output/FStar_Dependencies.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_All.cmo ulib/ml/FStar_All.ml
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_List.ml > ulib/ml/FStar_List.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_List_Tot_Base.ml > ulib/ml/FStar_List_Tot_Base.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_List_Tot_Base.cmo ulib/ml/FStar_List_Tot_Base.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Options.ml > src/ocaml-output/FStar_Options.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_BaseTypes.ml > ulib/ml/FStar_BaseTypes.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Char.ml > ulib/ml/FStar_Char.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Float.ml > ulib/ml/FStar_Float.ml.depends
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_Int16.ml > ulib/ml/FStar_Int16.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/prims.ml > ulib/ml/prims.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/prims.cmo ulib/ml/prims.ml
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_Int32.ml > ulib/ml/FStar_Int32.ml.depends
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_Int64.ml > ulib/ml/FStar_Int64.ml.depends
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_Int8.ml > ulib/ml/FStar_Int8.ml.depends
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_UInt16.ml > ulib/ml/FStar_UInt16.ml.depends
ocamlfind ocamldep -package stdint -package batteries -package zarith -modules ulib/ml/FStar_UInt8.ml > ulib/ml/FStar_UInt8.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Char.cmo ulib/ml/FStar_Char.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Float.cmo ulib/ml/FStar_Float.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Int16.cmo ulib/ml/FStar_Int16.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Int32.cmo ulib/ml/FStar_Int32.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Int64.cmo ulib/ml/FStar_Int64.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Int8.cmo ulib/ml/FStar_Int8.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_UInt16.cmo ulib/ml/FStar_UInt16.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_UInt8.cmo ulib/ml/FStar_UInt8.ml
+  ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Char.cmo ulib/ml/FStar_Char.ml
File "ulib/ml/FStar_Char.ml", line 7, characters 17-31:
Warning 3: deprecated: Char.lowercase
Use Char.lowercase_ascii instead.
File "ulib/ml/FStar_Char.ml", line 10, characters 17-31:
Warning 3: deprecated: Char.lowercase
Use Char.lowercase_ascii instead.
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Common.ml > src/ocaml-output/FStar_Common.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Pervasives_Native.ml > ulib/ml/FStar_Pervasives_Native.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Util.ml > src/basic/ml/FStar_Util.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_List.cmo ulib/ml/FStar_List.ml
make: *** [Makefile:104: fstar.exe] Error 10
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Monotonic_Heap.ml > ulib/ml/FStar_Monotonic_Heap.ml.depends
make: Target 'all' not remade because of errors.
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_ST.ml > ulib/ml/FStar_ST.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_CommonST.ml > ulib/ml/FStar_CommonST.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Monotonic_Heap.cmo ulib/ml/FStar_Monotonic_Heap.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_CommonST.cmo ulib/ml/FStar_CommonST.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_ST.cmo ulib/ml/FStar_ST.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Pervasives_Native.cmo ulib/ml/FStar_Pervasives_Native.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Util.cmo src/basic/ml/FStar_Util.ml
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Exn.ml > ulib/ml/FStar_Exn.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Getopt.ml > src/basic/ml/FStar_Getopt.ml.depends
+ run_nuget
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Platform.ml > src/basic/ml/FStar_Platform.ml.depends
+ nuget restore vale/tools/Vale/src/packages.config -PackagesDirectory vale/tools/FsLexYacc
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_String.ml > ulib/ml/FStar_String.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_BaseTypes.cmo ulib/ml/FStar_BaseTypes.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Common.cmo src/ocaml-output/FStar_Common.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Exn.cmo ulib/ml/FStar_Exn.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Getopt.cmo src/basic/ml/FStar_Getopt.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Platform.cmo src/basic/ml/FStar_Platform.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_String.cmo ulib/ml/FStar_String.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_Dep.ml > src/ocaml-output/FStar_Parser_Dep.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Const.ml > src/ocaml-output/FStar_Const.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Ident.ml > src/ocaml-output/FStar_Ident.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Range.ml > src/basic/ml/FStar_Range.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Range.cmo src/basic/ml/FStar_Range.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Ident.cmo src/ocaml-output/FStar_Ident.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Errors.ml > src/ocaml-output/FStar_Errors.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Options.cmo src/ocaml-output/FStar_Options.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_AST.ml > src/ocaml-output/FStar_Parser_AST.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Const.cmo src/ocaml-output/FStar_Const.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Errors.cmo src/ocaml-output/FStar_Errors.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_Const.ml > src/ocaml-output/FStar_Parser_Const.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Const.cmo src/ocaml-output/FStar_Parser_Const.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_Driver.ml > src/ocaml-output/FStar_Parser_Driver.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_AST.cmo src/ocaml-output/FStar_Parser_AST.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/parser/ml/FStar_Parser_ParseIt.ml > src/parser/ml/FStar_Parser_ParseIt.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -syntax camlp4o -package batteries -package zarith -modules src/parser/ml/FStar_Parser_LexFStar.ml > src/parser/ml/FStar_Parser_LexFStar.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_Parse.ml > src/ocaml-output/FStar_Parser_Parse.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/parser/ml/FStar_Parser_Util.ml > src/parser/ml/FStar_Parser_Util.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Syntax.ml > src/ocaml-output/FStar_Syntax_Syntax.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Dyn.ml > src/basic/ml/FStar_Dyn.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Unionfind.ml > src/basic/ml/FStar_Unionfind.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Dyn.cmo src/basic/ml/FStar_Dyn.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Unionfind.cmo src/basic/ml/FStar_Unionfind.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Util.ml > src/ocaml-output/FStar_Syntax_Util.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Free.ml > src/ocaml-output/FStar_Syntax_Free.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Subst.ml > src/ocaml-output/FStar_Syntax_Subst.ml.depends
ocamlfind ocamldep -package batteries -package zarith -modules ulib/ml/FStar_Option.ml > ulib/ml/FStar_Option.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Syntax.cmo src/ocaml-output/FStar_Syntax_Syntax.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Unionfind.ml > src/ocaml-output/FStar_Syntax_Unionfind.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package batteries -package zarith -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o ulib/ml/FStar_Option.cmo ulib/ml/FStar_Option.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Unionfind.cmo src/ocaml-output/FStar_Syntax_Unionfind.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Subst.cmo src/ocaml-output/FStar_Syntax_Subst.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_InstFV.ml > src/ocaml-output/FStar_Syntax_InstFV.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Free.cmo src/ocaml-output/FStar_Syntax_Free.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_InstFV.cmo src/ocaml-output/FStar_Syntax_InstFV.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/parser/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_Util.cmo src/parser/ml/FStar_Parser_Util.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Util.cmo src/ocaml-output/FStar_Syntax_Util.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/parser/ml/FStar_Ulexing.ml > src/parser/ml/FStar_Ulexing.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Parse.cmo src/ocaml-output/FStar_Parser_Parse.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/parser/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/parser/ml/FStar_Ulexing.cmo src/parser/ml/FStar_Ulexing.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -syntax camlp4o -package batteries -package zarith -I src/parser/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_LexFStar.cmo src/parser/ml/FStar_Parser_LexFStar.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/parser/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/parser/ml/FStar_Parser_ParseIt.cmo src/parser/ml/FStar_Parser_ParseIt.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Driver.cmo src/ocaml-output/FStar_Parser_Driver.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_Dep.cmo src/ocaml-output/FStar_Parser_Dep.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_Kremlin.ml > src/ocaml-output/FStar_Extraction_Kremlin.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_Code.ml > src/ocaml-output/FStar_Extraction_ML_Code.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/basic/ml/FStar_Bytes.ml > src/basic/ml/FStar_Bytes.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_Syntax.ml > src/ocaml-output/FStar_Extraction_ML_Syntax.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_Util.ml > src/ocaml-output/FStar_Extraction_ML_Util.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Syntax.cmo src/ocaml-output/FStar_Extraction_ML_Syntax.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_UEnv.ml > src/ocaml-output/FStar_Extraction_ML_UEnv.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Print.ml > src/ocaml-output/FStar_Syntax_Print.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Parser_ToDocument.ml > src/ocaml-output/FStar_Parser_ToDocument.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/prettyprint/ml/FStar_Pprint.ml > src/prettyprint/ml/FStar_Pprint.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/prettyprint/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/prettyprint/ml/FStar_Pprint.cmo src/prettyprint/ml/FStar_Pprint.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Resugar.ml > src/ocaml-output/FStar_Syntax_Resugar.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Parser_ToDocument.cmo src/ocaml-output/FStar_Parser_ToDocument.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Resugar.cmo src/ocaml-output/FStar_Syntax_Resugar.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Env.ml > src/ocaml-output/FStar_TypeChecker_Env.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Print.cmo src/ocaml-output/FStar_Syntax_Print.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Common.ml > src/ocaml-output/FStar_TypeChecker_Common.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Common.cmo src/ocaml-output/FStar_TypeChecker_Common.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Env.cmo src/ocaml-output/FStar_TypeChecker_Env.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Reflection_Data.ml > src/ocaml-output/FStar_Reflection_Data.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_UEnv.cmo src/ocaml-output/FStar_Extraction_ML_UEnv.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Reflection_Data.cmo src/ocaml-output/FStar_Reflection_Data.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Format.ml > src/ocaml-output/FStar_Format.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/basic/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -o src/basic/ml/FStar_Bytes.cmo src/basic/ml/FStar_Bytes.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Util.cmo src/ocaml-output/FStar_Extraction_ML_Util.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Format.cmo src/ocaml-output/FStar_Format.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Code.cmo src/ocaml-output/FStar_Extraction_ML_Code.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_Modul.ml > src/ocaml-output/FStar_Extraction_ML_Modul.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Extraction_ML_Term.ml > src/ocaml-output/FStar_Extraction_ML_Term.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Normalize.ml > src/ocaml-output/FStar_TypeChecker_Normalize.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_Embeddings.ml > src/ocaml-output/FStar_Syntax_Embeddings.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_Embeddings.cmo src/ocaml-output/FStar_Syntax_Embeddings.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_TcTerm.ml > src/ocaml-output/FStar_TypeChecker_TcTerm.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Pervasives.ml > src/ocaml-output/FStar_Pervasives.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Err.ml > src/ocaml-output/FStar_TypeChecker_Err.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Normalize.cmo src/ocaml-output/FStar_TypeChecker_Normalize.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Rel.ml > src/ocaml-output/FStar_TypeChecker_Rel.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Pervasives.cmo src/ocaml-output/FStar_Pervasives.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Err.cmo src/ocaml-output/FStar_TypeChecker_Err.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Util.ml > src/ocaml-output/FStar_TypeChecker_Util.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Rel.cmo src/ocaml-output/FStar_TypeChecker_Rel.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Util.cmo src/ocaml-output/FStar_TypeChecker_Util.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcTerm.cmo src/ocaml-output/FStar_TypeChecker_TcTerm.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Term.cmo src/ocaml-output/FStar_Extraction_ML_Term.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/extraction/ml/FStar_Extraction_ML_PrintML.ml > src/extraction/ml/FStar_Extraction_ML_PrintML.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Fsdoc_Generator.ml > src/ocaml-output/FStar_Fsdoc_Generator.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Indent.ml > src/ocaml-output/FStar_Indent.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Interactive.ml > src/ocaml-output/FStar_Interactive.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Dependencies.cmo src/ocaml-output/FStar_Dependencies.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_Solver.ml > src/ocaml-output/FStar_SMTEncoding_Solver.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_Encode.ml > src/ocaml-output/FStar_SMTEncoding_Encode.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml > src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_Term.ml > src/ocaml-output/FStar_SMTEncoding_Term.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_Util.ml > src/ocaml-output/FStar_SMTEncoding_Util.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Term.cmo src/ocaml-output/FStar_SMTEncoding_Term.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_SMTEncoding_Z3.ml > src/ocaml-output/FStar_SMTEncoding_Z3.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Util.cmo src/ocaml-output/FStar_SMTEncoding_Util.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Z3.cmo src/ocaml-output/FStar_SMTEncoding_Z3.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_ErrorReporting.cmo src/ocaml-output/FStar_SMTEncoding_ErrorReporting.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Encode.cmo src/ocaml-output/FStar_SMTEncoding_Encode.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_ToSyntax_Env.ml > src/ocaml-output/FStar_ToSyntax_Env.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_ToSyntax_ToSyntax.ml > src/ocaml-output/FStar_ToSyntax_ToSyntax.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Syntax_MutRecTy.ml > src/ocaml-output/FStar_Syntax_MutRecTy.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_Env.cmo src/ocaml-output/FStar_ToSyntax_Env.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Syntax_MutRecTy.cmo src/ocaml-output/FStar_Syntax_MutRecTy.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_Tc.ml > src/ocaml-output/FStar_TypeChecker_Tc.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_DMFF.ml > src/ocaml-output/FStar_TypeChecker_DMFF.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_TypeChecker_TcInductive.ml > src/ocaml-output/FStar_TypeChecker_TcInductive.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_DMFF.cmo src/ocaml-output/FStar_TypeChecker_DMFF.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_TcInductive.cmo src/ocaml-output/FStar_TypeChecker_TcInductive.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Universal.ml > src/ocaml-output/FStar_Universal.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_SMTEncoding_Solver.cmo src/ocaml-output/FStar_SMTEncoding_Solver.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Tactics_Interpreter.ml > src/ocaml-output/FStar_Tactics_Interpreter.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Reflection_Basic.ml > src/ocaml-output/FStar_Reflection_Basic.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Order.ml > src/ocaml-output/FStar_Order.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Order.cmo src/ocaml-output/FStar_Order.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Reflection_Interpreter.ml > src/ocaml-output/FStar_Reflection_Interpreter.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Reflection_Basic.cmo src/ocaml-output/FStar_Reflection_Basic.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Tactics_Basic.ml > src/ocaml-output/FStar_Tactics_Basic.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Reflection_Interpreter.cmo src/ocaml-output/FStar_Reflection_Interpreter.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Tactics_Result.ml > src/ocaml-output/FStar_Tactics_Result.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Tactics_Types.ml > src/ocaml-output/FStar_Tactics_Types.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Tactics_Types.cmo src/ocaml-output/FStar_Tactics_Types.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Tactics_Result.cmo src/ocaml-output/FStar_Tactics_Result.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Tactics_Embedding.ml > src/ocaml-output/FStar_Tactics_Embedding.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/tactics/ml/FStar_Tactics_Native.ml > src/tactics/ml/FStar_Tactics_Native.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Tactics_Basic.cmo src/ocaml-output/FStar_Tactics_Basic.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Tactics_Embedding.cmo src/ocaml-output/FStar_Tactics_Embedding.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/tactics/ml -I ulib/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/tactics/ml/FStar_Tactics_Native.cmo src/tactics/ml/FStar_Tactics_Native.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_ToSyntax_Interleave.ml > src/ocaml-output/FStar_ToSyntax_Interleave.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_ToSyntax.cmo src/ocaml-output/FStar_ToSyntax_ToSyntax.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_TypeChecker_Tc.cmo src/ocaml-output/FStar_TypeChecker_Tc.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Tactics_Interpreter.cmo src/ocaml-output/FStar_Tactics_Interpreter.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_ToSyntax_Interleave.cmo src/ocaml-output/FStar_ToSyntax_Interleave.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Universal.cmo src/ocaml-output/FStar_Universal.ml
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Legacy_Interactive.ml > src/ocaml-output/FStar_Legacy_Interactive.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/tactics/ml/FStar_Tactics_Load.ml > src/tactics/ml/FStar_Tactics_Load.ml.depends
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Version.ml > src/ocaml-output/FStar_Version.ml.depends
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_Kremlin.cmo src/ocaml-output/FStar_Extraction_Kremlin.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Modul.cmo src/ocaml-output/FStar_Extraction_ML_Modul.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/extraction/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/extraction/ml/FStar_Extraction_ML_PrintML.cmo src/extraction/ml/FStar_Extraction_ML_PrintML.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Fsdoc_Generator.cmo src/ocaml-output/FStar_Fsdoc_Generator.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Indent.cmo src/ocaml-output/FStar_Indent.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Interactive.cmo src/ocaml-output/FStar_Interactive.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Legacy_Interactive.cmo src/ocaml-output/FStar_Legacy_Interactive.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/tactics/ml -I ulib/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/tactics/ml/FStar_Tactics_Load.cmo src/tactics/ml/FStar_Tactics_Load.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Version.cmo src/ocaml-output/FStar_Version.ml
+  ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/extraction/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/extraction/ml/FStar_Extraction_ML_PrintML.cmo src/extraction/ml/FStar_Extraction_ML_PrintML.ml
File "src/extraction/ml/FStar_Extraction_ML_PrintML.ml", line 217, characters 2-1681:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
MLE_TApp _
File "src/extraction/ml/FStar_Extraction_ML_PrintML.ml", line 362, characters 23-30:
Error: Unbound type constructor tyattrs
Hint: Did you mean attrs?
Command exited with code 2.
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
================================================================================



================================================================================
Rebuilding vale
Running: build_vale
Restoring NuGet package FsLexYacc.Runtime.6.1.0.
Restoring NuGet package FsLexYacc.6.1.0.
Adding package 'FsLexYacc.Runtime.6.1.0' to folder 'C:\build\agent1\_work\6\s\vale\tools\FsLexYacc'
Adding package 'FsLexYacc.6.1.0' to folder 'C:\build\agent1\_work\6\s\vale\tools\FsLexYacc'
Added package 'FsLexYacc.Runtime.6.1.0' to folder 'C:\build\agent1\_work\6\s\vale\tools\FsLexYacc'
Added package 'FsLexYacc.6.1.0' to folder 'C:\build\agent1\_work\6\s\vale\tools\FsLexYacc'

NuGet Config files used:
C:\Users\everbld\AppData\Roaming\NuGet\NuGet.Config
C:\Program Files (x86)\NuGet\Config\Microsoft.VisualStudio.Offline.config

Feeds used:
C:\Users\everbld\.nuget\packages\
https://api.nuget.org/v3/index.json
C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\

Installed:
2 package(s) to packages.config projects
+ run_scons --NOVERIFY
+ cmd=--NOVERIFY
+ is_windows
+ [[ Windows_NT == \W\i\n\d\o\w\s\_\N\T ]]
+++ pwd
++ cygpath -w /cygdrive/c/build/agent1/_work/6/s/vale
+ DIR='C:\build\agent1\_work\6\s\vale'
+ THIS_PID=3212
+ SCONS_EXECS=0
+ SCONS_INVOKE_FILE=everest3212scons0.bat
+ [[ -e everest3212scons0.bat ]]
+ cat
+ chmod +x everest3212scons0.bat
+ ./everest3212scons0.bat

C:\build\agent1\_work\6\s>call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64 -host_arch=amd64 
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.5.5
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************
scons: Reading SConscript files ...
***
*** WARNING:  NOT VERIFYING ANY CODE
***
Not building Poly1305 for this target architecture
scons: done reading SConscript files.
scons: Building targets ...
Copy file(s): "tools\Dafny\z3.exe" to "bin\z3.exe"
"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\bin\Roslyn\csc.exe" -t:library -out:bin\DafnyInterface.dll tools\Vale\DafnyInterface\Source\DafnyInterface\DafnyDriver.cs tools\Vale\DafnyInterface\Source\DafnyInterface\Properties\AssemblyInfo.cs -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieAbsInt.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieConcurrency.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieCore.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieExecutionEngine.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieParserHelper.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\BoogieVCGeneration.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\Dafny.exe -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\DafnyPipeline.dll -r:C:\build\agent1\_work\6\s\vale\tools\Dafny\Provers.SMTLib.dll
tools\FsLexYacc\FsLexYacc.6.1.0\build\fsyacc.exe --module "Parse" tools\Vale\src\parse.fsy -o obj\Vale\parse.fs
tools\FsLexYacc\FsLexYacc.6.1.0\build\fslex.exe tools\Vale\src\lex.fsl -o obj\Vale\lex.fs
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\types.s.dfy /noVerify > obj\lib\util\types.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\collections\Seqs.s.dfy /noVerify > obj\lib\collections\Seqs.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\power2.s.dfy /noVerify > obj\lib\math\power2.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\power.s.dfy /noVerify > obj\lib\math\power.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace src\lib\math\mul_nonlinear.i.dfy /noVerify > obj\lib\math\mul_nonlinear.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\div_def.i.dfy /noVerify > obj\lib\math\div_def.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace src\lib\math\div_nonlinear.i.dfy /noVerify > obj\lib\math\div_nonlinear.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\Io.s.dfy /noVerify > obj\lib\util\Io.s.tmp
Copy file(s): "src\crypto\aes\testaes.c" to "obj\crypto\aes\testaes.c"
Copy file(s): "src\crypto\aes\testcbc.c" to "obj\crypto\aes\testcbc.c"
Copy file(s): "src\crypto\hashing\FStar.h" to "obj\crypto\hashing\FStar.h"
compiling to dfas (can take a while...)
building tables
Copy file(s): "src\crypto\hashing\testsha256.c" to "obj\crypto\hashing\testsha256.c"
cl /Foobj\crypto\aes\testcbc.obj /c obj\crypto\aes\testcbc.c /nologo /Ox /Gz /DKRML_NOUINT128 /IC:\build\agent1\_work\6\s\kremlin\kremlib /Isrc\lib\util /Zi /Fdobj\crypto\aes\testcbc.pdb
cl /Foobj\crypto\aes\testaes.obj /c obj\crypto\aes\testaes.c /nologo /Ox /Gz /DKRML_NOUINT128 /IC:\build\agent1\_work\6\s\kremlin\kremlib /Isrc\lib\util /Isrc\crypto\aes /Zi /Fdobj\crypto\aes\testaes.pdb
Copy file(s): "tools\Dafny\Provers.SMTLib.dll" to "bin\Provers.SMTLib.dll"
testcbc.c
testaes.c
Copy file(s): "tools\Dafny\DafnyRuntime.cs" to "bin\DafnyRuntime.cs"
Copy file(s): "tools\Dafny\DafnyPrelude.bpl" to "bin\DafnyPrelude.bpl"
computing first function...Copy file(s): "tools\Dafny\Dafny.exe" to "bin\Dafny.exe"
Copy file(s): "tools\Dafny\DafnyPipeline.dll" to "bin\DafnyPipeline.dll"
Copy file(s): "tools\Dafny\BoogieVCGeneration.dll" to "bin\BoogieVCGeneration.dll"
Copy file(s): "tools\Dafny\BoogieVCExpr.dll" to "bin\BoogieVCExpr.dll"
Copy file(s): "tools\Dafny\BoogieParserHelper.dll" to "bin\BoogieParserHelper.dll"
Copy file(s): "tools\Dafny\BoogieModel.dll" to "bin\BoogieModel.dll"
Copy file(s): "tools\Dafny\BoogieHoudini.dll" to "bin\BoogieHoudini.dll"
Copy file(s): "tools\Dafny\BoogieGraph.dll" to "bin\BoogieGraph.dll"
Copy file(s): "tools\Dafny\BoogieExecutionEngine.dll" to "bin\BoogieExecutionEngine.dll"
Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)
Copyright (C) Microsoft Corporation. All rights reserved.

Copy file(s): "tools\Dafny\BoogieDoomed.dll" to "bin\BoogieDoomed.dll"
Copy file(s): "tools\Dafny\BoogieCore.dll" to "bin\BoogieCore.dll"
Copy file(s): "tools\Dafny\BoogieConcurrency.dll" to "bin\BoogieConcurrency.dll"
Copy file(s): "tools\Dafny\BoogieCodeContractsExtender.dll" to "bin\BoogieCodeContractsExtender.dll"
Copy file(s): "tools\Dafny\BoogieBasetypes.dll" to "bin\BoogieBasetypes.dll"
Copy file(s): "tools\Dafny\BoogieAbsInt.dll" to "bin\BoogieAbsInt.dll"
time: 00:00:00.0805091
building kernels...time: 00:00:00.0642005
building kernel table...time: 00:00:00.0140711
computing lookahead relations.............................................................................................................................................................................................................................................................................................................................................................................................................................................................time: 00:00:00.2533654
building lookahead table...time: 00:00:00.0337301
building action table...time: 00:00:00.2709432
building goto table...time: 00:00:00.0246173
returning tables.
442 states
58 nonterminals
96 terminals
209 productions
#rows in action table: 442
Copy file(s): "obj\lib\math\power.s.tmp" to "obj\lib\math\power.s.vdfy"
Copy file(s): "obj\lib\math\div_def.i.tmp" to "obj\lib\math\div_def.i.vdfy"
Copy file(s): "obj\lib\collections\Seqs.s.tmp" to "obj\lib\collections\Seqs.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\collections\Seqs.i.dfy /noVerify > obj\lib\collections\Seqs.i.tmp
Copy file(s): "obj\lib\math\mul_nonlinear.i.tmp" to "obj\lib\math\mul_nonlinear.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\mul_auto_proofs.i.dfy /noVerify > obj\lib\math\mul_auto_proofs.i.tmp
388 states
writing output
"C:\Program Files (x86)\Microsoft SDKs\F#\4.1\Framework\v4.0\fsc.exe" -g --platform:anycpu --standalone --mlcompatibility -O tools\Vale\src\ast.fs tools\Vale\src\ast_util.fs tools\Vale\src\parse_util.fs obj\Vale\parse.fs obj\Vale\lex.fs tools\Vale\src\transform.fs tools\Vale\src\emit_common.fs tools\Vale\src\emit_dafny_text.fs tools\Vale\src\emit_dafny_direct.fs tools\Vale\src\emit_fstar_text.fs tools\Vale\src\emit_vale_text.fs tools\Vale\src\main.fs -o bin\vale.exe -r tools\Dafny\BoogieAbsInt.dll -r tools\Dafny\BoogieBasetypes.dll -r tools\Dafny\BoogieCodeContractsExtender.dll -r tools\Dafny\BoogieConcurrency.dll -r tools\Dafny\BoogieCore.dll -r tools\Dafny\BoogieDoomed.dll -r tools\Dafny\BoogieExecutionEngine.dll -r tools\Dafny\BoogieGraph.dll -r tools\Dafny\BoogieHoudini.dll -r tools\Dafny\BoogieModel.dll -r tools\Dafny\BoogieParserHelper.dll -r tools\Dafny\BoogieVCExpr.dll -r tools\Dafny\BoogieVCGeneration.dll -r tools\Dafny\DafnyPipeline.dll -r tools\Dafny\Dafny.exe -r bin\DafnyInterface.dll -r tools\Dafny\Newtonsoft.Json.dll -r tools\FsLexYacc\FsLexYacc.Runtime.6.1.0\lib\net40\FsLexYacc.Runtime.dll
Copy file(s): "obj\lib\util\Io.s.tmp" to "obj\lib\util\Io.s.vdfy"
Copy file(s): "obj\lib\util\types.s.tmp" to "obj\lib\util\types.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\types.i.dfy /noVerify > obj\lib\util\types.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\operations.s.dfy /noVerify > obj\lib\util\operations.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\words_and_bytes.s.dfy /noVerify > obj\lib\util\words_and_bytes.s.tmp
Copy file(s): "obj\lib\math\div_nonlinear.i.tmp" to "obj\lib\math\div_nonlinear.i.vdfy"
Copy file(s): "obj\lib\math\power2.s.tmp" to "obj\lib\math\power2.s.vdfy"
Microsoft (R) F# Compiler version 4.1
Copyright (c) Microsoft Corporation. All Rights Reserved.

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "mscorlib.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "System.Data.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "System.Web.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "mscorlib.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "System.Data.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)

warning FS0082: There was a mismatch between the processor architecture of the project being built "MSIL" and the processor architecture of the reference "System.Web.dll", "x86". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project. (Code=MSB3270)
Copy file(s): "obj\lib\util\operations.s.tmp" to "obj\lib\util\operations.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /proverOpt:OPTIMIZE_FOR_BV=true src\lib\util\operations.i.dfy /noVerify > obj\lib\util\operations.i.tmp
Copy file(s): "obj\lib\math\mul_auto_proofs.i.tmp" to "obj\lib\math\mul_auto_proofs.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\mul_auto.i.dfy /noVerify > obj\lib\math\mul_auto.i.tmp
Copy file(s): "obj\lib\util\words_and_bytes.s.tmp" to "obj\lib\util\words_and_bytes.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha_common.s.dfy /noVerify > obj\crypto\hashing\sha_common.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\aes\aes.s.dfy /noVerify > obj\crypto\aes\aes.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\hmac_common.s.dfy /noVerify > obj\crypto\hashing\hmac_common.s.tmp
Copy file(s): "obj\lib\collections\Seqs.i.tmp" to "obj\lib\collections\Seqs.i.vdfy"
Copy file(s): "obj\lib\util\types.i.tmp" to "obj\lib\util\types.i.vdfy"
Copy file(s): "obj\lib\math\mul_auto.i.tmp" to "obj\lib\math\mul_auto.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\mul.i.dfy /noVerify > obj\lib\math\mul.i.tmp
Copy file(s): "obj\lib\util\operations.i.tmp" to "obj\lib\util\operations.i.vdfy"
Copy file(s): "obj\crypto\hashing\hmac_common.s.tmp" to "obj\crypto\hashing\hmac_common.s.vdfy"
Copy file(s): "obj\crypto\hashing\sha_common.s.tmp" to "obj\crypto\hashing\sha_common.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha256.s.dfy /noVerify > obj\crypto\hashing\sha256.s.tmp
Copy file(s): "obj\crypto\aes\aes.s.tmp" to "obj\crypto\aes\aes.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\def.s.dfy /noVerify > obj\arch\x86\def.s.tmp
Copy file(s): "obj\lib\math\mul.i.tmp" to "obj\lib\math\mul.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\div_boogie.i.dfy /noVerify > obj\lib\math\div_boogie.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\power.i.dfy /noVerify > obj\lib\math\power.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\mod_auto_proofs.i.dfy /noVerify > obj\lib\math\mod_auto_proofs.i.tmp
Copy file(s): "obj\crypto\hashing\sha256.s.tmp" to "obj\crypto\hashing\sha256.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha256.i.dfy /noVerify > obj\crypto\hashing\sha256.i.tmp
Copy file(s): "obj\arch\x86\def.s.tmp" to "obj\arch\x86\def.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\leakage.s.dfy /noVerify > obj\arch\x86\leakage.s.tmp
Copy file(s): "obj\lib\math\power.i.tmp" to "obj\lib\math\power.i.vdfy"

warning FS2009: Ignoring mixed managed/unmanaged assembly 'System.Data' during static linking
Copy file(s): "obj\lib\math\div_boogie.i.tmp" to "obj\lib\math\div_boogie.i.vdfy"
Copy file(s): "obj\lib\math\mod_auto_proofs.i.tmp" to "obj\lib\math\mod_auto_proofs.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\mod_auto.i.dfy /noVerify > obj\lib\math\mod_auto.i.tmp
Copy file(s): "obj\lib\math\mod_auto.i.tmp" to "obj\lib\math\mod_auto.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\div_auto_proofs.i.dfy /noVerify > obj\lib\math\div_auto_proofs.i.tmp
Copy file(s): "obj\crypto\hashing\sha256.i.tmp" to "obj\crypto\hashing\sha256.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha256_context.i.dfy /noVerify > obj\crypto\hashing\sha256_context.i.tmp
Copy file(s): "obj\arch\x86\leakage.s.tmp" to "obj\arch\x86\leakage.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\leakage-helpers.i.dfy /noVerify > obj\arch\x86\leakage-helpers.i.tmp
Copy file(s): "obj\lib\math\div_auto_proofs.i.tmp" to "obj\lib\math\div_auto_proofs.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\div_auto.i.dfy /noVerify > obj\lib\math\div_auto.i.tmp
Copy file(s): "obj\crypto\hashing\sha256_context.i.tmp" to "obj\crypto\hashing\sha256_context.i.vdfy"
Copy file(s): "obj\lib\math\div_auto.i.tmp" to "obj\lib\math\div_auto.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /timeLimit:60 src\lib\math\div.i.dfy /noVerify > obj\lib\math\div.i.tmp
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\thirdPartyPorts\OpenSSL\poly1305\x64\poly1305.vad -out obj\thirdPartyPorts\OpenSSL\poly1305\x64\poly1305.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\test\memcpy.vad -out obj\test\memcpy.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\arch\x64\decls.vad -out obj\arch\x64\decls.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\arch\arm\decls.vad -out obj\arch\arm\decls.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\test1.vad -out obj\Vale\test\test1.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\hashing\sha-x64\sha256.vad -out obj\crypto\hashing\sha-x64\sha256.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\inline-if.vad -out obj\Vale\test\inline-if.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\arch\x64\decls64.vad -out obj\arch\x64\decls64.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\aes\aes-x64\aes.vad -out obj\crypto\aes\aes-x64\aes.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\common.vad -out obj\Vale\test\common.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\refined3.vad -out obj\Vale\test\refined3.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\test\stack-test.vad -out obj\test\stack-test.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\aes\cbc.vad -out obj\crypto\aes\cbc.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\DottedNames.vad -out obj\Vale\test\DottedNames.gen.dfy
// parsing .\src\thirdPartyPorts\OpenSSL\poly1305\x64\poly1305.vad
// parsing .\src\test\memcpy.vad
// parsing .\src\arch\x64\decls.vad// parsing .\src\arch\arm\decls.vad

// parsing .\tools\Vale\test\test1.vad
// parsing .\src\crypto\hashing\sha-x64\sha256.vad
// parsing .\tools\Vale\test\inline-if.vad
// parsing .\src\arch\x64\decls64.vad
// parsing .\src\crypto\aes\aes-x64\aes.vad
// parsing .\tools\Vale\test\common.vad
// parsing .\src\test\stack-test.vad
// parsing .\tools\Vale\test\refined3.vad
// parsing .\src\crypto\aes\cbc.vad
// parsing .\tools\Vale\test\DottedNames.vad
// parsing .\src\test\../arch/x86/decls.vad
// parsing .\src\test\../arch/x86/decls.vad
// parsing .\tools\Vale\test\common.vad
// parsing .\tools\Vale\test\common.vad
// parsing .\src\thirdPartyPorts\OpenSSL\poly1305\x64\../../../../arch/x64/decls.vad
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\aes\aes-x64\cbc.vad -out obj\crypto\aes\aes-x64\cbc.gen.dfy
// parsing .\tools\Vale\test\common.vad
// parsing .\src\crypto\aes\../../arch/x86/decls.vad
// parsing .\src\arch\x64\decls.vad
// parsing .\src\thirdPartyPorts\OpenSSL\poly1305\x64\../../../../arch/x64/decls64.vad
// parsing .\src\crypto\hashing\sha-x64\../../../arch/x64/decls.vad
// parsing .\src\crypto\aes\aes-x64\../../../arch/x64/decls.vad
// parsing .\src\crypto\aes\aes.vad
// parsing .\src\crypto\aes\aes-x64\cbc.vad
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\calc.vad -out obj\Vale\test\calc.gen.dfy
// parsing .\src\crypto\aes\aes-x64\../../../arch/x64/decls.vad
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\refined2.vad -out obj\Vale\test\refined2.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\hashing\sha256.vad -out obj\crypto\hashing\sha256.gen.dfy
// parsing .\src\crypto\aes\aes-x64\aes.vad
bin\vale.exe -includeSuffix .vad .gen.dfy -in tools\Vale\test\assert-by.vad -out obj\Vale\test\assert-by.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\arch\x86\decls.vad -out obj\arch\x86\decls.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\thirdPartyPorts\OpenSSL\sha\arm\sha256.vad -out obj\thirdPartyPorts\OpenSSL\sha\arm\sha256.gen.dfy
bin\vale.exe -includeSuffix .vad .gen.dfy -in src\crypto\aes\aes.vad -out obj\crypto\aes\aes.gen.dfy
// parsing .\tools\Vale\test\calc.vad
// parsing .\tools\Vale\test\refined2.vad
// parsing .\src\crypto\hashing\sha256.vad
// parsing .\tools\Vale\test\assert-by.vad
// parsing .\src\arch\x86\decls.vad
// parsing .\tools\Vale\test\common.vad
// parsing .\src\thirdPartyPorts\OpenSSL\sha\arm\sha256.vad
// parsing .\src\crypto\aes\aes.vad
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\dafny_wrappers.i.dfy /noVerify > obj\lib\util\dafny_wrappers.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\aes\cbc.s.dfy /noVerify > obj\crypto\aes\cbc.s.tmp
// parsing .\tools\Vale\test\common.vad
// parsing .\src\crypto\hashing\../../arch/x86/decls.vad
// parsing .\src\crypto\aes\../../arch/x86/decls.vad
// parsing .\src\thirdPartyPorts\OpenSSL\sha\arm\../../../../arch/arm/decls.vad
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\collections\Sets.i.dfy /noVerify > obj\lib\collections\Sets.i.tmp
Copy file(s): "obj\lib\util\dafny_wrappers.i.tmp" to "obj\lib\util\dafny_wrappers.i.vdfy"
Copy file(s): "obj\lib\math\div.i.tmp" to "obj\lib\math\div.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\math\power2.i.dfy /noVerify > obj\lib\math\power2.i.tmp
Copy file(s): "obj\lib\collections\Sets.i.tmp" to "obj\lib\collections\Sets.i.vdfy"
Copy file(s): "obj\crypto\aes\cbc.s.tmp" to "obj\crypto\aes\cbc.s.vdfy"
Copy file(s): "obj\arch\x86\leakage-helpers.i.tmp" to "obj\arch\x86\leakage-helpers.i.vdfy"
Copy file(s): "obj\lib\math\power2.i.tmp" to "obj\lib\math\power2.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\words_and_bytes.i.dfy /noVerify > obj\lib\util\words_and_bytes.i.tmp
Copy file(s): "obj\lib\util\words_and_bytes.i.tmp" to "obj\lib\util\words_and_bytes.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\vale.i.dfy /noVerify > obj\arch\x86\vale.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha256_helpers.i.dfy /noVerify > obj\crypto\hashing\sha256_helpers.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\aes\aes_helpers.i.dfy /noVerify > obj\crypto\aes\aes_helpers.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\hashing\sha256_unique.i.dfy /noVerify > obj\crypto\hashing\sha256_unique.i.tmp
Copy file(s): "obj\crypto\hashing\sha256_unique.i.tmp" to "obj\crypto\hashing\sha256_unique.i.vdfy"
Copy file(s): "obj\crypto\hashing\sha256_helpers.i.tmp" to "obj\crypto\hashing\sha256_helpers.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /nologo /kremlin /noVerify /compile:2 /spillTargetCode:1 src\crypto\hashing\sha256_main.i.dfy /out:obj\crypto\hashing\sha256_main.i.json
[TRACE] Using prover: C:\build\agent1\_work\6\s\vale\tools\Dafny\z3.exe
Parsing src\crypto\hashing\sha256_main.i.dfy
Copy file(s): "obj\crypto\aes\aes_helpers.i.tmp" to "obj\crypto\aes\aes_helpers.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\aes\aes_lemmas.i.dfy /noVerify > obj\crypto\aes\aes_lemmas.i.tmp
Copy file(s): "obj\arch\x86\vale.i.tmp" to "obj\arch\x86\vale.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\lib\util\heaplets.i.dfy /noVerify > obj\lib\util\heaplets.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\crypto\aes\cbc_helpers.i.dfy /noVerify > obj\crypto\aes\cbc_helpers.i.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith obj\arch\x86\decls.gen.dfy /noVerify > obj\arch\x86\decls.gen.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\leakage.i.dfy /noVerify > obj\arch\x86\leakage.i.tmp
Coalescing blocks...
Inlining...

Running abstract interpretation...
[0.1249962 s]

Dafny program verifier finished with 0 verified, 0 errors
Copy file(s): "obj\crypto\aes\aes_lemmas.i.tmp" to "obj\crypto\aes\aes_lemmas.i.vdfy"
Compiled program written to sha256_main.i.json
cd obj\crypto\hashing && C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native -fnouint128 -warn-error +1..4 -warn-error @4 -skip-compilation -add-include \"DafnyLib.h\" -cc msvc -drop FStar sha256_main.i.json
[38;5;119m✔[0m [Checking input file] ⏱️ 16ms
[38;5;119m✔[0m [Bundle + inline types] ⏱️ <1ms
[38;5;119m✔[0m [Pattern matches compilation] ⏱️ <1ms
[38;5;119m✔[0m [Simplify 2] ⏱️ <1ms
[38;5;119m✔[0m [Inline + Simplify 2] ⏱️ <1ms
[38;5;119m✔[0m [Drop] ⏱️ <1ms
[38;5;119m✔[0m [AstToCStar] ⏱️ <1ms
[38;5;119m✔[0m [CStarToC] ⏱️ <1ms
[38;5;119m✔[0m [PrettyPrinting] ⏱️ <1ms
KreMLin: wrote out .c and .h files for Prims, sha256_main_i, sha256_unique, sha256_helpers_i, sha256_s, sha256_i, hmac_common_s, sha_common_s, operations_s, words_and_bytes_i, Collections__Seqs_i, Collections__Seqs_s, words_and_bytes_s, types_i, Math__power2_i, Math__div_i, Math__div_auto_i, Math__div_auto_proofs_i, Math__mod_auto_i, Math__mod_auto_proofs_i, Math__div_boogie_i, Math__div_def_i, Math__power_i, Math__power_s, Math__power2_s, Math__mul_i, Math__mul_auto_i, Math__mul_auto_proofs_i, Math__mul_nonlinear_i, Math__div_nonlinear_i, types_s, _System
cl /Foobj\crypto\hashing\sha256_main_i.obj /c obj\crypto\hashing\sha256_main_i.c /nologo /Ox /Gz /DKRML_NOUINT128 /IC:\build\agent1\_work\6\s\kremlin\kremlib /Isrc\lib\util /Iobj\crypto\hashing /Zi /Fdobj\crypto\hashing\sha256_main_i.pdb
cl /Foobj\crypto\hashing\testsha256.obj /c obj\crypto\hashing\testsha256.c /nologo /Ox /Gz /DKRML_NOUINT128 /IC:\build\agent1\_work\6\s\kremlin\kremlib /Isrc\lib\util /Iobj\crypto\hashing /Zi /Fdobj\crypto\hashing\testsha256.pdb
sha256_main_i.c
testsha256.c
Copy file(s): "obj\lib\util\heaplets.i.tmp" to "obj\lib\util\heaplets.i.vdfy"
Copy file(s): "obj\crypto\aes\cbc_helpers.i.tmp" to "obj\crypto\aes\cbc_helpers.i.vdfy"
Copy file(s): "obj\arch\x86\decls.gen.tmp" to "obj\arch\x86\decls.gen.vdfy"
Copy file(s): "obj\arch\x86\leakage.i.tmp" to "obj\arch\x86\leakage.i.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\printMasm.s.dfy /noVerify > obj\arch\x86\printMasm.s.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\printGcc.s.dfy /noVerify > obj\arch\x86\printGcc.s.tmp
Copy file(s): "obj\arch\x86\printGcc.s.tmp" to "obj\arch\x86\printGcc.s.vdfy"
Copy file(s): "obj\arch\x86\printMasm.s.tmp" to "obj\arch\x86\printMasm.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith src\arch\x86\print.s.dfy /noVerify > obj\arch\x86\print.s.tmp
Copy file(s): "obj\arch\x86\print.s.tmp" to "obj\arch\x86\print.s.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith obj\crypto\aes\aes.gen.dfy /noVerify > obj\crypto\aes\aes.gen.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith obj\crypto\hashing\sha256.gen.dfy /noVerify > obj\crypto\hashing\sha256.gen.tmp
Copy file(s): "obj\crypto\aes\aes.gen.tmp" to "obj\crypto\aes\aes.gen.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /timeLimit:120 obj\crypto\aes\cbc.gen.dfy /noVerify > obj\crypto\aes\cbc.gen.tmp
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /nologo /noVerify /compile:2 src\lib\util\IoNative.cs src\crypto\aes\aes_main.i.dfy /out:obj\aes.exe
[TRACE] Using prover: C:\build\agent1\_work\6\s\vale\tools\Dafny\z3.exe
Parsing src\crypto\aes\aes_main.i.dfy
src\crypto\aes\../../lib/util/Io.s.dfy(1,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(21,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(28,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(33,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
Copy file(s): "obj\crypto\hashing\sha256.gen.tmp" to "obj\crypto\hashing\sha256.gen.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /nologo /noVerify /compile:2 src\lib\util\IoNative.cs src\crypto\hashing\sha256_vale_main.i.dfy /out:obj\sha256.exe
[TRACE] Using prover: C:\build\agent1\_work\6\s\vale\tools\Dafny\z3.exe
Parsing src\crypto\hashing\sha256_vale_main.i.dfy
src\crypto\hashing\../../lib/util/Io.s.dfy(1,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\hashing\../../lib/util/Io.s.dfy(21,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\hashing\../../lib/util/Io.s.dfy(28,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\hashing\../../lib/util/Io.s.dfy(33,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
Coalescing blocks...
Inlining...

Running abstract interpretation...
[0.0468749 s]

Dafny program verifier finished with 0 verified, 0 errors
Compiled program written to aes.cs
Compiled assembly into aes.exe
obj\aes.exe GCC Linux > obj\aes-linux.S
obj\aes.exe GCC MacOS > obj\aes-macos.S
obj\aes.exe GCC Win > obj\aes-gcc.S
obj\aes.exe MASM Win > obj\aes.asm
ml /nologo /c /Foobj\aes.obj obj\aes.asm
Assembling: obj\aes.asm
link /nologo /DEBUG /OUT:obj\testaes.exe obj\crypto\aes\testaes.obj obj\aes.obj
Coalescing blocks...
Inlining...
echo ABC > obj/testaes.txt

Running abstract interpretation...
[0.0468723 s]

Dafny program verifier finished with 0 verified, 0 errors
Compiled program written to sha256.cs
Compiled assembly into sha256.exe
obj\sha256.exe GCC Win > obj\sha256-gcc.S
obj\sha256.exe MASM Win > obj\sha256.asm
obj\sha256.exe GCC Linux > obj\sha256-linux.S
obj\sha256.exe GCC MacOS > obj\sha256-macos.S
ml /nologo /c /Foobj\sha256.obj obj\sha256.asm
Assembling: obj\sha256.asm
link /nologo /DEBUG /OUT:obj\testsha256.exe obj\crypto\hashing\testsha256.obj obj\sha256.obj obj\crypto\hashing\sha256_main_i.obj
Copy file(s): "obj\crypto\aes\cbc.gen.tmp" to "obj\crypto\aes\cbc.gen.vdfy"
tools\Dafny\Dafny.exe /ironDafny /allocated:1 /induction:1 /compile:0 /timeLimit:30 /errorLimit:1 /errorTrace:0 /trace /noNLarith /nologo /noVerify /compile:2 src\lib\util\IoNative.cs src\crypto\aes\cbc_main.i.dfy /out:obj\cbc.exe
[TRACE] Using prover: C:\build\agent1\_work\6\s\vale\tools\Dafny\z3.exe
Parsing src\crypto\aes\cbc_main.i.dfy
src\crypto\aes\../../lib/util/Io.s.dfy(1,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(21,0): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(28,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
src\crypto\aes\../../lib/util/Io.s.dfy(33,4): Warning: the 'extern' keyword has been deprecated; use the ':extern' attribute instead
echo ABC > obj/testsha256.txt
Coalescing blocks...
Inlining...

Running abstract interpretation...
[0.046878 s]

Dafny program verifier finished with 0 verified, 0 errors
Compiled program written to cbc.cs
Compiled assembly into cbc.exe
obj\cbc.exe GCC MacOS > obj\cbc-macos.S
obj\cbc.exe GCC Linux > obj\cbc-linux.S
obj\cbc.exe MASM Win > obj\cbc.asm
obj\cbc.exe GCC Win > obj\cbc-gcc.S
ml /nologo /c /Foobj\cbc.obj obj\cbc.asm
Assembling: obj\cbc.asm
link /nologo /DEBUG /OUT:obj\testcbc.exe obj\crypto\aes\testcbc.obj obj\cbc.obj
echo ABC > obj/testcbc.txt
scons: done building targets.
+ SCONS_RETCODE=0
+ rm -f everest3212scons0.bat
+ return 0
+ cd hacl-star
+ make -C secure_api/vale/asm import
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/secure_api/vale/asm'
cp C:/build/agent1/_work/6/s/vale/obj/aes-gcc.S aes-x86_64.S
cp C:/build/agent1/_work/6/s/vale/obj/sha256-gcc.S sha256-x86_64.S
cp C:/build/agent1/_work/6/s/vale/obj/aes-macos.S aes-x86_64-Darwin.S
cp C:/build/agent1/_work/6/s/vale/obj/sha256-macos.S sha256-x86_64-Darwin.S
cp C:/build/agent1/_work/6/s/vale/obj/aes-linux.S aes-x86_64-Linux.S
cp C:/build/agent1/_work/6/s/vale/obj/sha256-linux.S sha256-x86_64-Linux.S
sed -i 's/.section .text/.text/' *.S
for f in sha256_main_i.c sha256_main_i.h; do cp C:/build/agent1/_work/6/s/vale/obj/crypto/hashing/$f .; done
for f in DafnyLib.h; do cp C:/build/agent1/_work/6/s/vale/src/lib/util/$f .; done
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/secure_api/vale/asm'
+ git diff --exit-code secure_api/vale/asm
diff --git a/secure_api/vale/asm/aes-x86_64-Darwin.S b/secure_api/vale/asm/aes-x86_64-Darwin.S
index a5aae4b5..3e944eee 100644
--- a/secure_api/vale/asm/aes-x86_64-Darwin.S
+++ b/secure_api/vale/asm/aes-x86_64-Darwin.S
@@ -1,9 +1,10 @@
.text
.global _KeyExpansionStdcall
_KeyExpansionStdcall:
-  movdqu 0 (%rdi), %xmm1
-  mov %rsi, %rdx
-  movdqu %xmm1, 0 (%rdx)
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -13,7 +14,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -23,7 +24,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -33,7 +34,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -43,7 +44,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -53,7 +54,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -63,7 +64,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -73,7 +74,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -83,7 +84,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -93,7 +94,7 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -103,7 +104,8 @@ _KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
+  movdqu %xmm1, 160(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
@@ -111,9 +113,10 @@ _KeyExpansionStdcall:

.global _KeyExpansionAndInversionStdcall
_KeyExpansionAndInversionStdcall:
-  movdqu 0 (%rdi), %xmm1
-  mov %rsi, %rdx
-  movdqu %xmm1, 0 (%rdx)
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -123,7 +126,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -133,7 +136,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -143,7 +146,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -153,7 +156,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -163,7 +166,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -173,7 +176,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -183,7 +186,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -193,7 +196,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -203,7 +206,7 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -213,34 +216,35 @@ _KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
-  movdqu 16 (%rdx), %xmm1
+  movdqu %xmm1, 160(%eax)
+  movdqu 16(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 16 (%rdx)
-  movdqu 32 (%rdx), %xmm1
+  movdqu %xmm1, 16(%eax)
+  movdqu 32(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 32 (%rdx)
-  movdqu 48 (%rdx), %xmm1
+  movdqu %xmm1, 32(%eax)
+  movdqu 48(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 48 (%rdx)
-  movdqu 64 (%rdx), %xmm1
+  movdqu %xmm1, 48(%eax)
+  movdqu 64(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 64 (%rdx)
-  movdqu 80 (%rdx), %xmm1
+  movdqu %xmm1, 64(%eax)
+  movdqu 80(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 80 (%rdx)
-  movdqu 96 (%rdx), %xmm1
+  movdqu %xmm1, 80(%eax)
+  movdqu 96(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 96 (%rdx)
-  movdqu 112 (%rdx), %xmm1
+  movdqu %xmm1, 96(%eax)
+  movdqu 112(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 112 (%rdx)
-  movdqu 128 (%rdx), %xmm1
+  movdqu %xmm1, 112(%eax)
+  movdqu 128(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 128 (%rdx)
-  movdqu 144 (%rdx), %xmm1
+  movdqu %xmm1, 128(%eax)
+  movdqu 144(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
@@ -248,32 +252,88 @@ _KeyExpansionAndInversionStdcall:

.global _AES128EncryptOneBlockStdcall
_AES128EncryptOneBlockStdcall:
-  movdqu 0 (%rsi), %xmm0
-  mov %rdx, %r8
-  movdqu 0 (%r8), %xmm2
+  movl 8(%esp), %eax
+  movdqu 0(%eax), %xmm0
+  movl 12(%esp), %eax
+  movdqu 0(%eax), %xmm2
pxor %xmm2, %xmm0
-  movdqu 16 (%r8), %xmm2
+  movdqu 16(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 32 (%r8), %xmm2
+  movdqu 32(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 48 (%r8), %xmm2
+  movdqu 48(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 64 (%r8), %xmm2
+  movdqu 64(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 80 (%r8), %xmm2
+  movdqu 80(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 96 (%r8), %xmm2
+  movdqu 96(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 112 (%r8), %xmm2
+  movdqu 112(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 128 (%r8), %xmm2
+  movdqu 128(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 144 (%r8), %xmm2
+  movdqu 144(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 160 (%r8), %xmm2
+  movdqu 160(%eax), %xmm2
aesenclast %xmm2, %xmm0
pxor %xmm2, %xmm2
-  movdqu %xmm0, 0 (%rdi)
+  movl 4(%esp), %eax
+  movdqu %xmm0, 0(%eax)
+  ret
+
+.global _AES128EncryptOneBlock
+_AES128EncryptOneBlock:
+  movdqu 0(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 160(%eax), %xmm2
+  aesenclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
+  ret
+
+.global _AES128DecryptOneBlock
+_AES128DecryptOneBlock:
+  movdqu 160(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 0(%eax), %xmm2
+  aesdeclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
ret


diff --git a/secure_api/vale/asm/aes-x86_64-Linux.S b/secure_api/vale/asm/aes-x86_64-Linux.S
index 870e34ef..d44c7b91 100644
--- a/secure_api/vale/asm/aes-x86_64-Linux.S
+++ b/secure_api/vale/asm/aes-x86_64-Linux.S
@@ -1,9 +1,10 @@
.text
.global KeyExpansionStdcall
KeyExpansionStdcall:
-  movdqu 0 (%rdi), %xmm1
-  mov %rsi, %rdx
-  movdqu %xmm1, 0 (%rdx)
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -13,7 +14,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -23,7 +24,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -33,7 +34,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -43,7 +44,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -53,7 +54,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -63,7 +64,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -73,7 +74,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -83,7 +84,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -93,7 +94,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -103,7 +104,8 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
+  movdqu %xmm1, 160(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
@@ -111,9 +113,10 @@ KeyExpansionStdcall:

.global KeyExpansionAndInversionStdcall
KeyExpansionAndInversionStdcall:
-  movdqu 0 (%rdi), %xmm1
-  mov %rsi, %rdx
-  movdqu %xmm1, 0 (%rdx)
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -123,7 +126,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -133,7 +136,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -143,7 +146,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -153,7 +156,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -163,7 +166,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -173,7 +176,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -183,7 +186,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -193,7 +196,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -203,7 +206,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -213,34 +216,35 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
-  movdqu 16 (%rdx), %xmm1
+  movdqu %xmm1, 160(%eax)
+  movdqu 16(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 16 (%rdx)
-  movdqu 32 (%rdx), %xmm1
+  movdqu %xmm1, 16(%eax)
+  movdqu 32(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 32 (%rdx)
-  movdqu 48 (%rdx), %xmm1
+  movdqu %xmm1, 32(%eax)
+  movdqu 48(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 48 (%rdx)
-  movdqu 64 (%rdx), %xmm1
+  movdqu %xmm1, 48(%eax)
+  movdqu 64(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 64 (%rdx)
-  movdqu 80 (%rdx), %xmm1
+  movdqu %xmm1, 64(%eax)
+  movdqu 80(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 80 (%rdx)
-  movdqu 96 (%rdx), %xmm1
+  movdqu %xmm1, 80(%eax)
+  movdqu 96(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 96 (%rdx)
-  movdqu 112 (%rdx), %xmm1
+  movdqu %xmm1, 96(%eax)
+  movdqu 112(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 112 (%rdx)
-  movdqu 128 (%rdx), %xmm1
+  movdqu %xmm1, 112(%eax)
+  movdqu 128(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 128 (%rdx)
-  movdqu 144 (%rdx), %xmm1
+  movdqu %xmm1, 128(%eax)
+  movdqu 144(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
@@ -248,32 +252,88 @@ KeyExpansionAndInversionStdcall:

.global AES128EncryptOneBlockStdcall
AES128EncryptOneBlockStdcall:
-  movdqu 0 (%rsi), %xmm0
-  mov %rdx, %r8
-  movdqu 0 (%r8), %xmm2
+  movl 8(%esp), %eax
+  movdqu 0(%eax), %xmm0
+  movl 12(%esp), %eax
+  movdqu 0(%eax), %xmm2
pxor %xmm2, %xmm0
-  movdqu 16 (%r8), %xmm2
+  movdqu 16(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 32 (%r8), %xmm2
+  movdqu 32(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 48 (%r8), %xmm2
+  movdqu 48(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 64 (%r8), %xmm2
+  movdqu 64(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 80 (%r8), %xmm2
+  movdqu 80(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 96 (%r8), %xmm2
+  movdqu 96(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 112 (%r8), %xmm2
+  movdqu 112(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 128 (%r8), %xmm2
+  movdqu 128(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 144 (%r8), %xmm2
+  movdqu 144(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 160 (%r8), %xmm2
+  movdqu 160(%eax), %xmm2
aesenclast %xmm2, %xmm0
pxor %xmm2, %xmm2
-  movdqu %xmm0, 0 (%rdi)
+  movl 4(%esp), %eax
+  movdqu %xmm0, 0(%eax)
+  ret
+
+.global AES128EncryptOneBlock
+AES128EncryptOneBlock:
+  movdqu 0(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 160(%eax), %xmm2
+  aesenclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
+  ret
+
+.global AES128DecryptOneBlock
+AES128DecryptOneBlock:
+  movdqu 160(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 0(%eax), %xmm2
+  aesdeclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
ret


diff --git a/secure_api/vale/asm/aes-x86_64.S b/secure_api/vale/asm/aes-x86_64.S
index fdec29da..3e944eee 100644
--- a/secure_api/vale/asm/aes-x86_64.S
+++ b/secure_api/vale/asm/aes-x86_64.S
@@ -1,8 +1,10 @@
.text
-.global KeyExpansionStdcall
-KeyExpansionStdcall:
-  movdqu 0 (%rcx), %xmm1
-  movdqu %xmm1, 0 (%rdx)
+.global _KeyExpansionStdcall
+_KeyExpansionStdcall:
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -12,7 +14,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -22,7 +24,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -32,7 +34,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -42,7 +44,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -52,7 +54,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -62,7 +64,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -72,7 +74,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -82,7 +84,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -92,7 +94,7 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -102,16 +104,19 @@ KeyExpansionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
+  movdqu %xmm1, 160(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
ret

-.global KeyExpansionAndInversionStdcall
-KeyExpansionAndInversionStdcall:
-  movdqu 0 (%rcx), %xmm1
-  movdqu %xmm1, 0 (%rdx)
+.global _KeyExpansionAndInversionStdcall
+_KeyExpansionAndInversionStdcall:
+  movl 4(%esp), %eax
+  movdqu 0(%eax), %xmm1
+  movl 8(%esp), %eax
+  movdqu %xmm1, 0(%eax)
aeskeygenassist $1, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -121,7 +126,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 16 (%rdx)
+  movdqu %xmm1, 16(%eax)
aeskeygenassist $2, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -131,7 +136,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 32 (%rdx)
+  movdqu %xmm1, 32(%eax)
aeskeygenassist $4, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -141,7 +146,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 48 (%rdx)
+  movdqu %xmm1, 48(%eax)
aeskeygenassist $8, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -151,7 +156,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 64 (%rdx)
+  movdqu %xmm1, 64(%eax)
aeskeygenassist $16, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -161,7 +166,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 80 (%rdx)
+  movdqu %xmm1, 80(%eax)
aeskeygenassist $32, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -171,7 +176,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 96 (%rdx)
+  movdqu %xmm1, 96(%eax)
aeskeygenassist $64, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -181,7 +186,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 112 (%rdx)
+  movdqu %xmm1, 112(%eax)
aeskeygenassist $128, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -191,7 +196,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 128 (%rdx)
+  movdqu %xmm1, 128(%eax)
aeskeygenassist $27, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -201,7 +206,7 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
aeskeygenassist $54, %xmm1, %xmm2
pshufd $255, %xmm2, %xmm2
vpslldq $4, %xmm1, %xmm3
@@ -211,66 +216,124 @@ KeyExpansionAndInversionStdcall:
vpslldq $4, %xmm1, %xmm3
pxor %xmm3, %xmm1
pxor %xmm2, %xmm1
-  movdqu %xmm1, 160 (%rdx)
-  movdqu 16 (%rdx), %xmm1
+  movdqu %xmm1, 160(%eax)
+  movdqu 16(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 16 (%rdx)
-  movdqu 32 (%rdx), %xmm1
+  movdqu %xmm1, 16(%eax)
+  movdqu 32(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 32 (%rdx)
-  movdqu 48 (%rdx), %xmm1
+  movdqu %xmm1, 32(%eax)
+  movdqu 48(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 48 (%rdx)
-  movdqu 64 (%rdx), %xmm1
+  movdqu %xmm1, 48(%eax)
+  movdqu 64(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 64 (%rdx)
-  movdqu 80 (%rdx), %xmm1
+  movdqu %xmm1, 64(%eax)
+  movdqu 80(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 80 (%rdx)
-  movdqu 96 (%rdx), %xmm1
+  movdqu %xmm1, 80(%eax)
+  movdqu 96(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 96 (%rdx)
-  movdqu 112 (%rdx), %xmm1
+  movdqu %xmm1, 96(%eax)
+  movdqu 112(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 112 (%rdx)
-  movdqu 128 (%rdx), %xmm1
+  movdqu %xmm1, 112(%eax)
+  movdqu 128(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 128 (%rdx)
-  movdqu 144 (%rdx), %xmm1
+  movdqu %xmm1, 128(%eax)
+  movdqu 144(%eax), %xmm1
aesimc %xmm1, %xmm1
-  movdqu %xmm1, 144 (%rdx)
+  movdqu %xmm1, 144(%eax)
+  xor %eax, %eax
pxor %xmm1, %xmm1
pxor %xmm2, %xmm2
pxor %xmm3, %xmm3
ret

-.global AES128EncryptOneBlockStdcall
-AES128EncryptOneBlockStdcall:
-  movdqu 0 (%rdx), %xmm0
-  movdqu 0 (%r8), %xmm2
+.global _AES128EncryptOneBlockStdcall
+_AES128EncryptOneBlockStdcall:
+  movl 8(%esp), %eax
+  movdqu 0(%eax), %xmm0
+  movl 12(%esp), %eax
+  movdqu 0(%eax), %xmm2
pxor %xmm2, %xmm0
-  movdqu 16 (%r8), %xmm2
+  movdqu 16(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 32 (%r8), %xmm2
+  movdqu 32(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 48 (%r8), %xmm2
+  movdqu 48(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 64 (%r8), %xmm2
+  movdqu 64(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 80 (%r8), %xmm2
+  movdqu 80(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 96 (%r8), %xmm2
+  movdqu 96(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 112 (%r8), %xmm2
+  movdqu 112(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 128 (%r8), %xmm2
+  movdqu 128(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 144 (%r8), %xmm2
+  movdqu 144(%eax), %xmm2
aesenc %xmm2, %xmm0
-  movdqu 160 (%r8), %xmm2
+  movdqu 160(%eax), %xmm2
aesenclast %xmm2, %xmm0
pxor %xmm2, %xmm2
-  movdqu %xmm0, 0 (%rcx)
+  movl 4(%esp), %eax
+  movdqu %xmm0, 0(%eax)
+  ret
+
+.global _AES128EncryptOneBlock
+_AES128EncryptOneBlock:
+  movdqu 0(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesenc %xmm2, %xmm0
+  movdqu 160(%eax), %xmm2
+  aesenclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
+  ret
+
+.global _AES128DecryptOneBlock
+_AES128DecryptOneBlock:
+  movdqu 160(%eax), %xmm2
+  pxor %xmm2, %xmm0
+  movdqu 144(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 128(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 112(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 96(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 80(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 64(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 48(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 32(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 16(%eax), %xmm2
+  aesdec %xmm2, %xmm0
+  movdqu 0(%eax), %xmm2
+  aesdeclast %xmm2, %xmm0
+  pxor %xmm2, %xmm2
ret


diff --git a/secure_api/vale/asm/sha256-x86_64-Darwin.S b/secure_api/vale/asm/sha256-x86_64-Darwin.S
index 7aa9ef22..363196fa 100644
--- a/secure_api/vale/asm/sha256-x86_64-Darwin.S
+++ b/secure_api/vale/asm/sha256-x86_64-Darwin.S
@@ -1,42 +1,40 @@
.text
.global _sha256_main_i_SHA256_Compute64Steps
_sha256_main_i_SHA256_Compute64Steps:
-  mov %rsi, %r9
-  movq %rdi, 100(%rsp)
-  mov %rdi, %rcx
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%rcx), %r11d
-  movl 4 (%rcx), %r8d
-  movl %r8d, 44(%rsp)
-  movl 8 (%rcx), %r8d
-  movl %r8d, 48(%rsp)
-  movl 12 (%rcx), %r8d
-  movl %r8d, 52(%rsp)
-  movl 16 (%rcx), %r8d
-  movl %r8d, 56(%rsp)
-  movl 20 (%rcx), %r8d
-  movl %r8d, 60(%rsp)
-  movl 24 (%rcx), %r8d
-  movl %r8d, 64(%rsp)
-  movl 28 (%rcx), %r8d
-  movl %r8d, 68(%rsp)
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r10d
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  movl %ebp, 64(%esp)
+  movl %ebx, 68(%esp)
+  movl %esi, 72(%esp)
+  movl %edi, 76(%esp)
+  movl 8(%esp), %esi
+  movl 4(%esp), %eax
+  movl %eax, 60(%esp)
+  movl 0(%eax), %ebp
+  movl 4(%eax), %ebx
+  movl %ebx, 4(%esp)
+  movl 8(%eax), %ebx
+  movl %ebx, 8(%esp)
+  movl 12(%eax), %ebx
+  movl %ebx, 12(%esp)
+  movl 16(%eax), %ebx
+  movl %ebx, 16(%esp)
+  movl 20(%eax), %ebx
+  movl %ebx, 20(%esp)
+  movl 24(%eax), %ebx
+  movl %ebx, 24(%esp)
+  movl 28(%eax), %ebx
+  movl %ebx, 28(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -44,48 +42,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1116352408, %r8d
-  movl 0 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1116352408, %ebx
+  movl 0(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -93,48 +91,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1899447441, %r8d
-  movl 4 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1899447441, %ebx
+  movl 4(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -142,48 +140,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3049323471, %r8d
-  movl 8 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3049323471, %ebx
+  movl 8(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -191,48 +189,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3921009573, %r8d
-  movl 12 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3921009573, %ebx
+  movl 12(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -240,48 +238,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $961987163, %r8d
-  movl 16 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $961987163, %ebx
+  movl 16(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -289,48 +287,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1508970993, %r8d
-  movl 20 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1508970993, %ebx
+  movl 20(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -338,48 +336,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2453635748, %r8d
-  movl 24 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2453635748, %ebx
+  movl 24(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -387,48 +385,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2870763221, %r8d
-  movl 28 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2870763221, %ebx
+  movl 28(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -436,48 +434,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3624381080, %r8d
-  movl 32 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3624381080, %ebx
+  movl 32(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -485,48 +483,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $310598401, %r8d
-  movl 36 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $310598401, %ebx
+  movl 36(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -534,48 +532,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $607225278, %r8d
-  movl 40 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $607225278, %ebx
+  movl 40(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -583,48 +581,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1426881987, %r8d
-  movl 44 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1426881987, %ebx
+  movl 44(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -632,48 +630,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1925078388, %r8d
-  movl 48 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1925078388, %ebx
+  movl 48(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -681,48 +679,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2162078206, %r8d
-  movl 52 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2162078206, %ebx
+  movl 52(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -730,48 +728,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2614888103, %r8d
-  movl 56 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2614888103, %ebx
+  movl 56(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -779,48 +777,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3248222580, %r8d
-  movl 60 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3248222580, %ebx
+  movl 60(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -828,48 +826,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3835390401, %r8d
-  movl 64 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3835390401, %ebx
+  movl 64(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -877,48 +875,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4022224774, %r8d
-  movl 68 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4022224774, %ebx
+  movl 68(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -926,48 +924,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $264347078, %r8d
-  movl 72 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $264347078, %ebx
+  movl 72(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -975,48 +973,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $604807628, %r8d
-  movl 76 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $604807628, %ebx
+  movl 76(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1024,48 +1022,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $770255983, %r8d
-  movl 80 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $770255983, %ebx
+  movl 80(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1073,48 +1071,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1249150122, %r8d
-  movl 84 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1249150122, %ebx
+  movl 84(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1122,48 +1120,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1555081692, %r8d
-  movl 88 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1555081692, %ebx
+  movl 88(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1171,48 +1169,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1996064986, %r8d
-  movl 92 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1996064986, %ebx
+  movl 92(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1220,48 +1218,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2554220882, %r8d
-  movl 96 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2554220882, %ebx
+  movl 96(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1269,48 +1267,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2821834349, %r8d
-  movl 100 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2821834349, %ebx
+  movl 100(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1318,48 +1316,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2952996808, %r8d
-  movl 104 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2952996808, %ebx
+  movl 104(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1367,48 +1365,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3210313671, %r8d
-  movl 108 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3210313671, %ebx
+  movl 108(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1416,48 +1414,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3336571891, %r8d
-  movl 112 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3336571891, %ebx
+  movl 112(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1465,48 +1463,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3584528711, %r8d
-  movl 116 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3584528711, %ebx
+  movl 116(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1514,48 +1512,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $113926993, %r8d
-  movl 120 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $113926993, %ebx
+  movl 120(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1563,48 +1561,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $338241895, %r8d
-  movl 124 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $338241895, %ebx
+  movl 124(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1612,48 +1610,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $666307205, %r8d
-  movl 128 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $666307205, %ebx
+  movl 128(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1661,48 +1659,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $773529912, %r8d
-  movl 132 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $773529912, %ebx
+  movl 132(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1710,48 +1708,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1294757372, %r8d
-  movl 136 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1294757372, %ebx
+  movl 136(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1759,48 +1757,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1396182291, %r8d
-  movl 140 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1396182291, %ebx
+  movl 140(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1808,48 +1806,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1695183700, %r8d
-  movl 144 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1695183700, %ebx
+  movl 144(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1857,48 +1855,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1986661051, %r8d
-  movl 148 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1986661051, %ebx
+  movl 148(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1906,48 +1904,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2177026350, %r8d
-  movl 152 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2177026350, %ebx
+  movl 152(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1955,48 +1953,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2456956037, %r8d
-  movl 156 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2456956037, %ebx
+  movl 156(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2004,48 +2002,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2730485921, %r8d
-  movl 160 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2730485921, %ebx
+  movl 160(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2053,48 +2051,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2820302411, %r8d
-  movl 164 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2820302411, %ebx
+  movl 164(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2102,48 +2100,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3259730800, %r8d
-  movl 168 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3259730800, %ebx
+  movl 168(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2151,48 +2149,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3345764771, %r8d
-  movl 172 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3345764771, %ebx
+  movl 172(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2200,48 +2198,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3516065817, %r8d
-  movl 176 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3516065817, %ebx
+  movl 176(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2249,48 +2247,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3600352804, %r8d
-  movl 180 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3600352804, %ebx
+  movl 180(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2298,48 +2296,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4094571909, %r8d
-  movl 184 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4094571909, %ebx
+  movl 184(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2347,48 +2345,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $275423344, %r8d
-  movl 188 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $275423344, %ebx
+  movl 188(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2396,48 +2394,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $430227734, %r8d
-  movl 192 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $430227734, %ebx
+  movl 192(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2445,48 +2443,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $506948616, %r8d
-  movl 196 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $506948616, %ebx
+  movl 196(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2494,48 +2492,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $659060556, %r8d
-  movl 200 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $659060556, %ebx
+  movl 200(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2543,48 +2541,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $883997877, %r8d
-  movl 204 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $883997877, %ebx
+  movl 204(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2592,48 +2590,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $958139571, %r8d
-  movl 208 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $958139571, %ebx
+  movl 208(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2641,48 +2639,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1322822218, %r8d
-  movl 212 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1322822218, %ebx
+  movl 212(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2690,48 +2688,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1537002063, %r8d
-  movl 216 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1537002063, %ebx
+  movl 216(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2739,48 +2737,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1747873779, %r8d
-  movl 220 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1747873779, %ebx
+  movl 220(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2788,48 +2786,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1955562222, %r8d
-  movl 224 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1955562222, %ebx
+  movl 224(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2837,48 +2835,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2024104815, %r8d
-  movl 228 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2024104815, %ebx
+  movl 228(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2886,48 +2884,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2227730452, %r8d
-  movl 232 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2227730452, %ebx
+  movl 232(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2935,48 +2933,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2361852424, %r8d
-  movl 236 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2361852424, %ebx
+  movl 236(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2984,48 +2982,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2428436474, %r8d
-  movl 240 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2428436474, %ebx
+  movl 240(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3033,48 +3031,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2756734187, %r8d
-  movl 244 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2756734187, %ebx
+  movl 244(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3082,48 +3080,48 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3204031479, %r8d
-  movl 248 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3204031479, %ebx
+  movl 248(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3131,1203 +3129,1215 @@ _sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3329325298, %r8d
-  movl 252 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  movq 100(%rsp), %rcx
-  movl 0 (%rcx), %r8d
-  add %r11d, %r8d
-  movl %r8d, 0 (%rcx)
-  movl 4 (%rcx), %r8d
-  movl 44(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 4 (%rcx)
-  movl 8 (%rcx), %r8d
-  movl 48(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 8 (%rcx)
-  movl 12 (%rcx), %r8d
-  movl 52(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 12 (%rcx)
-  movl 16 (%rcx), %r8d
-  movl 56(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 16 (%rcx)
-  movl 20 (%rcx), %r8d
-  movl 60(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 20 (%rcx)
-  movl 24 (%rcx), %r8d
-  movl 64(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 24 (%rcx)
-  movl 28 (%rcx), %r8d
-  movl 68(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 28 (%rcx)
-  movl $0, 44(%rsp)
-  movl $0, 48(%rsp)
-  movl $0, 52(%rsp)
-  movl $0, 56(%rsp)
-  movl $0, 60(%rsp)
-  movl $0, 64(%rsp)
-  movl $0, 68(%rsp)
-  movl $0, 72(%rsp)
-  movl $0, 76(%rsp)
-  movl $0, 80(%rsp)
-  movl $0, 84(%rsp)
-  movl $0, 88(%rsp)
-  movl $0, 92(%rsp)
-  movl $0, 96(%rsp)
-  movl $0, 100(%rsp)
-  movl $0, 104(%rsp)
-  movl $0, 108(%rsp)
-  movl $0, 112(%rsp)
-  movl $0, 116(%rsp)
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3329325298, %ebx
+  movl 252(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  movl 60(%esp), %eax
+  movl 0(%eax), %ebx
+  add %ebp, %ebx
+  movl %ebx, 0(%eax)
+  movl 4(%eax), %ebx
+  movl 4(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 4(%eax)
+  movl 8(%eax), %ebx
+  movl 8(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 8(%eax)
+  movl 12(%eax), %ebx
+  movl 12(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 12(%eax)
+  movl 16(%eax), %ebx
+  movl 16(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 16(%eax)
+  movl 20(%eax), %ebx
+  movl 20(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 20(%eax)
+  movl 24(%eax), %ebx
+  movl 24(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 24(%eax)
+  movl 28(%eax), %ebx
+  movl 28(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 28(%eax)
+  movl 64(%esp), %ebp
+  movl 68(%esp), %ebx
+  movl 72(%esp), %esi
+  movl 76(%esp), %edi
+  movl $0, 4(%esp)
+  movl $0, 8(%esp)
+  movl $0, 12(%esp)
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
+  movl $0, 32(%esp)
+  movl $0, 36(%esp)
+  movl $0, 40(%esp)
+  movl $0, 44(%esp)
+  movl $0, 48(%esp)
+  movl $0, 52(%esp)
+  movl $0, 56(%esp)
+  movl $0, 60(%esp)
+  movl $0, 64(%esp)
+  movl $0, 68(%esp)
+  movl $0, 72(%esp)
+  movl $0, 76(%esp)
ret

.global _sha256_main_i_SHA256_ComputeInitialWs
_sha256_main_i_SHA256_ComputeInitialWs:
-  mov %rdi, %r10
-  add %rsi, %r10
-  mov %rdx, %r9
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%r10), %eax
+  movl %ebp, 16(%esp)
+  movl %ebx, 20(%esp)
+  movl %esi, 24(%esp)
+  movl %edi, 28(%esp)
+  movl 4(%esp), %edi
+  movl 8(%esp), %eax
+  add %eax, %edi
+  movl 12(%esp), %esi
+  movl 0(%edi), %eax
bswap %eax
-  movl 4 (%r10), %r8d
-  bswap %r8d
-  movl 8 (%r10), %ecx
+  movl 4(%edi), %ebx
+  bswap %ebx
+  movl 8(%edi), %ecx
bswap %ecx
-  movl 12 (%r10), %edx
+  movl 12(%edi), %edx
bswap %edx
-  movl 16 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 0 (%r9)
-  movl %r8d, 4 (%r9)
-  movl %ecx, 8 (%r9)
-  movl %edx, 12 (%r9)
-  movl %r11d, 16 (%r9)
-  movl 20 (%r10), %eax
+  movl 16(%edi), %ebp
+  bswap %ebp
+  movl %eax, 0(%esi)
+  movl %ebx, 4(%esi)
+  movl %ecx, 8(%esi)
+  movl %edx, 12(%esi)
+  movl %ebp, 16(%esi)
+  movl 20(%edi), %eax
bswap %eax
-  movl 24 (%r10), %r8d
-  bswap %r8d
-  movl 28 (%r10), %ecx
+  movl 24(%edi), %ebx
+  bswap %ebx
+  movl 28(%edi), %ecx
bswap %ecx
-  movl 32 (%r10), %edx
+  movl 32(%edi), %edx
bswap %edx
-  movl 36 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 20 (%r9)
-  movl %r8d, 24 (%r9)
-  movl %ecx, 28 (%r9)
-  movl %edx, 32 (%r9)
-  movl %r11d, 36 (%r9)
-  movl 40 (%r10), %eax
+  movl 36(%edi), %ebp
+  bswap %ebp
+  movl %eax, 20(%esi)
+  movl %ebx, 24(%esi)
+  movl %ecx, 28(%esi)
+  movl %edx, 32(%esi)
+  movl %ebp, 36(%esi)
+  movl 40(%edi), %eax
bswap %eax
-  movl 44 (%r10), %r8d
-  bswap %r8d
-  movl 48 (%r10), %ecx
+  movl 44(%edi), %ebx
+  bswap %ebx
+  movl 48(%edi), %ecx
bswap %ecx
-  movl 52 (%r10), %edx
+  movl 52(%edi), %edx
bswap %edx
-  movl 56 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 40 (%r9)
-  movl %r8d, 44 (%r9)
-  movl %ecx, 48 (%r9)
-  movl %edx, 52 (%r9)
-  movl %r11d, 56 (%r9)
-  movl 60 (%r10), %eax
+  movl 56(%edi), %ebp
+  bswap %ebp
+  movl %eax, 40(%esi)
+  movl %ebx, 44(%esi)
+  movl %ecx, 48(%esi)
+  movl %edx, 52(%esi)
+  movl %ebp, 56(%esi)
+  movl 60(%edi), %eax
bswap %eax
-  movl %eax, 60 (%r9)
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  movl %eax, 60(%esi)
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 36 (%r9), %edx
-  add %r8d, %edx
-  movl 4 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 36(%esi), %edx
+  add %ebx, %edx
+  movl 4(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 0 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 0(%esi), %eax
add %eax, %edx
-  movl %edx, 64 (%r9)
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 64(%esi)
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 40 (%r9), %edx
-  add %r8d, %edx
-  movl 8 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 40(%esi), %edx
+  add %ebx, %edx
+  movl 8(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 4 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 4(%esi), %eax
add %eax, %edx
-  movl %edx, 68 (%r9)
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 68(%esi)
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 44 (%r9), %edx
-  add %r8d, %edx
-  movl 12 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 44(%esi), %edx
+  add %ebx, %edx
+  movl 12(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 8 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 8(%esi), %eax
add %eax, %edx
-  movl %edx, 72 (%r9)
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 72(%esi)
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 48 (%r9), %edx
-  add %r8d, %edx
-  movl 16 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 48(%esi), %edx
+  add %ebx, %edx
+  movl 16(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 12 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 12(%esi), %eax
add %eax, %edx
-  movl %edx, 76 (%r9)
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 76(%esi)
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 52 (%r9), %edx
-  add %r8d, %edx
-  movl 20 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 52(%esi), %edx
+  add %ebx, %edx
+  movl 20(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 16 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 16(%esi), %eax
add %eax, %edx
-  movl %edx, 80 (%r9)
-  movl 76 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 80(%esi)
+  movl 76(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 56 (%r9), %edx
-  add %r8d, %edx
-  movl 24 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 56(%esi), %edx
+  add %ebx, %edx
+  movl 24(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 20 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 20(%esi), %eax
add %eax, %edx
-  movl %edx, 84 (%r9)
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 84(%esi)
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 60 (%r9), %edx
-  add %r8d, %edx
-  movl 28 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 60(%esi), %edx
+  add %ebx, %edx
+  movl 28(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 24 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 24(%esi), %eax
add %eax, %edx
-  movl %edx, 88 (%r9)
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 88(%esi)
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 64 (%r9), %edx
-  add %r8d, %edx
-  movl 32 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 64(%esi), %edx
+  add %ebx, %edx
+  movl 32(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 28 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 28(%esi), %eax
add %eax, %edx
-  movl %edx, 92 (%r9)
-  movl 88 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 92(%esi)
+  movl 88(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 68 (%r9), %edx
-  add %r8d, %edx
-  movl 36 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 68(%esi), %edx
+  add %ebx, %edx
+  movl 36(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 32 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 32(%esi), %eax
add %eax, %edx
-  movl %edx, 96 (%r9)
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 96(%esi)
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 72 (%r9), %edx
-  add %r8d, %edx
-  movl 40 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 72(%esi), %edx
+  add %ebx, %edx
+  movl 40(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 36 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 36(%esi), %eax
add %eax, %edx
-  movl %edx, 100 (%r9)
-  movl 96 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 100(%esi)
+  movl 96(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 76 (%r9), %edx
-  add %r8d, %edx
-  movl 44 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 76(%esi), %edx
+  add %ebx, %edx
+  movl 44(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 40 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 40(%esi), %eax
add %eax, %edx
-  movl %edx, 104 (%r9)
-  movl 100 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 104(%esi)
+  movl 100(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 80 (%r9), %edx
-  add %r8d, %edx
-  movl 48 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 80(%esi), %edx
+  add %ebx, %edx
+  movl 48(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 44 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 44(%esi), %eax
add %eax, %edx
-  movl %edx, 108 (%r9)
-  movl 104 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 108(%esi)
+  movl 104(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 84 (%r9), %edx
-  add %r8d, %edx
-  movl 52 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 84(%esi), %edx
+  add %ebx, %edx
+  movl 52(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 48 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 48(%esi), %eax
add %eax, %edx
-  movl %edx, 112 (%r9)
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 112(%esi)
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 88 (%r9), %edx
-  add %r8d, %edx
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 88(%esi), %edx
+  add %ebx, %edx
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 52 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 52(%esi), %eax
add %eax, %edx
-  movl %edx, 116 (%r9)
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 116(%esi)
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 92 (%r9), %edx
-  add %r8d, %edx
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 92(%esi), %edx
+  add %ebx, %edx
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 56 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 56(%esi), %eax
add %eax, %edx
-  movl %edx, 120 (%r9)
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 120(%esi)
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 96 (%r9), %edx
-  add %r8d, %edx
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 96(%esi), %edx
+  add %ebx, %edx
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 60 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 60(%esi), %eax
add %eax, %edx
-  movl %edx, 124 (%r9)
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 124(%esi)
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 100 (%r9), %edx
-  add %r8d, %edx
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 100(%esi), %edx
+  add %ebx, %edx
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 64 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 64(%esi), %eax
add %eax, %edx
-  movl %edx, 128 (%r9)
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 128(%esi)
+  movl 124(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 104 (%r9), %edx
-  add %r8d, %edx
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 104(%esi), %edx
+  add %ebx, %edx
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 68 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 68(%esi), %eax
add %eax, %edx
-  movl %edx, 132 (%r9)
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 132(%esi)
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 108 (%r9), %edx
-  add %r8d, %edx
-  movl 76 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 108(%esi), %edx
+  add %ebx, %edx
+  movl 76(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 72 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 72(%esi), %eax
add %eax, %edx
-  movl %edx, 136 (%r9)
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 136(%esi)
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 112 (%r9), %edx
-  add %r8d, %edx
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 112(%esi), %edx
+  add %ebx, %edx
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 76 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 76(%esi), %eax
add %eax, %edx
-  movl %edx, 140 (%r9)
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 140(%esi)
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 116 (%r9), %edx
-  add %r8d, %edx
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 116(%esi), %edx
+  add %ebx, %edx
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 80 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 80(%esi), %eax
add %eax, %edx
-  movl %edx, 144 (%r9)
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 144(%esi)
+  movl 140(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 120 (%r9), %edx
-  add %r8d, %edx
-  movl 88 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 120(%esi), %edx
+  add %ebx, %edx
+  movl 88(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 84 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 84(%esi), %eax
add %eax, %edx
-  movl %edx, 148 (%r9)
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 148(%esi)
+  movl 144(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 124 (%r9), %edx
-  add %r8d, %edx
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 124(%esi), %edx
+  add %ebx, %edx
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 88 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 88(%esi), %eax
add %eax, %edx
-  movl %edx, 152 (%r9)
-  movl 148 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 152(%esi)
+  movl 148(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 128 (%r9), %edx
-  add %r8d, %edx
-  movl 96 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 128(%esi), %edx
+  add %ebx, %edx
+  movl 96(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 92 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 92(%esi), %eax
add %eax, %edx
-  movl %edx, 156 (%r9)
-  movl 152 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 156(%esi)
+  movl 152(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 132 (%r9), %edx
-  add %r8d, %edx
-  movl 100 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 132(%esi), %edx
+  add %ebx, %edx
+  movl 100(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 96 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 96(%esi), %eax
add %eax, %edx
-  movl %edx, 160 (%r9)
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 160(%esi)
+  movl 156(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 136 (%r9), %edx
-  add %r8d, %edx
-  movl 104 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 136(%esi), %edx
+  add %ebx, %edx
+  movl 104(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 100 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 100(%esi), %eax
add %eax, %edx
-  movl %edx, 164 (%r9)
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 164(%esi)
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 140 (%r9), %edx
-  add %r8d, %edx
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 140(%esi), %edx
+  add %ebx, %edx
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 104 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 104(%esi), %eax
add %eax, %edx
-  movl %edx, 168 (%r9)
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 168(%esi)
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 144 (%r9), %edx
-  add %r8d, %edx
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 144(%esi), %edx
+  add %ebx, %edx
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 108 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 108(%esi), %eax
add %eax, %edx
-  movl %edx, 172 (%r9)
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 172(%esi)
+  movl 168(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 148 (%r9), %edx
-  add %r8d, %edx
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 148(%esi), %edx
+  add %ebx, %edx
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 112 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 112(%esi), %eax
add %eax, %edx
-  movl %edx, 176 (%r9)
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 176(%esi)
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 152 (%r9), %edx
-  add %r8d, %edx
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 152(%esi), %edx
+  add %ebx, %edx
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 116 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 116(%esi), %eax
add %eax, %edx
-  movl %edx, 180 (%r9)
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 180(%esi)
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 156 (%r9), %edx
-  add %r8d, %edx
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 156(%esi), %edx
+  add %ebx, %edx
+  movl 124(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 120 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 120(%esi), %eax
add %eax, %edx
-  movl %edx, 184 (%r9)
-  movl 180 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 184(%esi)
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 160 (%r9), %edx
-  add %r8d, %edx
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 160(%esi), %edx
+  add %ebx, %edx
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 124 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 124(%esi), %eax
add %eax, %edx
-  movl %edx, 188 (%r9)
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 188(%esi)
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 164 (%r9), %edx
-  add %r8d, %edx
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 164(%esi), %edx
+  add %ebx, %edx
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 128 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 128(%esi), %eax
add %eax, %edx
-  movl %edx, 192 (%r9)
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 192(%esi)
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 168 (%r9), %edx
-  add %r8d, %edx
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 168(%esi), %edx
+  add %ebx, %edx
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 132 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 132(%esi), %eax
add %eax, %edx
-  movl %edx, 196 (%r9)
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 196(%esi)
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 172 (%r9), %edx
-  add %r8d, %edx
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 172(%esi), %edx
+  add %ebx, %edx
+  movl 140(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 136 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 136(%esi), %eax
add %eax, %edx
-  movl %edx, 200 (%r9)
-  movl 196 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 200(%esi)
+  movl 196(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 176 (%r9), %edx
-  add %r8d, %edx
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 176(%esi), %edx
+  add %ebx, %edx
+  movl 144(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 140 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 140(%esi), %eax
add %eax, %edx
-  movl %edx, 204 (%r9)
-  movl 200 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 204(%esi)
+  movl 200(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 180 (%r9), %edx
-  add %r8d, %edx
-  movl 148 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 180(%esi), %edx
+  add %ebx, %edx
+  movl 148(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 144 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 144(%esi), %eax
add %eax, %edx
-  movl %edx, 208 (%r9)
-  movl 204 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 208(%esi)
+  movl 204(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 184 (%r9), %edx
-  add %r8d, %edx
-  movl 152 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 184(%esi), %edx
+  add %ebx, %edx
+  movl 152(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 148 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 148(%esi), %eax
add %eax, %edx
-  movl %edx, 212 (%r9)
-  movl 208 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 212(%esi)
+  movl 208(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 188 (%r9), %edx
-  add %r8d, %edx
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 188(%esi), %edx
+  add %ebx, %edx
+  movl 156(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 152 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 152(%esi), %eax
add %eax, %edx
-  movl %edx, 216 (%r9)
-  movl 212 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 216(%esi)
+  movl 212(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 192 (%r9), %edx
-  add %r8d, %edx
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 192(%esi), %edx
+  add %ebx, %edx
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 156 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 156(%esi), %eax
add %eax, %edx
-  movl %edx, 220 (%r9)
-  movl 216 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 220(%esi)
+  movl 216(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 196 (%r9), %edx
-  add %r8d, %edx
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 196(%esi), %edx
+  add %ebx, %edx
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 160 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 160(%esi), %eax
add %eax, %edx
-  movl %edx, 224 (%r9)
-  movl 220 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 224(%esi)
+  movl 220(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 200 (%r9), %edx
-  add %r8d, %edx
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 200(%esi), %edx
+  add %ebx, %edx
+  movl 168(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 164 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 164(%esi), %eax
add %eax, %edx
-  movl %edx, 228 (%r9)
-  movl 224 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 228(%esi)
+  movl 224(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 204 (%r9), %edx
-  add %r8d, %edx
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 204(%esi), %edx
+  add %ebx, %edx
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 168 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 168(%esi), %eax
add %eax, %edx
-  movl %edx, 232 (%r9)
-  movl 228 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 232(%esi)
+  movl 228(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 208 (%r9), %edx
-  add %r8d, %edx
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 208(%esi), %edx
+  add %ebx, %edx
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 172 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 172(%esi), %eax
add %eax, %edx
-  movl %edx, 236 (%r9)
-  movl 232 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 236(%esi)
+  movl 232(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 212 (%r9), %edx
-  add %r8d, %edx
-  movl 180 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 212(%esi), %edx
+  add %ebx, %edx
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 176 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 176(%esi), %eax
add %eax, %edx
-  movl %edx, 240 (%r9)
-  movl 236 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 240(%esi)
+  movl 236(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 216 (%r9), %edx
-  add %r8d, %edx
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 216(%esi), %edx
+  add %ebx, %edx
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 180 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 180(%esi), %eax
add %eax, %edx
-  movl %edx, 244 (%r9)
-  movl 240 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 244(%esi)
+  movl 240(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 220 (%r9), %edx
-  add %r8d, %edx
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 220(%esi), %edx
+  add %ebx, %edx
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 184 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 184(%esi), %eax
add %eax, %edx
-  movl %edx, 248 (%r9)
-  movl 244 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 248(%esi)
+  movl 244(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 224 (%r9), %edx
-  add %r8d, %edx
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 224(%esi), %edx
+  add %ebx, %edx
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 188 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 188(%esi), %eax
add %eax, %edx
-  movl %edx, 252 (%r9)
+  movl %edx, 252(%esi)
+  movl 16(%esp), %ebp
+  movl 20(%esp), %ebx
+  movl 24(%esp), %esi
+  movl 28(%esp), %edi
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
ret


diff --git a/secure_api/vale/asm/sha256-x86_64-Linux.S b/secure_api/vale/asm/sha256-x86_64-Linux.S
index 288ee549..78ad9fe6 100644
--- a/secure_api/vale/asm/sha256-x86_64-Linux.S
+++ b/secure_api/vale/asm/sha256-x86_64-Linux.S
@@ -1,42 +1,40 @@
.text
.global sha256_main_i_SHA256_Compute64Steps
sha256_main_i_SHA256_Compute64Steps:
-  mov %rsi, %r9
-  movq %rdi, 100(%rsp)
-  mov %rdi, %rcx
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%rcx), %r11d
-  movl 4 (%rcx), %r8d
-  movl %r8d, 44(%rsp)
-  movl 8 (%rcx), %r8d
-  movl %r8d, 48(%rsp)
-  movl 12 (%rcx), %r8d
-  movl %r8d, 52(%rsp)
-  movl 16 (%rcx), %r8d
-  movl %r8d, 56(%rsp)
-  movl 20 (%rcx), %r8d
-  movl %r8d, 60(%rsp)
-  movl 24 (%rcx), %r8d
-  movl %r8d, 64(%rsp)
-  movl 28 (%rcx), %r8d
-  movl %r8d, 68(%rsp)
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r10d
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  movl %ebp, 64(%esp)
+  movl %ebx, 68(%esp)
+  movl %esi, 72(%esp)
+  movl %edi, 76(%esp)
+  movl 8(%esp), %esi
+  movl 4(%esp), %eax
+  movl %eax, 60(%esp)
+  movl 0(%eax), %ebp
+  movl 4(%eax), %ebx
+  movl %ebx, 4(%esp)
+  movl 8(%eax), %ebx
+  movl %ebx, 8(%esp)
+  movl 12(%eax), %ebx
+  movl %ebx, 12(%esp)
+  movl 16(%eax), %ebx
+  movl %ebx, 16(%esp)
+  movl 20(%eax), %ebx
+  movl %ebx, 20(%esp)
+  movl 24(%eax), %ebx
+  movl %ebx, 24(%esp)
+  movl 28(%eax), %ebx
+  movl %ebx, 28(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -44,48 +42,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1116352408, %r8d
-  movl 0 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1116352408, %ebx
+  movl 0(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -93,48 +91,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1899447441, %r8d
-  movl 4 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1899447441, %ebx
+  movl 4(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -142,48 +140,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3049323471, %r8d
-  movl 8 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3049323471, %ebx
+  movl 8(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -191,48 +189,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3921009573, %r8d
-  movl 12 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3921009573, %ebx
+  movl 12(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -240,48 +238,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $961987163, %r8d
-  movl 16 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $961987163, %ebx
+  movl 16(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -289,48 +287,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1508970993, %r8d
-  movl 20 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1508970993, %ebx
+  movl 20(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -338,48 +336,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2453635748, %r8d
-  movl 24 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2453635748, %ebx
+  movl 24(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -387,48 +385,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2870763221, %r8d
-  movl 28 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2870763221, %ebx
+  movl 28(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -436,48 +434,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3624381080, %r8d
-  movl 32 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3624381080, %ebx
+  movl 32(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -485,48 +483,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $310598401, %r8d
-  movl 36 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $310598401, %ebx
+  movl 36(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -534,48 +532,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $607225278, %r8d
-  movl 40 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $607225278, %ebx
+  movl 40(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -583,48 +581,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1426881987, %r8d
-  movl 44 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1426881987, %ebx
+  movl 44(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -632,48 +630,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1925078388, %r8d
-  movl 48 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1925078388, %ebx
+  movl 48(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -681,48 +679,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2162078206, %r8d
-  movl 52 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2162078206, %ebx
+  movl 52(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -730,48 +728,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2614888103, %r8d
-  movl 56 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2614888103, %ebx
+  movl 56(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -779,48 +777,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3248222580, %r8d
-  movl 60 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3248222580, %ebx
+  movl 60(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -828,48 +826,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3835390401, %r8d
-  movl 64 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3835390401, %ebx
+  movl 64(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -877,48 +875,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4022224774, %r8d
-  movl 68 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4022224774, %ebx
+  movl 68(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -926,48 +924,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $264347078, %r8d
-  movl 72 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $264347078, %ebx
+  movl 72(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -975,48 +973,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $604807628, %r8d
-  movl 76 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $604807628, %ebx
+  movl 76(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1024,48 +1022,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $770255983, %r8d
-  movl 80 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $770255983, %ebx
+  movl 80(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1073,48 +1071,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1249150122, %r8d
-  movl 84 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1249150122, %ebx
+  movl 84(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1122,48 +1120,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1555081692, %r8d
-  movl 88 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1555081692, %ebx
+  movl 88(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1171,48 +1169,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1996064986, %r8d
-  movl 92 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1996064986, %ebx
+  movl 92(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1220,48 +1218,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2554220882, %r8d
-  movl 96 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2554220882, %ebx
+  movl 96(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1269,48 +1267,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2821834349, %r8d
-  movl 100 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2821834349, %ebx
+  movl 100(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1318,48 +1316,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2952996808, %r8d
-  movl 104 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2952996808, %ebx
+  movl 104(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1367,48 +1365,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3210313671, %r8d
-  movl 108 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3210313671, %ebx
+  movl 108(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1416,48 +1414,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3336571891, %r8d
-  movl 112 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3336571891, %ebx
+  movl 112(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1465,48 +1463,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3584528711, %r8d
-  movl 116 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3584528711, %ebx
+  movl 116(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1514,48 +1512,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $113926993, %r8d
-  movl 120 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $113926993, %ebx
+  movl 120(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1563,48 +1561,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $338241895, %r8d
-  movl 124 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $338241895, %ebx
+  movl 124(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1612,48 +1610,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $666307205, %r8d
-  movl 128 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $666307205, %ebx
+  movl 128(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1661,48 +1659,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $773529912, %r8d
-  movl 132 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $773529912, %ebx
+  movl 132(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1710,48 +1708,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1294757372, %r8d
-  movl 136 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1294757372, %ebx
+  movl 136(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1759,48 +1757,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1396182291, %r8d
-  movl 140 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1396182291, %ebx
+  movl 140(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1808,48 +1806,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1695183700, %r8d
-  movl 144 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1695183700, %ebx
+  movl 144(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1857,48 +1855,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1986661051, %r8d
-  movl 148 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1986661051, %ebx
+  movl 148(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1906,48 +1904,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2177026350, %r8d
-  movl 152 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2177026350, %ebx
+  movl 152(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1955,48 +1953,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2456956037, %r8d
-  movl 156 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2456956037, %ebx
+  movl 156(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2004,48 +2002,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2730485921, %r8d
-  movl 160 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2730485921, %ebx
+  movl 160(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2053,48 +2051,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2820302411, %r8d
-  movl 164 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2820302411, %ebx
+  movl 164(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2102,48 +2100,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3259730800, %r8d
-  movl 168 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3259730800, %ebx
+  movl 168(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2151,48 +2149,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3345764771, %r8d
-  movl 172 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3345764771, %ebx
+  movl 172(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2200,48 +2198,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3516065817, %r8d
-  movl 176 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3516065817, %ebx
+  movl 176(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2249,48 +2247,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3600352804, %r8d
-  movl 180 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3600352804, %ebx
+  movl 180(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2298,48 +2296,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4094571909, %r8d
-  movl 184 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4094571909, %ebx
+  movl 184(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2347,48 +2345,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $275423344, %r8d
-  movl 188 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $275423344, %ebx
+  movl 188(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2396,48 +2394,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $430227734, %r8d
-  movl 192 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $430227734, %ebx
+  movl 192(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2445,48 +2443,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $506948616, %r8d
-  movl 196 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $506948616, %ebx
+  movl 196(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2494,48 +2492,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $659060556, %r8d
-  movl 200 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $659060556, %ebx
+  movl 200(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2543,48 +2541,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $883997877, %r8d
-  movl 204 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $883997877, %ebx
+  movl 204(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2592,48 +2590,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $958139571, %r8d
-  movl 208 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $958139571, %ebx
+  movl 208(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2641,48 +2639,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1322822218, %r8d
-  movl 212 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1322822218, %ebx
+  movl 212(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2690,48 +2688,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1537002063, %r8d
-  movl 216 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1537002063, %ebx
+  movl 216(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2739,48 +2737,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1747873779, %r8d
-  movl 220 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1747873779, %ebx
+  movl 220(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2788,48 +2786,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1955562222, %r8d
-  movl 224 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1955562222, %ebx
+  movl 224(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2837,48 +2835,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2024104815, %r8d
-  movl 228 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2024104815, %ebx
+  movl 228(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2886,48 +2884,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2227730452, %r8d
-  movl 232 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2227730452, %ebx
+  movl 232(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2935,48 +2933,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2361852424, %r8d
-  movl 236 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2361852424, %ebx
+  movl 236(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2984,48 +2982,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2428436474, %r8d
-  movl 240 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2428436474, %ebx
+  movl 240(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3033,48 +3031,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2756734187, %r8d
-  movl 244 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2756734187, %ebx
+  movl 244(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3082,48 +3080,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3204031479, %r8d
-  movl 248 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3204031479, %ebx
+  movl 248(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3131,1203 +3129,1215 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3329325298, %r8d
-  movl 252 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  movq 100(%rsp), %rcx
-  movl 0 (%rcx), %r8d
-  add %r11d, %r8d
-  movl %r8d, 0 (%rcx)
-  movl 4 (%rcx), %r8d
-  movl 44(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 4 (%rcx)
-  movl 8 (%rcx), %r8d
-  movl 48(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 8 (%rcx)
-  movl 12 (%rcx), %r8d
-  movl 52(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 12 (%rcx)
-  movl 16 (%rcx), %r8d
-  movl 56(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 16 (%rcx)
-  movl 20 (%rcx), %r8d
-  movl 60(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 20 (%rcx)
-  movl 24 (%rcx), %r8d
-  movl 64(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 24 (%rcx)
-  movl 28 (%rcx), %r8d
-  movl 68(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 28 (%rcx)
-  movl $0, 44(%rsp)
-  movl $0, 48(%rsp)
-  movl $0, 52(%rsp)
-  movl $0, 56(%rsp)
-  movl $0, 60(%rsp)
-  movl $0, 64(%rsp)
-  movl $0, 68(%rsp)
-  movl $0, 72(%rsp)
-  movl $0, 76(%rsp)
-  movl $0, 80(%rsp)
-  movl $0, 84(%rsp)
-  movl $0, 88(%rsp)
-  movl $0, 92(%rsp)
-  movl $0, 96(%rsp)
-  movl $0, 100(%rsp)
-  movl $0, 104(%rsp)
-  movl $0, 108(%rsp)
-  movl $0, 112(%rsp)
-  movl $0, 116(%rsp)
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3329325298, %ebx
+  movl 252(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  movl 60(%esp), %eax
+  movl 0(%eax), %ebx
+  add %ebp, %ebx
+  movl %ebx, 0(%eax)
+  movl 4(%eax), %ebx
+  movl 4(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 4(%eax)
+  movl 8(%eax), %ebx
+  movl 8(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 8(%eax)
+  movl 12(%eax), %ebx
+  movl 12(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 12(%eax)
+  movl 16(%eax), %ebx
+  movl 16(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 16(%eax)
+  movl 20(%eax), %ebx
+  movl 20(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 20(%eax)
+  movl 24(%eax), %ebx
+  movl 24(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 24(%eax)
+  movl 28(%eax), %ebx
+  movl 28(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 28(%eax)
+  movl 64(%esp), %ebp
+  movl 68(%esp), %ebx
+  movl 72(%esp), %esi
+  movl 76(%esp), %edi
+  movl $0, 4(%esp)
+  movl $0, 8(%esp)
+  movl $0, 12(%esp)
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
+  movl $0, 32(%esp)
+  movl $0, 36(%esp)
+  movl $0, 40(%esp)
+  movl $0, 44(%esp)
+  movl $0, 48(%esp)
+  movl $0, 52(%esp)
+  movl $0, 56(%esp)
+  movl $0, 60(%esp)
+  movl $0, 64(%esp)
+  movl $0, 68(%esp)
+  movl $0, 72(%esp)
+  movl $0, 76(%esp)
ret

.global sha256_main_i_SHA256_ComputeInitialWs
sha256_main_i_SHA256_ComputeInitialWs:
-  mov %rdi, %r10
-  add %rsi, %r10
-  mov %rdx, %r9
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%r10), %eax
+  movl %ebp, 16(%esp)
+  movl %ebx, 20(%esp)
+  movl %esi, 24(%esp)
+  movl %edi, 28(%esp)
+  movl 4(%esp), %edi
+  movl 8(%esp), %eax
+  add %eax, %edi
+  movl 12(%esp), %esi
+  movl 0(%edi), %eax
bswap %eax
-  movl 4 (%r10), %r8d
-  bswap %r8d
-  movl 8 (%r10), %ecx
+  movl 4(%edi), %ebx
+  bswap %ebx
+  movl 8(%edi), %ecx
bswap %ecx
-  movl 12 (%r10), %edx
+  movl 12(%edi), %edx
bswap %edx
-  movl 16 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 0 (%r9)
-  movl %r8d, 4 (%r9)
-  movl %ecx, 8 (%r9)
-  movl %edx, 12 (%r9)
-  movl %r11d, 16 (%r9)
-  movl 20 (%r10), %eax
+  movl 16(%edi), %ebp
+  bswap %ebp
+  movl %eax, 0(%esi)
+  movl %ebx, 4(%esi)
+  movl %ecx, 8(%esi)
+  movl %edx, 12(%esi)
+  movl %ebp, 16(%esi)
+  movl 20(%edi), %eax
bswap %eax
-  movl 24 (%r10), %r8d
-  bswap %r8d
-  movl 28 (%r10), %ecx
+  movl 24(%edi), %ebx
+  bswap %ebx
+  movl 28(%edi), %ecx
bswap %ecx
-  movl 32 (%r10), %edx
+  movl 32(%edi), %edx
bswap %edx
-  movl 36 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 20 (%r9)
-  movl %r8d, 24 (%r9)
-  movl %ecx, 28 (%r9)
-  movl %edx, 32 (%r9)
-  movl %r11d, 36 (%r9)
-  movl 40 (%r10), %eax
+  movl 36(%edi), %ebp
+  bswap %ebp
+  movl %eax, 20(%esi)
+  movl %ebx, 24(%esi)
+  movl %ecx, 28(%esi)
+  movl %edx, 32(%esi)
+  movl %ebp, 36(%esi)
+  movl 40(%edi), %eax
bswap %eax
-  movl 44 (%r10), %r8d
-  bswap %r8d
-  movl 48 (%r10), %ecx
+  movl 44(%edi), %ebx
+  bswap %ebx
+  movl 48(%edi), %ecx
bswap %ecx
-  movl 52 (%r10), %edx
+  movl 52(%edi), %edx
bswap %edx
-  movl 56 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 40 (%r9)
-  movl %r8d, 44 (%r9)
-  movl %ecx, 48 (%r9)
-  movl %edx, 52 (%r9)
-  movl %r11d, 56 (%r9)
-  movl 60 (%r10), %eax
+  movl 56(%edi), %ebp
+  bswap %ebp
+  movl %eax, 40(%esi)
+  movl %ebx, 44(%esi)
+  movl %ecx, 48(%esi)
+  movl %edx, 52(%esi)
+  movl %ebp, 56(%esi)
+  movl 60(%edi), %eax
bswap %eax
-  movl %eax, 60 (%r9)
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  movl %eax, 60(%esi)
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 36 (%r9), %edx
-  add %r8d, %edx
-  movl 4 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 36(%esi), %edx
+  add %ebx, %edx
+  movl 4(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 0 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 0(%esi), %eax
add %eax, %edx
-  movl %edx, 64 (%r9)
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 64(%esi)
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 40 (%r9), %edx
-  add %r8d, %edx
-  movl 8 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 40(%esi), %edx
+  add %ebx, %edx
+  movl 8(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 4 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 4(%esi), %eax
add %eax, %edx
-  movl %edx, 68 (%r9)
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 68(%esi)
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 44 (%r9), %edx
-  add %r8d, %edx
-  movl 12 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 44(%esi), %edx
+  add %ebx, %edx
+  movl 12(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 8 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 8(%esi), %eax
add %eax, %edx
-  movl %edx, 72 (%r9)
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 72(%esi)
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 48 (%r9), %edx
-  add %r8d, %edx
-  movl 16 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 48(%esi), %edx
+  add %ebx, %edx
+  movl 16(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 12 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 12(%esi), %eax
add %eax, %edx
-  movl %edx, 76 (%r9)
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 76(%esi)
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 52 (%r9), %edx
-  add %r8d, %edx
-  movl 20 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 52(%esi), %edx
+  add %ebx, %edx
+  movl 20(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 16 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 16(%esi), %eax
add %eax, %edx
-  movl %edx, 80 (%r9)
-  movl 76 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 80(%esi)
+  movl 76(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 56 (%r9), %edx
-  add %r8d, %edx
-  movl 24 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 56(%esi), %edx
+  add %ebx, %edx
+  movl 24(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 20 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 20(%esi), %eax
add %eax, %edx
-  movl %edx, 84 (%r9)
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 84(%esi)
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 60 (%r9), %edx
-  add %r8d, %edx
-  movl 28 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 60(%esi), %edx
+  add %ebx, %edx
+  movl 28(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 24 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 24(%esi), %eax
add %eax, %edx
-  movl %edx, 88 (%r9)
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 88(%esi)
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 64 (%r9), %edx
-  add %r8d, %edx
-  movl 32 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 64(%esi), %edx
+  add %ebx, %edx
+  movl 32(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 28 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 28(%esi), %eax
add %eax, %edx
-  movl %edx, 92 (%r9)
-  movl 88 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 92(%esi)
+  movl 88(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 68 (%r9), %edx
-  add %r8d, %edx
-  movl 36 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 68(%esi), %edx
+  add %ebx, %edx
+  movl 36(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 32 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 32(%esi), %eax
add %eax, %edx
-  movl %edx, 96 (%r9)
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 96(%esi)
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 72 (%r9), %edx
-  add %r8d, %edx
-  movl 40 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 72(%esi), %edx
+  add %ebx, %edx
+  movl 40(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 36 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 36(%esi), %eax
add %eax, %edx
-  movl %edx, 100 (%r9)
-  movl 96 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 100(%esi)
+  movl 96(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 76 (%r9), %edx
-  add %r8d, %edx
-  movl 44 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 76(%esi), %edx
+  add %ebx, %edx
+  movl 44(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 40 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 40(%esi), %eax
add %eax, %edx
-  movl %edx, 104 (%r9)
-  movl 100 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 104(%esi)
+  movl 100(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 80 (%r9), %edx
-  add %r8d, %edx
-  movl 48 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 80(%esi), %edx
+  add %ebx, %edx
+  movl 48(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 44 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 44(%esi), %eax
add %eax, %edx
-  movl %edx, 108 (%r9)
-  movl 104 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 108(%esi)
+  movl 104(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 84 (%r9), %edx
-  add %r8d, %edx
-  movl 52 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 84(%esi), %edx
+  add %ebx, %edx
+  movl 52(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 48 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 48(%esi), %eax
add %eax, %edx
-  movl %edx, 112 (%r9)
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 112(%esi)
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 88 (%r9), %edx
-  add %r8d, %edx
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 88(%esi), %edx
+  add %ebx, %edx
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 52 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 52(%esi), %eax
add %eax, %edx
-  movl %edx, 116 (%r9)
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 116(%esi)
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 92 (%r9), %edx
-  add %r8d, %edx
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 92(%esi), %edx
+  add %ebx, %edx
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 56 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 56(%esi), %eax
add %eax, %edx
-  movl %edx, 120 (%r9)
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 120(%esi)
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 96 (%r9), %edx
-  add %r8d, %edx
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 96(%esi), %edx
+  add %ebx, %edx
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 60 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 60(%esi), %eax
add %eax, %edx
-  movl %edx, 124 (%r9)
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 124(%esi)
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 100 (%r9), %edx
-  add %r8d, %edx
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 100(%esi), %edx
+  add %ebx, %edx
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 64 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 64(%esi), %eax
add %eax, %edx
-  movl %edx, 128 (%r9)
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 128(%esi)
+  movl 124(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 104 (%r9), %edx
-  add %r8d, %edx
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 104(%esi), %edx
+  add %ebx, %edx
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 68 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 68(%esi), %eax
add %eax, %edx
-  movl %edx, 132 (%r9)
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 132(%esi)
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 108 (%r9), %edx
-  add %r8d, %edx
-  movl 76 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 108(%esi), %edx
+  add %ebx, %edx
+  movl 76(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 72 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 72(%esi), %eax
add %eax, %edx
-  movl %edx, 136 (%r9)
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 136(%esi)
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 112 (%r9), %edx
-  add %r8d, %edx
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 112(%esi), %edx
+  add %ebx, %edx
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 76 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 76(%esi), %eax
add %eax, %edx
-  movl %edx, 140 (%r9)
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 140(%esi)
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 116 (%r9), %edx
-  add %r8d, %edx
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 116(%esi), %edx
+  add %ebx, %edx
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 80 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 80(%esi), %eax
add %eax, %edx
-  movl %edx, 144 (%r9)
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 144(%esi)
+  movl 140(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 120 (%r9), %edx
-  add %r8d, %edx
-  movl 88 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 120(%esi), %edx
+  add %ebx, %edx
+  movl 88(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 84 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 84(%esi), %eax
add %eax, %edx
-  movl %edx, 148 (%r9)
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 148(%esi)
+  movl 144(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 124 (%r9), %edx
-  add %r8d, %edx
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 124(%esi), %edx
+  add %ebx, %edx
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 88 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 88(%esi), %eax
add %eax, %edx
-  movl %edx, 152 (%r9)
-  movl 148 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 152(%esi)
+  movl 148(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 128 (%r9), %edx
-  add %r8d, %edx
-  movl 96 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 128(%esi), %edx
+  add %ebx, %edx
+  movl 96(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 92 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 92(%esi), %eax
add %eax, %edx
-  movl %edx, 156 (%r9)
-  movl 152 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 156(%esi)
+  movl 152(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 132 (%r9), %edx
-  add %r8d, %edx
-  movl 100 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 132(%esi), %edx
+  add %ebx, %edx
+  movl 100(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 96 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 96(%esi), %eax
add %eax, %edx
-  movl %edx, 160 (%r9)
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 160(%esi)
+  movl 156(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 136 (%r9), %edx
-  add %r8d, %edx
-  movl 104 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 136(%esi), %edx
+  add %ebx, %edx
+  movl 104(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 100 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 100(%esi), %eax
add %eax, %edx
-  movl %edx, 164 (%r9)
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 164(%esi)
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 140 (%r9), %edx
-  add %r8d, %edx
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 140(%esi), %edx
+  add %ebx, %edx
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 104 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 104(%esi), %eax
add %eax, %edx
-  movl %edx, 168 (%r9)
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 168(%esi)
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 144 (%r9), %edx
-  add %r8d, %edx
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 144(%esi), %edx
+  add %ebx, %edx
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 108 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 108(%esi), %eax
add %eax, %edx
-  movl %edx, 172 (%r9)
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 172(%esi)
+  movl 168(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 148 (%r9), %edx
-  add %r8d, %edx
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 148(%esi), %edx
+  add %ebx, %edx
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 112 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 112(%esi), %eax
add %eax, %edx
-  movl %edx, 176 (%r9)
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 176(%esi)
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 152 (%r9), %edx
-  add %r8d, %edx
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 152(%esi), %edx
+  add %ebx, %edx
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 116 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 116(%esi), %eax
add %eax, %edx
-  movl %edx, 180 (%r9)
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 180(%esi)
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 156 (%r9), %edx
-  add %r8d, %edx
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 156(%esi), %edx
+  add %ebx, %edx
+  movl 124(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 120 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 120(%esi), %eax
add %eax, %edx
-  movl %edx, 184 (%r9)
-  movl 180 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 184(%esi)
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 160 (%r9), %edx
-  add %r8d, %edx
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 160(%esi), %edx
+  add %ebx, %edx
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 124 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 124(%esi), %eax
add %eax, %edx
-  movl %edx, 188 (%r9)
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 188(%esi)
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 164 (%r9), %edx
-  add %r8d, %edx
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 164(%esi), %edx
+  add %ebx, %edx
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 128 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 128(%esi), %eax
add %eax, %edx
-  movl %edx, 192 (%r9)
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 192(%esi)
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 168 (%r9), %edx
-  add %r8d, %edx
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 168(%esi), %edx
+  add %ebx, %edx
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 132 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 132(%esi), %eax
add %eax, %edx
-  movl %edx, 196 (%r9)
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 196(%esi)
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 172 (%r9), %edx
-  add %r8d, %edx
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 172(%esi), %edx
+  add %ebx, %edx
+  movl 140(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 136 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 136(%esi), %eax
add %eax, %edx
-  movl %edx, 200 (%r9)
-  movl 196 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 200(%esi)
+  movl 196(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 176 (%r9), %edx
-  add %r8d, %edx
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 176(%esi), %edx
+  add %ebx, %edx
+  movl 144(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 140 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 140(%esi), %eax
add %eax, %edx
-  movl %edx, 204 (%r9)
-  movl 200 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 204(%esi)
+  movl 200(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 180 (%r9), %edx
-  add %r8d, %edx
-  movl 148 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 180(%esi), %edx
+  add %ebx, %edx
+  movl 148(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 144 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 144(%esi), %eax
add %eax, %edx
-  movl %edx, 208 (%r9)
-  movl 204 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 208(%esi)
+  movl 204(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 184 (%r9), %edx
-  add %r8d, %edx
-  movl 152 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 184(%esi), %edx
+  add %ebx, %edx
+  movl 152(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 148 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 148(%esi), %eax
add %eax, %edx
-  movl %edx, 212 (%r9)
-  movl 208 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 212(%esi)
+  movl 208(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 188 (%r9), %edx
-  add %r8d, %edx
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 188(%esi), %edx
+  add %ebx, %edx
+  movl 156(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 152 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 152(%esi), %eax
add %eax, %edx
-  movl %edx, 216 (%r9)
-  movl 212 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 216(%esi)
+  movl 212(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 192 (%r9), %edx
-  add %r8d, %edx
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 192(%esi), %edx
+  add %ebx, %edx
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 156 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 156(%esi), %eax
add %eax, %edx
-  movl %edx, 220 (%r9)
-  movl 216 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 220(%esi)
+  movl 216(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 196 (%r9), %edx
-  add %r8d, %edx
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 196(%esi), %edx
+  add %ebx, %edx
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 160 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 160(%esi), %eax
add %eax, %edx
-  movl %edx, 224 (%r9)
-  movl 220 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 224(%esi)
+  movl 220(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 200 (%r9), %edx
-  add %r8d, %edx
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 200(%esi), %edx
+  add %ebx, %edx
+  movl 168(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 164 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 164(%esi), %eax
add %eax, %edx
-  movl %edx, 228 (%r9)
-  movl 224 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 228(%esi)
+  movl 224(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 204 (%r9), %edx
-  add %r8d, %edx
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 204(%esi), %edx
+  add %ebx, %edx
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 168 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 168(%esi), %eax
add %eax, %edx
-  movl %edx, 232 (%r9)
-  movl 228 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 232(%esi)
+  movl 228(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 208 (%r9), %edx
-  add %r8d, %edx
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 208(%esi), %edx
+  add %ebx, %edx
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 172 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 172(%esi), %eax
add %eax, %edx
-  movl %edx, 236 (%r9)
-  movl 232 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 236(%esi)
+  movl 232(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 212 (%r9), %edx
-  add %r8d, %edx
-  movl 180 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 212(%esi), %edx
+  add %ebx, %edx
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 176 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 176(%esi), %eax
add %eax, %edx
-  movl %edx, 240 (%r9)
-  movl 236 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 240(%esi)
+  movl 236(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 216 (%r9), %edx
-  add %r8d, %edx
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 216(%esi), %edx
+  add %ebx, %edx
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 180 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 180(%esi), %eax
add %eax, %edx
-  movl %edx, 244 (%r9)
-  movl 240 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 244(%esi)
+  movl 240(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 220 (%r9), %edx
-  add %r8d, %edx
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 220(%esi), %edx
+  add %ebx, %edx
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 184 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 184(%esi), %eax
add %eax, %edx
-  movl %edx, 248 (%r9)
-  movl 244 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 248(%esi)
+  movl 244(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 224 (%r9), %edx
-  add %r8d, %edx
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 224(%esi), %edx
+  add %ebx, %edx
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 188 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 188(%esi), %eax
add %eax, %edx
-  movl %edx, 252 (%r9)
+  movl %edx, 252(%esi)
+  movl 16(%esp), %ebp
+  movl 20(%esp), %ebx
+  movl 24(%esp), %esi
+  movl 28(%esp), %edi
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
ret


diff --git a/secure_api/vale/asm/sha256-x86_64.S b/secure_api/vale/asm/sha256-x86_64.S
index c81e83af..363196fa 100644
--- a/secure_api/vale/asm/sha256-x86_64.S
+++ b/secure_api/vale/asm/sha256-x86_64.S
@@ -1,41 +1,40 @@
.text
-.global sha256_main_i_SHA256_Compute64Steps
-sha256_main_i_SHA256_Compute64Steps:
-  mov %rdx, %r9
-  movq %rcx, 100(%rsp)
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%rcx), %r11d
-  movl 4 (%rcx), %r8d
-  movl %r8d, 44(%rsp)
-  movl 8 (%rcx), %r8d
-  movl %r8d, 48(%rsp)
-  movl 12 (%rcx), %r8d
-  movl %r8d, 52(%rsp)
-  movl 16 (%rcx), %r8d
-  movl %r8d, 56(%rsp)
-  movl 20 (%rcx), %r8d
-  movl %r8d, 60(%rsp)
-  movl 24 (%rcx), %r8d
-  movl %r8d, 64(%rsp)
-  movl 28 (%rcx), %r8d
-  movl %r8d, 68(%rsp)
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r10d
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+.global _sha256_main_i_SHA256_Compute64Steps
+_sha256_main_i_SHA256_Compute64Steps:
+  movl %ebp, 64(%esp)
+  movl %ebx, 68(%esp)
+  movl %esi, 72(%esp)
+  movl %edi, 76(%esp)
+  movl 8(%esp), %esi
+  movl 4(%esp), %eax
+  movl %eax, 60(%esp)
+  movl 0(%eax), %ebp
+  movl 4(%eax), %ebx
+  movl %ebx, 4(%esp)
+  movl 8(%eax), %ebx
+  movl %ebx, 8(%esp)
+  movl 12(%eax), %ebx
+  movl %ebx, 12(%esp)
+  movl 16(%eax), %ebx
+  movl %ebx, 16(%esp)
+  movl 20(%eax), %ebx
+  movl %ebx, 20(%esp)
+  movl 24(%eax), %ebx
+  movl %ebx, 24(%esp)
+  movl 28(%eax), %ebx
+  movl %ebx, 28(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -43,48 +42,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1116352408, %r8d
-  movl 0 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1116352408, %ebx
+  movl 0(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -92,48 +91,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1899447441, %r8d
-  movl 4 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1899447441, %ebx
+  movl 4(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -141,48 +140,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3049323471, %r8d
-  movl 8 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3049323471, %ebx
+  movl 8(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -190,48 +189,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3921009573, %r8d
-  movl 12 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3921009573, %ebx
+  movl 12(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -239,48 +238,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $961987163, %r8d
-  movl 16 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $961987163, %ebx
+  movl 16(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -288,48 +287,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1508970993, %r8d
-  movl 20 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1508970993, %ebx
+  movl 20(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -337,48 +336,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2453635748, %r8d
-  movl 24 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2453635748, %ebx
+  movl 24(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -386,48 +385,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2870763221, %r8d
-  movl 28 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2870763221, %ebx
+  movl 28(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -435,48 +434,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3624381080, %r8d
-  movl 32 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3624381080, %ebx
+  movl 32(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -484,48 +483,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $310598401, %r8d
-  movl 36 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $310598401, %ebx
+  movl 36(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -533,48 +532,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $607225278, %r8d
-  movl 40 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $607225278, %ebx
+  movl 40(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -582,48 +581,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1426881987, %r8d
-  movl 44 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1426881987, %ebx
+  movl 44(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -631,48 +630,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1925078388, %r8d
-  movl 48 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1925078388, %ebx
+  movl 48(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -680,48 +679,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2162078206, %r8d
-  movl 52 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2162078206, %ebx
+  movl 52(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -729,48 +728,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2614888103, %r8d
-  movl 56 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2614888103, %ebx
+  movl 56(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -778,48 +777,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3248222580, %r8d
-  movl 60 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3248222580, %ebx
+  movl 60(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -827,48 +826,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3835390401, %r8d
-  movl 64 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3835390401, %ebx
+  movl 64(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -876,48 +875,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4022224774, %r8d
-  movl 68 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4022224774, %ebx
+  movl 68(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -925,48 +924,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $264347078, %r8d
-  movl 72 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $264347078, %ebx
+  movl 72(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -974,48 +973,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $604807628, %r8d
-  movl 76 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $604807628, %ebx
+  movl 76(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1023,48 +1022,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $770255983, %r8d
-  movl 80 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $770255983, %ebx
+  movl 80(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1072,48 +1071,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1249150122, %r8d
-  movl 84 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1249150122, %ebx
+  movl 84(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1121,48 +1120,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1555081692, %r8d
-  movl 88 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1555081692, %ebx
+  movl 88(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1170,48 +1169,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1996064986, %r8d
-  movl 92 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1996064986, %ebx
+  movl 92(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1219,48 +1218,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2554220882, %r8d
-  movl 96 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2554220882, %ebx
+  movl 96(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1268,48 +1267,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2821834349, %r8d
-  movl 100 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2821834349, %ebx
+  movl 100(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1317,48 +1316,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2952996808, %r8d
-  movl 104 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2952996808, %ebx
+  movl 104(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1366,48 +1365,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3210313671, %r8d
-  movl 108 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3210313671, %ebx
+  movl 108(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1415,48 +1414,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3336571891, %r8d
-  movl 112 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3336571891, %ebx
+  movl 112(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1464,48 +1463,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3584528711, %r8d
-  movl 116 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3584528711, %ebx
+  movl 116(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1513,48 +1512,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $113926993, %r8d
-  movl 120 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $113926993, %ebx
+  movl 120(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1562,48 +1561,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $338241895, %r8d
-  movl 124 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $338241895, %ebx
+  movl 124(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1611,48 +1610,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $666307205, %r8d
-  movl 128 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $666307205, %ebx
+  movl 128(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1660,48 +1659,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $773529912, %r8d
-  movl 132 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $773529912, %ebx
+  movl 132(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1709,48 +1708,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1294757372, %r8d
-  movl 136 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1294757372, %ebx
+  movl 136(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1758,48 +1757,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1396182291, %r8d
-  movl 140 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1396182291, %ebx
+  movl 140(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1807,48 +1806,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1695183700, %r8d
-  movl 144 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1695183700, %ebx
+  movl 144(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1856,48 +1855,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1986661051, %r8d
-  movl 148 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1986661051, %ebx
+  movl 148(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1905,48 +1904,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2177026350, %r8d
-  movl 152 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2177026350, %ebx
+  movl 152(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -1954,48 +1953,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2456956037, %r8d
-  movl 156 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2456956037, %ebx
+  movl 156(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2003,48 +2002,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2730485921, %r8d
-  movl 160 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2730485921, %ebx
+  movl 160(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2052,48 +2051,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2820302411, %r8d
-  movl 164 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2820302411, %ebx
+  movl 164(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2101,48 +2100,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3259730800, %r8d
-  movl 168 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3259730800, %ebx
+  movl 168(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2150,48 +2149,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3345764771, %r8d
-  movl 172 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3345764771, %ebx
+  movl 172(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2199,48 +2198,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3516065817, %r8d
-  movl 176 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3516065817, %ebx
+  movl 176(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2248,48 +2247,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3600352804, %r8d
-  movl 180 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3600352804, %ebx
+  movl 180(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2297,48 +2296,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $4094571909, %r8d
-  movl 184 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $4094571909, %ebx
+  movl 184(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2346,48 +2345,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $275423344, %r8d
-  movl 188 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $275423344, %ebx
+  movl 188(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2395,48 +2394,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
+ magenta 'New assemblies from Vale, diff is above'
-  mov %r8d, %r10d
+  mov %ebx, %edx
+ color 'New assemblies from Vale, diff is above' 5
+  mov %ebx, %edi
+ '[' -t 1 ']'
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
+ echo New assemblies from Vale, diff is above
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $430227734, %r8d
-  movl 192 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $430227734, %ebx
+  movl 192(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2444,48 +2443,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $506948616, %r8d
-  movl 196 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $506948616, %ebx
+  movl 196(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2493,48 +2492,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $659060556, %r8d
-  movl 200 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $659060556, %ebx
+  movl 200(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2542,48 +2541,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $883997877, %r8d
-  movl 204 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $883997877, %ebx
+  movl 204(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2591,48 +2590,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
File "Hacl_UInt8.mli", line 1, characters 13-26:
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
Error: Unbound module FStar_UInt8
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
make[2]: *** [Makefile:18: hacllib.cmxa] Error 2
-  mov %r8d, %r10d
+  mov %ebx, %edx
make[2]: Target 'all' not remade because of errors.
+  mov %ebx, %edi
make[1]: *** [Makefile:13: lib] Error 2
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
make[1]: Target 'all' not remade because of errors.
-  ror $25, %r8d
make: *** [Makefile:96: extract-specs] Error 2
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $958139571, %r8d
-  movl 208 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $958139571, %ebx
+  movl 208(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2640,48 +2639,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1322822218, %r8d
-  movl 212 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1322822218, %ebx
+  movl 212(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2689,48 +2688,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1537002063, %r8d
-  movl 216 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1537002063, %ebx
+  movl 216(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2738,48 +2737,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1747873779, %r8d
-  movl 220 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1747873779, %ebx
+  movl 220(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2787,48 +2786,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $1955562222, %r8d
-  movl 224 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $1955562222, %ebx
+  movl 224(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2836,48 +2835,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2024104815, %r8d
-  movl 228 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2024104815, %ebx
+  movl 228(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2885,48 +2884,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2227730452, %r8d
-  movl 232 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2227730452, %ebx
+  movl 232(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2934,48 +2933,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2361852424, %r8d
-  movl 236 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2361852424, %ebx
+  movl 236(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -2983,48 +2982,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2428436474, %r8d
-  movl 240 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2428436474, %ebx
+  movl 240(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3032,48 +3031,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $2756734187, %r8d
-  movl 244 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  mov %r11d, %eax
-  movl %eax, 72(%rsp)
-  movl 44(%rsp), %r8d
-  movl %r8d, 76(%rsp)
-  movl 48(%rsp), %ecx
-  movl %ecx, 80(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $2756734187, %ebx
+  movl 244(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  mov %ebp, %eax
+  movl %eax, 32(%esp)
+  movl 4(%esp), %ebx
+  movl %ebx, 36(%esp)
+  movl 8(%esp), %ecx
+  movl %ecx, 40(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3081,48 +3080,48 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 56(%rsp), %r8d
-  movl %r8d, 88(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 16(%esp), %ebx
+  movl %ebx, 48(%esp)
+  mov %ebx, %edx
not %edx
-  movl 64(%rsp), %ecx
-  movl %ecx, 96(%rsp)
+  movl 24(%esp), %ecx
+  movl %ecx, 56(%esp)
and %ecx, %edx
-  movl 60(%rsp), %ecx
-  movl %ecx, 92(%rsp)
-  and %r8d, %ecx
+  movl 20(%esp), %ecx
+  movl %ecx, 52(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 68(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3204031479, %r8d
-  movl 248 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 52(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 84(%rsp)
-  mov %r11d, %eax
-  movl %eax, 44(%rsp)
-  movl 72(%rsp), %r8d
-  movl %r8d, 48(%rsp)
-  movl 76(%rsp), %ecx
-  movl %ecx, 52(%rsp)
-  mov %r8d, %edx
-  and %eax, %r8d
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 28(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3204031479, %ebx
+  movl 248(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 12(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 44(%esp)
+  mov %ebp, %eax
+  movl %eax, 4(%esp)
+  movl 32(%esp), %ebx
+  movl %ebx, 8(%esp)
+  movl 36(%esp), %ecx
+  movl %ecx, 12(%esp)
+  mov %ebx, %edx
+  and %eax, %ebx
and %ecx, %edx
and %eax, %ecx
-  xor %ecx, %r8d
-  xor %edx, %r8d
+  xor %ecx, %ebx
+  xor %edx, %ebx
mov %eax, %ecx
mov %eax, %edx
ror $2, %eax
@@ -3130,1203 +3129,1215 @@ sha256_main_i_SHA256_Compute64Steps:
xor %ecx, %eax
ror $22, %edx
xor %edx, %eax
-  add %r8d, %eax
-  movl 84(%rsp), %r8d
-  movl %r8d, 60(%rsp)
-  mov %r8d, %edx
+  add %ebx, %eax
+  movl 44(%esp), %ebx
+  movl %ebx, 20(%esp)
+  mov %ebx, %edx
not %edx
-  movl 92(%rsp), %ecx
-  movl %ecx, 68(%rsp)
+  movl 52(%esp), %ecx
+  movl %ecx, 28(%esp)
and %ecx, %edx
-  movl 88(%rsp), %ecx
-  movl %ecx, 64(%rsp)
-  and %r8d, %ecx
+  movl 48(%esp), %ecx
+  movl %ecx, 24(%esp)
+  and %ebx, %ecx
xor %edx, %ecx
-  mov %r8d, %edx
-  mov %r8d, %r10d
+  mov %ebx, %edx
+  mov %ebx, %edi
ror $6, %edx
-  ror $11, %r10d
-  xor %r10d, %edx
-  ror $25, %r8d
-  xor %r8d, %edx
-  movl 96(%rsp), %r8d
-  add %edx, %r8d
-  add %ecx, %r8d
-  add $3329325298, %r8d
-  movl 252 (%r9), %ecx
-  add %ecx, %r8d
-  add %r8d, %eax
-  mov %eax, %r11d
-  movl 80(%rsp), %eax
-  add %r8d, %eax
-  movl %eax, 56(%rsp)
-  movq 100(%rsp), %rcx
-  movl 0 (%rcx), %r8d
-  add %r11d, %r8d
-  movl %r8d, 0 (%rcx)
-  movl 4 (%rcx), %r8d
-  movl 44(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 4 (%rcx)
-  movl 8 (%rcx), %r8d
-  movl 48(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 8 (%rcx)
-  movl 12 (%rcx), %r8d
-  movl 52(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 12 (%rcx)
-  movl 16 (%rcx), %r8d
-  movl 56(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 16 (%rcx)
-  movl 20 (%rcx), %r8d
-  movl 60(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 20 (%rcx)
-  movl 24 (%rcx), %r8d
-  movl 64(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 24 (%rcx)
-  movl 28 (%rcx), %r8d
-  movl 68(%rsp), %r11d
-  add %r11d, %r8d
-  movl %r8d, 28 (%rcx)
-  movl $0, 44(%rsp)
-  movl $0, 48(%rsp)
-  movl $0, 52(%rsp)
-  movl $0, 56(%rsp)
-  movl $0, 60(%rsp)
-  movl $0, 64(%rsp)
-  movl $0, 68(%rsp)
-  movl $0, 72(%rsp)
-  movl $0, 76(%rsp)
-  movl $0, 80(%rsp)
-  movl $0, 84(%rsp)
-  movl $0, 88(%rsp)
-  movl $0, 92(%rsp)
-  movl $0, 96(%rsp)
-  movl $0, 100(%rsp)
-  movl $0, 104(%rsp)
-  movl $0, 108(%rsp)
-  movl $0, 112(%rsp)
-  movl $0, 116(%rsp)
+  ror $11, %edi
+  xor %edi, %edx
+  ror $25, %ebx
+  xor %ebx, %edx
+  movl 56(%esp), %ebx
+  add %edx, %ebx
+  add %ecx, %ebx
+  add $3329325298, %ebx
+  movl 252(%esi), %ecx
+  add %ecx, %ebx
+  add %ebx, %eax
+  mov %eax, %ebp
+  movl 40(%esp), %eax
+  add %ebx, %eax
+  movl %eax, 16(%esp)
+  movl 60(%esp), %eax
+  movl 0(%eax), %ebx
+  add %ebp, %ebx
+  movl %ebx, 0(%eax)
+  movl 4(%eax), %ebx
+  movl 4(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 4(%eax)
+  movl 8(%eax), %ebx
+  movl 8(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 8(%eax)
+  movl 12(%eax), %ebx
+  movl 12(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 12(%eax)
+  movl 16(%eax), %ebx
+  movl 16(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 16(%eax)
+  movl 20(%eax), %ebx
+  movl 20(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 20(%eax)
+  movl 24(%eax), %ebx
+  movl 24(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 24(%eax)
+  movl 28(%eax), %ebx
+  movl 28(%esp), %ebp
+  add %ebp, %ebx
+  movl %ebx, 28(%eax)
+  movl 64(%esp), %ebp
+  movl 68(%esp), %ebx
+  movl 72(%esp), %esi
+  movl 76(%esp), %edi
+  movl $0, 4(%esp)
+  movl $0, 8(%esp)
+  movl $0, 12(%esp)
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
+  movl $0, 32(%esp)
+  movl $0, 36(%esp)
+  movl $0, 40(%esp)
+  movl $0, 44(%esp)
+  movl $0, 48(%esp)
+  movl $0, 52(%esp)
+  movl $0, 56(%esp)
+  movl $0, 60(%esp)
+  movl $0, 64(%esp)
+  movl $0, 68(%esp)
+  movl $0, 72(%esp)
+  movl $0, 76(%esp)
ret

-.global sha256_main_i_SHA256_ComputeInitialWs
-sha256_main_i_SHA256_ComputeInitialWs:
-  mov %rcx, %r10
-  add %rdx, %r10
-  mov %r8, %r9
-  mov $0, %eax
-  mov $0, %ecx
-  mov $0, %edx
-  mov $0, %r8d
-  mov $0, %r11d
-  movl 0 (%r10), %eax
+.global _sha256_main_i_SHA256_ComputeInitialWs
+_sha256_main_i_SHA256_ComputeInitialWs:
+  movl %ebp, 16(%esp)
+  movl %ebx, 20(%esp)
+  movl %esi, 24(%esp)
+  movl %edi, 28(%esp)
+  movl 4(%esp), %edi
+  movl 8(%esp), %eax
+  add %eax, %edi
+  movl 12(%esp), %esi
+  movl 0(%edi), %eax
bswap %eax
-  movl 4 (%r10), %r8d
-  bswap %r8d
-  movl 8 (%r10), %ecx
+  movl 4(%edi), %ebx
+  bswap %ebx
+  movl 8(%edi), %ecx
bswap %ecx
-  movl 12 (%r10), %edx
+  movl 12(%edi), %edx
bswap %edx
-  movl 16 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 0 (%r9)
-  movl %r8d, 4 (%r9)
-  movl %ecx, 8 (%r9)
-  movl %edx, 12 (%r9)
-  movl %r11d, 16 (%r9)
-  movl 20 (%r10), %eax
+  movl 16(%edi), %ebp
+  bswap %ebp
+  movl %eax, 0(%esi)
+  movl %ebx, 4(%esi)
+  movl %ecx, 8(%esi)
+  movl %edx, 12(%esi)
+  movl %ebp, 16(%esi)
+  movl 20(%edi), %eax
bswap %eax
-  movl 24 (%r10), %r8d
-  bswap %r8d
-  movl 28 (%r10), %ecx
+  movl 24(%edi), %ebx
+  bswap %ebx
+  movl 28(%edi), %ecx
bswap %ecx
-  movl 32 (%r10), %edx
+  movl 32(%edi), %edx
bswap %edx
-  movl 36 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 20 (%r9)
-  movl %r8d, 24 (%r9)
-  movl %ecx, 28 (%r9)
-  movl %edx, 32 (%r9)
-  movl %r11d, 36 (%r9)
-  movl 40 (%r10), %eax
+  movl 36(%edi), %ebp
+  bswap %ebp
+  movl %eax, 20(%esi)
+  movl %ebx, 24(%esi)
+  movl %ecx, 28(%esi)
+  movl %edx, 32(%esi)
+  movl %ebp, 36(%esi)
+  movl 40(%edi), %eax
bswap %eax
-  movl 44 (%r10), %r8d
-  bswap %r8d
-  movl 48 (%r10), %ecx
+  movl 44(%edi), %ebx
+  bswap %ebx
+  movl 48(%edi), %ecx
bswap %ecx
-  movl 52 (%r10), %edx
+  movl 52(%edi), %edx
bswap %edx
-  movl 56 (%r10), %r11d
-  bswap %r11d
-  movl %eax, 40 (%r9)
-  movl %r8d, 44 (%r9)
-  movl %ecx, 48 (%r9)
-  movl %edx, 52 (%r9)
-  movl %r11d, 56 (%r9)
-  movl 60 (%r10), %eax
+  movl 56(%edi), %ebp
+  bswap %ebp
+  movl %eax, 40(%esi)
+  movl %ebx, 44(%esi)
+  movl %ecx, 48(%esi)
+  movl %edx, 52(%esi)
+  movl %ebp, 56(%esi)
+  movl 60(%edi), %eax
bswap %eax
-  movl %eax, 60 (%r9)
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  movl %eax, 60(%esi)
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 36 (%r9), %edx
-  add %r8d, %edx
-  movl 4 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 36(%esi), %edx
+  add %ebx, %edx
+  movl 4(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 0 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 0(%esi), %eax
add %eax, %edx
-  movl %edx, 64 (%r9)
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 64(%esi)
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 40 (%r9), %edx
-  add %r8d, %edx
-  movl 8 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 40(%esi), %edx
+  add %ebx, %edx
+  movl 8(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 4 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 4(%esi), %eax
add %eax, %edx
-  movl %edx, 68 (%r9)
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 68(%esi)
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 44 (%r9), %edx
-  add %r8d, %edx
-  movl 12 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 44(%esi), %edx
+  add %ebx, %edx
+  movl 12(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 8 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 8(%esi), %eax
add %eax, %edx
-  movl %edx, 72 (%r9)
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 72(%esi)
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 48 (%r9), %edx
-  add %r8d, %edx
-  movl 16 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 48(%esi), %edx
+  add %ebx, %edx
+  movl 16(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 12 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 12(%esi), %eax
add %eax, %edx
-  movl %edx, 76 (%r9)
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 76(%esi)
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 52 (%r9), %edx
-  add %r8d, %edx
-  movl 20 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 52(%esi), %edx
+  add %ebx, %edx
+  movl 20(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 16 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 16(%esi), %eax
add %eax, %edx
-  movl %edx, 80 (%r9)
-  movl 76 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 80(%esi)
+  movl 76(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 56 (%r9), %edx
-  add %r8d, %edx
-  movl 24 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 56(%esi), %edx
+  add %ebx, %edx
+  movl 24(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 20 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 20(%esi), %eax
add %eax, %edx
-  movl %edx, 84 (%r9)
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 84(%esi)
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 60 (%r9), %edx
-  add %r8d, %edx
-  movl 28 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 60(%esi), %edx
+  add %ebx, %edx
+  movl 28(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 24 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 24(%esi), %eax
add %eax, %edx
-  movl %edx, 88 (%r9)
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 88(%esi)
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 64 (%r9), %edx
-  add %r8d, %edx
-  movl 32 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 64(%esi), %edx
+  add %ebx, %edx
+  movl 32(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 28 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 28(%esi), %eax
add %eax, %edx
-  movl %edx, 92 (%r9)
-  movl 88 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 92(%esi)
+  movl 88(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 68 (%r9), %edx
-  add %r8d, %edx
-  movl 36 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 68(%esi), %edx
+  add %ebx, %edx
+  movl 36(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 32 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 32(%esi), %eax
add %eax, %edx
-  movl %edx, 96 (%r9)
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 96(%esi)
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 72 (%r9), %edx
-  add %r8d, %edx
-  movl 40 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 72(%esi), %edx
+  add %ebx, %edx
+  movl 40(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 36 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 36(%esi), %eax
add %eax, %edx
-  movl %edx, 100 (%r9)
-  movl 96 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 100(%esi)
+  movl 96(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 76 (%r9), %edx
-  add %r8d, %edx
-  movl 44 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 76(%esi), %edx
+  add %ebx, %edx
+  movl 44(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 40 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 40(%esi), %eax
add %eax, %edx
-  movl %edx, 104 (%r9)
-  movl 100 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 104(%esi)
+  movl 100(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 80 (%r9), %edx
-  add %r8d, %edx
-  movl 48 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 80(%esi), %edx
+  add %ebx, %edx
+  movl 48(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 44 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 44(%esi), %eax
add %eax, %edx
-  movl %edx, 108 (%r9)
-  movl 104 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 108(%esi)
+  movl 104(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 84 (%r9), %edx
-  add %r8d, %edx
-  movl 52 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 84(%esi), %edx
+  add %ebx, %edx
+  movl 52(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 48 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 48(%esi), %eax
add %eax, %edx
-  movl %edx, 112 (%r9)
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 112(%esi)
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 88 (%r9), %edx
-  add %r8d, %edx
-  movl 56 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 88(%esi), %edx
+  add %ebx, %edx
+  movl 56(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 52 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 52(%esi), %eax
add %eax, %edx
-  movl %edx, 116 (%r9)
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 116(%esi)
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 92 (%r9), %edx
-  add %r8d, %edx
-  movl 60 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 92(%esi), %edx
+  add %ebx, %edx
+  movl 60(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 56 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 56(%esi), %eax
add %eax, %edx
-  movl %edx, 120 (%r9)
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 120(%esi)
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 96 (%r9), %edx
-  add %r8d, %edx
-  movl 64 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 96(%esi), %edx
+  add %ebx, %edx
+  movl 64(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 60 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 60(%esi), %eax
add %eax, %edx
-  movl %edx, 124 (%r9)
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 124(%esi)
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 100 (%r9), %edx
-  add %r8d, %edx
-  movl 68 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 100(%esi), %edx
+  add %ebx, %edx
+  movl 68(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 64 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 64(%esi), %eax
add %eax, %edx
-  movl %edx, 128 (%r9)
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 128(%esi)
+  movl 124(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 104 (%r9), %edx
-  add %r8d, %edx
-  movl 72 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 104(%esi), %edx
+  add %ebx, %edx
+  movl 72(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 68 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 68(%esi), %eax
add %eax, %edx
-  movl %edx, 132 (%r9)
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 132(%esi)
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  movl 108 (%r9), %edx
-  add %r8d, %edx
-  movl 76 (%r9), %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  mov %eax, %r8d
+  xor %eax, %ebx
Called from file "lib/process.ml", line 215, characters 14-63
+  movl 108(%esi), %edx
+  add %ebx, %edx
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 76(%esi), %eax
+  mov %eax, %ebx
Called from file "src/Driver.ml", line 245, characters 10-40
mov %eax, %ecx
-  ror $7, %r8d
Called from file "src/Driver.ml", line 286, characters 11-51
+  ror $7, %ebx
ror $18, %ecx
Called from file "src/Kremlin.ml", line 326, characters 14-96
-  xor %ecx, %r8d
make[5]: *** [Makefile:82: poly-c/out.krml] Error 2
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
make[5]: Target 'extract-c' not remade because of errors.
-  add %r8d, %edx
make[4]: *** [Makefile:9: poly1305-c] Error 2
-  movl 72 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 72(%esi), %eax
add %eax, %edx
-  movl %edx, 136 (%r9)
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 136(%esi)
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 112 (%r9), %edx
-  add %r8d, %edx
-  movl 80 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 112(%esi), %edx
+  add %ebx, %edx
+  movl 80(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 76 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 76(%esi), %eax
add %eax, %edx
-  movl %edx, 140 (%r9)
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 140(%esi)
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 116 (%r9), %edx
-  add %r8d, %edx
-  movl 84 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 116(%esi), %edx
+  add %ebx, %edx
+  movl 84(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 80 (%r9), %eax
+  xor %eax, %ebx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  add %ebx, %edx
+  movl 80(%esi), %eax
add %eax, %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  movl %edx, 144 (%r9)
Called from file "lib/process.ml", line 215, characters 14-63
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 144(%esi)
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 140(%esi), %eax
Called from file "src/Driver.ml", line 245, characters 10-40
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
Called from file "src/Driver.ml", line 286, characters 11-51
+  ror $17, %ebx
Called from file "src/Kremlin.ml", line 326, characters 14-96
ror $19, %ecx
-  xor %ecx, %r8d
make[5]: *** [Makefile:48: chacha-c/out.krml] Error 2
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  movl 120 (%r9), %edx
-  add %r8d, %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  movl 88 (%r9), %eax
Called from file "lib/process.ml", line 215, characters 14-63
-  mov %eax, %r8d
+  xor %eax, %ebx
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 120(%esi), %edx
+  add %ebx, %edx
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 88(%esi), %eax
+  mov %eax, %ebx
Called from file "src/Driver.ml", line 286, characters 11-51
mov %eax, %ecx
-  ror $7, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  ror $7, %ebx
make[5]: *** [Makefile:66: salsa-c/out.krml] Error 2
ror $18, %ecx
-  xor %ecx, %r8d
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  xor %ecx, %ebx
shr $3, %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  xor %eax, %r8d
-  add %r8d, %edx
Called from file "lib/process.ml", line 215, characters 14-63
-  movl 84 (%r9), %eax
+  xor %eax, %ebx
Called from file "lib/process.ml", line 284, characters 6-65
+  add %ebx, %edx
+  movl 84(%esi), %eax
Called from file "src/Driver.ml", line 245, characters 10-40
add %eax, %edx
-  movl %edx, 148 (%r9)
Called from file "src/Driver.ml", line 286, characters 11-51
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  movl %edx, 148(%esi)
+  movl 144(%esi), %eax
make[5]: *** [Makefile:83: chacha-vec128-c/out.krml] Error 2
+  mov %eax, %ebx
mov %eax, %ecx
make[5]: Target 'extract-c' not remade because of errors.
-  ror $17, %r8d
+  ror $17, %ebx
make[4]: *** [Makefile:9: salsa-family-c] Error 2
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 124 (%r9), %edx
-  add %r8d, %edx
-  movl 92 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 124(%esi), %edx
+  add %ebx, %edx
+  movl 92(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 88 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  movl 88(%esi), %eax
add %eax, %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  movl %edx, 152 (%r9)
Called from file "lib/process.ml", line 215, characters 14-63
-  movl 148 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 152(%esi)
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 148(%esi), %eax
Called from file "src/Driver.ml", line 245, characters 10-40
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
Called from file "src/Driver.ml", line 286, characters 11-51
+  ror $17, %ebx
Called from file "src/Kremlin.ml", line 326, characters 14-96
ror $19, %ecx
-  xor %ecx, %r8d
make[5]: *** [Makefile:44: box-c/NaCl.c] Error 2
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  movl 128 (%r9), %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  add %r8d, %edx
-  movl 96 (%r9), %eax
Called from file "lib/process.ml", line 215, characters 14-63
-  mov %eax, %r8d
+  xor %eax, %ebx
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 128(%esi), %edx
+  add %ebx, %edx
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 96(%esi), %eax
+  mov %eax, %ebx
Called from file "src/Driver.ml", line 286, characters 11-51
mov %eax, %ecx
-  ror $7, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  ror $7, %ebx
ror $18, %ecx
make[5]: *** [Makefile:75: poly-c/out.krml] Error 2
-  xor %ecx, %r8d
+  xor %ecx, %ebx
make[5]: Target 'extract-c' not remade because of errors.
shr $3, %eax
-  xor %eax, %r8d
make[4]: *** [Makefile:9: poly1305_32-c] Error 2
-  add %r8d, %edx
-  movl 92 (%r9), %eax
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 92(%esi), %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
add %eax, %edx
Called from file "lib/process.ml", line 215, characters 14-63
-  movl %edx, 156 (%r9)
-  movl 152 (%r9), %eax
Called from file "lib/process.ml", line 284, characters 6-65
-  mov %eax, %r8d
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl %edx, 156(%esi)
+  movl 152(%esi), %eax
Called from file "src/Driver.ml", line 286, characters 11-51
+  mov %eax, %ebx
mov %eax, %ecx
Called from file "src/Kremlin.ml", line 326, characters 14-96
-  ror $17, %r8d
+  ror $17, %ebx
make[5]: *** [Makefile:49: aead-c/Hacl_Chacha20Poly1305.c] Error 2
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
shr $10, %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  xor %eax, %r8d
-  movl 132 (%r9), %edx
Called from file "lib/process.ml", line 215, characters 14-63
-  add %r8d, %edx
-  movl 100 (%r9), %eax
Called from file "lib/process.ml", line 284, characters 6-65
-  mov %eax, %r8d
+  xor %eax, %ebx
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 132(%esi), %edx
+  add %ebx, %edx
Called from file "src/Driver.ml", line 286, characters 11-51
+  movl 100(%esi), %eax
+  mov %eax, %ebx
Called from file "src/Kremlin.ml", line 326, characters 14-96
mov %eax, %ecx
-  ror $7, %r8d
make[5]: *** [Makefile:95: x25519-c/out.krml] Error 2
+  ror $7, %ebx
ror $18, %ecx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  xor %eax, %r8d
Called from file "lib/process.ml", line 215, characters 14-63
-  add %r8d, %edx
-  movl 96 (%r9), %eax
Called from file "lib/process.ml", line 284, characters 6-65
+  xor %eax, %ebx
+  add %ebx, %edx
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 96(%esi), %eax
add %eax, %edx
Called from file "src/Driver.ml", line 286, characters 11-51
-  movl %edx, 160 (%r9)
Called from file "src/Kremlin.ml", line 326, characters 14-96
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
make[5]: *** [Makefile:135: ed25519-c/out.krml] Error 2
+  movl %edx, 160(%esi)
+  movl 156(%esi), %eax
make[5]: Target 'extract-c' not remade because of errors.
+  mov %eax, %ebx
mov %eax, %ecx
make[5]: Target 'extract-c' not remade because of errors.
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
make[4]: *** [Makefile:9: curve25519-c] Error 2
-  xor %ecx, %r8d
make[4]: *** [Makefile:9: ed25519-c] Error 2
+  xor %ecx, %ebx
shr $10, %eax
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  xor %eax, %r8d
-  movl 136 (%r9), %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  add %r8d, %edx
-  movl 104 (%r9), %eax
Called from file "lib/process.ml", line 215, characters 14-63
-  mov %eax, %r8d
+  xor %eax, %ebx
Called from file "lib/process.ml", line 284, characters 6-65
+  movl 136(%esi), %edx
+  add %ebx, %edx
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 104(%esi), %eax
Called from file "src/Driver.ml", line 286, characters 11-51
+  mov %eax, %ebx
mov %eax, %ecx
Called from file "src/Kremlin.ml", line 326, characters 14-96
-  ror $7, %r8d
+  ror $7, %ebx
make[5]: *** [Makefile:41: policies-c/Hacl_Policies.c] Error 2
ror $18, %ecx
-  xor %ecx, %r8d
make[5]: Target 'extract-c' not remade because of errors.
+  xor %ecx, %ebx
shr $3, %eax
make[4]: *** [Makefile:9: api-c] Error 2
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 100 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 100(%esi), %eax
add %eax, %edx
-  movl %edx, 164 (%r9)
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 164(%esi)
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 140 (%r9), %edx
-  add %r8d, %edx
-  movl 108 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 140(%esi), %edx
+  add %ebx, %edx
+  movl 108(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 104 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 104(%esi), %eax
add %eax, %edx
-  movl %edx, 168 (%r9)
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 168(%esi)
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 144 (%r9), %edx
-  add %r8d, %edx
-  movl 112 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 144(%esi), %edx
+  add %ebx, %edx
+  movl 112(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 108 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 108(%esi), %eax
add %eax, %edx
-  movl %edx, 172 (%r9)
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 172(%esi)
+  movl 168(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 148 (%r9), %edx
-  add %r8d, %edx
-  movl 116 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 148(%esi), %edx
+  add %ebx, %edx
+  movl 116(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 112 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 112(%esi), %eax
add %eax, %edx
-  movl %edx, 176 (%r9)
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 176(%esi)
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 152 (%r9), %edx
-  add %r8d, %edx
-  movl 120 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 152(%esi), %edx
+  add %ebx, %edx
+  movl 120(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 116 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 116(%esi), %eax
add %eax, %edx
-  movl %edx, 180 (%r9)
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 180(%esi)
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 156 (%r9), %edx
-  add %r8d, %edx
-  movl 124 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 156(%esi), %edx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  add %ebx, %edx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
+  movl 124(%esi), %eax
+  mov %eax, %ebx
Called from file "lib/process.ml", line 215, characters 14-63
mov %eax, %ecx
-  ror $7, %r8d
Called from file "lib/process.ml", line 284, characters 6-65
+  ror $7, %ebx
ror $18, %ecx
Called from file "src/Driver.ml", line 245, characters 10-40
-  xor %ecx, %r8d
+  xor %ecx, %ebx
Called from file "src/Driver.ml", line 286, characters 11-51
shr $3, %eax
-  xor %eax, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
-  add %r8d, %edx
-  movl 120 (%r9), %eax
make[5]: *** [Makefile:43: sha2-c/out.krml] Error 2
+  xor %eax, %ebx
+  add %ebx, %edx
make[5]: Target 'extract-c' not remade because of errors.
+  movl 120(%esi), %eax
add %eax, %edx
make[4]: *** [Makefile:9: hash-c] Error 2
-  movl %edx, 184 (%r9)
-  movl 180 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 184(%esi)
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 160 (%r9), %edx
-  add %r8d, %edx
-  movl 128 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 160(%esi), %edx
+  add %ebx, %edx
+  movl 128(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 124 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 124(%esi), %eax
add %eax, %edx
-  movl %edx, 188 (%r9)
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 188(%esi)
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 164 (%r9), %edx
-  add %r8d, %edx
-  movl 132 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 164(%esi), %edx
+  add %ebx, %edx
+  movl 132(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 128 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 128(%esi), %eax
add %eax, %edx
-  movl %edx, 192 (%r9)
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 192(%esi)
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 168 (%r9), %edx
-  add %r8d, %edx
-  movl 136 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 168(%esi), %edx
+  add %ebx, %edx
+  movl 136(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 132 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 132(%esi), %eax
add %eax, %edx
-  movl %edx, 196 (%r9)
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 196(%esi)
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 172 (%r9), %edx
-  add %r8d, %edx
-  movl 140 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 172(%esi), %edx
+  add %ebx, %edx
+  movl 140(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 136 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 136(%esi), %eax
add %eax, %edx
-  movl %edx, 200 (%r9)
-  movl 196 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 200(%esi)
+  movl 196(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 176 (%r9), %edx
-  add %r8d, %edx
-  movl 144 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 176(%esi), %edx
+  add %ebx, %edx
+  movl 144(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 140 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 140(%esi), %eax
add %eax, %edx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
-  movl %edx, 204 (%r9)
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
-  movl 200 (%r9), %eax
-  mov %eax, %r8d
Called from file "lib/process.ml", line 215, characters 14-63
+  movl %edx, 204(%esi)
+  movl 200(%esi), %eax
Called from file "lib/process.ml", line 284, characters 6-65
+  mov %eax, %ebx
mov %eax, %ecx
Called from file "src/Driver.ml", line 245, characters 10-40
-  ror $17, %r8d
+  ror $17, %ebx
Called from file "src/Driver.ml", line 286, characters 11-51
ror $19, %ecx
-  xor %ecx, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  xor %ecx, %ebx
shr $10, %eax
make[5]: *** [Makefile:43: hmac-c/out.krml] Error 2
-  xor %eax, %r8d
-  movl 180 (%r9), %edx
make[5]: Target 'extract-c' not remade because of errors.
-  add %r8d, %edx
-  movl 148 (%r9), %eax
make[4]: *** [Makefile:9: hmac-c] Error 2
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 180(%esi), %edx
+  add %ebx, %edx
+  movl 148(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 144 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 144(%esi), %eax
add %eax, %edx
-  movl %edx, 208 (%r9)
-  movl 204 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 208(%esi)
+  movl 204(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 184 (%r9), %edx
-  add %r8d, %edx
-  movl 152 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 184(%esi), %edx
+  add %ebx, %edx
+  movl 152(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 148 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 148(%esi), %eax
add %eax, %edx
-  movl %edx, 212 (%r9)
-  movl 208 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 212(%esi)
+  movl 208(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 188 (%r9), %edx
-  add %r8d, %edx
-  movl 156 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 188(%esi), %edx
+  add %ebx, %edx
+  movl 156(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 152 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  movl 152(%esi), %eax
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
add %eax, %edx
-  movl %edx, 216 (%r9)
Called from file "lib/process.ml", line 215, characters 14-63
-  movl 212 (%r9), %eax
-  mov %eax, %r8d
Called from file "lib/process.ml", line 284, characters 6-65
+  movl %edx, 216(%esi)
Called from file "src/Driver.ml", line 245, characters 10-40
+  movl 212(%esi), %eax
+  mov %eax, %ebx
Called from file "src/Driver.ml", line 286, characters 11-51
mov %eax, %ecx
-  ror $17, %r8d
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  ror $17, %ebx
make[5]: *** [Makefile:38: ccomp-c/FStar.h] Error 2
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 192 (%r9), %edx
-  add %r8d, %edx
-  movl 160 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 192(%esi), %edx
+  add %ebx, %edx
+  movl 160(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 156 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 156(%esi), %eax
add %eax, %edx
-  movl %edx, 220 (%r9)
-  movl 216 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 220(%esi)
+  movl 216(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 196 (%r9), %edx
-  add %r8d, %edx
-  movl 164 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 196(%esi), %edx
+  add %ebx, %edx
+  movl 164(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 160 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 160(%esi), %eax
add %eax, %edx
-  movl %edx, 224 (%r9)
-  movl 220 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 224(%esi)
+  movl 220(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 200 (%r9), %edx
-  add %r8d, %edx
-  movl 168 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 200(%esi), %edx
+  add %ebx, %edx
+  movl 168(%esi), %eax
Fatal error: exception Unix.Unix_error(20, "create_process", "C:/build/agent1/_work/6/s/FStar/bin/fstar.exe")
+  mov %eax, %ebx
Raised by primitive operation at file "unix.ml", line 849, characters 2-62
mov %eax, %ecx
-  ror $7, %r8d
Called from file "lib/process.ml", line 215, characters 14-63
+  ror $7, %ebx
ror $18, %ecx
Called from file "lib/process.ml", line 284, characters 6-65
-  xor %ecx, %r8d
+  xor %ecx, %ebx
Called from file "src/Driver.ml", line 245, characters 10-40
shr $3, %eax
-  xor %eax, %r8d
Called from file "src/Driver.ml", line 286, characters 11-51
-  add %r8d, %edx
-  movl 164 (%r9), %eax
Called from file "src/Kremlin.ml", line 326, characters 14-96
+  xor %eax, %ebx
+  add %ebx, %edx
make[5]: *** [Makefile:32: lib-c/Hacl_Policies.c] Error 2
+  movl 164(%esi), %eax
add %eax, %edx
make[5]: Target 'extract-c' not remade because of errors.
-  movl %edx, 228 (%r9)
-  movl 224 (%r9), %eax
make[4]: *** [Makefile:9: lib/kremlin-c] Error 2
-  mov %eax, %r8d
make[4]: Target 'extract-c' not remade because of errors.
+  movl %edx, 228(%esi)
+  movl 224(%esi), %eax
make[3]: *** [Makefile.build:22: extract-c-code] Error 2
+  mov %eax, %ebx
mov %eax, %ecx
make[2]: *** [Makefile.build:77: snapshots/snapshot-gcc] Error 2
-  ror $17, %r8d
make[1]: *** [Makefile.build:149: snapshots-intermediates] Error 2
+  ror $17, %ebx
ror $19, %ecx
make: *** [Makefile:99: extract-all] Error 2
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 204 (%r9), %edx
-  add %r8d, %edx
-  movl 172 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 204(%esi), %edx
+  add %ebx, %edx
+  movl 172(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 168 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 168(%esi), %eax
add %eax, %edx
-  movl %edx, 232 (%r9)
-  movl 228 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 232(%esi)
+  movl 228(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 208 (%r9), %edx
-  add %r8d, %edx
-  movl 176 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 208(%esi), %edx
+  add %ebx, %edx
+  movl 176(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 172 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 172(%esi), %eax
add %eax, %edx
-  movl %edx, 236 (%r9)
-  movl 232 (%r9), %eax
-  mov %eax, %r8d
/bin/sh: C:/build/agent1/_work/6/s/FStar/bin/fstar.exe: No such file or directory
+  movl %edx, 236(%esi)
+  movl 232(%esi), %eax
make: [Makefile:157: .depend-TLS] Error 127 (ignored)
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 212 (%r9), %edx
/bin/sh: C:/build/agent1/_work/6/s/FStar/bin/fstar.exe: No such file or directory
-  add %r8d, %edx
-  movl 180 (%r9), %eax
make: [Makefile:159: .depend-HS] Error 127 (ignored)
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 212(%esi), %edx
+  add %ebx, %edx
+  movl 180(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 176 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
/bin/sh: C:/build/agent1/_work/6/s/FStar/bin/fstar.exe: No such file or directory
+  movl 176(%esi), %eax
make: [Makefile:161: .depend-AEAD] Error 127 (ignored)
add %eax, %edx
-  movl %edx, 240 (%r9)
-  movl 236 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 240(%esi)
+  movl 236(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
/bin/sh: C:/build/agent1/_work/6/s/FStar/bin/fstar.exe: No such file or directory
ror $19, %ecx
make: [Makefile:163: .depend-CDH] Error 127 (ignored)
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 216 (%r9), %edx
-  add %r8d, %edx
-  movl 184 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 216(%esi), %edx
+  add %ebx, %edx
+  movl 184(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 180 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 180(%esi), %eax
add %eax, %edx
-  movl %edx, 244 (%r9)
-  movl 240 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 244(%esi)
+  movl 240(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 220 (%r9), %edx
-  add %r8d, %edx
-  movl 188 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 220(%esi), %edx
+  add %ebx, %edx
+  movl 188(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 184 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 184(%esi), %eax
add %eax, %edx
-  movl %edx, 248 (%r9)
-  movl 244 (%r9), %eax
-  mov %eax, %r8d
+  movl %edx, 248(%esi)
+  movl 244(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $17, %r8d
+  ror $17, %ebx
ror $19, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $10, %eax
-  xor %eax, %r8d
-  movl 224 (%r9), %edx
-  add %r8d, %edx
-  movl 192 (%r9), %eax
-  mov %eax, %r8d
+  xor %eax, %ebx
+  movl 224(%esi), %edx
+  add %ebx, %edx
+  movl 192(%esi), %eax
+  mov %eax, %ebx
mov %eax, %ecx
-  ror $7, %r8d
+  ror $7, %ebx
ror $18, %ecx
-  xor %ecx, %r8d
+  xor %ecx, %ebx
shr $3, %eax
-  xor %eax, %r8d
-  add %r8d, %edx
-  movl 188 (%r9), %eax
+  xor %eax, %ebx
+  add %ebx, %edx
+  movl 188(%esi), %eax
add %eax, %edx
-  movl %edx, 252 (%r9)
+  movl %edx, 252(%esi)
+  movl 16(%esp), %ebp
+  movl 20(%esp), %ebx
+  movl 24(%esp), %esi
+  movl 28(%esp), %edi
+  movl $0, 16(%esp)
+  movl $0, 20(%esp)
+  movl $0, 24(%esp)
+  movl $0, 28(%esp)
ret


New assemblies from Vale, diff is above
================================================================================



================================================================================
Rebuilding hacl-star
Running: build_hacl
make -C specs
make snapshots-intermediates
make -C ../code/lib/ml
make snapshots/snapshot-gcc
make -C code clean
make[2]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/ml'
OCAMLPATH="C:/build/agent1/_work/6/s/FStar/bin" ocamlfind opt -package fstarlib -linkpkg -g  -thread -package batteries,zarith,stdint -w -20-26-3-8-58 -thread -w -58 -c Hacl_UInt8.mli Hacl_UInt8.ml Hacl_UInt32.mli Hacl_UInt32.ml Hacl_UInt64.mli Hacl_UInt64.ml Hacl_UInt128.mli Hacl_UInt128.ml Hacl_Cast.ml
make[2]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/ml'
make -C salsa-family clean
make -C poly1305 clean
make -C poly1305_32 clean
make -C curve25519 clean
make -C api clean
make -C hmac clean
make -C ed25519 clean
make -C hash clean
make -C lib clean
make -C lib/kremlin clean
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
rm -rf *.exe *.exe.* *.out *~ salsa-c chacha-c chacha-vec128-c *.graph
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
make -C experimental clean
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305_32'
rm -rf *.exe *.exe.* *.out *~ poly-c *.krml
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305_32'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305'
rm -rf *.exe *.exe.* *.out *~ poly-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
rm -rf api-c *~ *.exe *.graph *.o *.out aead-c box-c policies-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
make[4]: Nothing to be done for 'clean'.
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/curve25519'
rm -rf *.exe *.exe.* *.out *~ x25519-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/curve25519'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hmac'
rm -rf *~ *.exe *.exe.dSYM
rm -rf hmac-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hmac'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/ed25519'
rm -rf *.exe *.exe.* *.out *~ ed25519-c *.graph
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/ed25519'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
rm -rf *~ *.exe lib-c ccomp-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/experimental'
rm -rf *~ *.exe *.out *.graph
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/experimental'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hash'
rm -rf *~ *.exe *.exe.dSYM
rm -rf sha2-c sha2-*-c
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hash'
make[3]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code'
rm -rf *~ *.exe *.out
make[3]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code'
make -B extract-c-code extract-c-code-experimental KOPTS="-drop FStar -fparentheses" HACL_RELEASE="1" HACL_LICENSE="C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT"
make -C code/experimental extract-c
make[3]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star'
find code -name out.krml -exec touch {} \;
make[3]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star'
make -C code extract-c
make[4]: Nothing to be done for 'extract-c'.
make -C salsa-family extract-c
make -C poly1305 extract-c
make -C poly1305_32 extract-c
make -C curve25519 extract-c
make -C api extract-c
make -C hmac extract-c
make -C ed25519 extract-c
make -C hash extract-c
make -C lib extract-c
make -C lib/kremlin extract-c
make[5]: Nothing to be done for 'extract-c'.
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../bignum -tmpdir poly-c -bundle 'Hacl.Spec.*,Hacl.Spe.*' -fparentheses -drop Combinators,Hacl.Endianness,Spec.*,Hacl.Bignum.Parameters,Hacl.Endianness,Hacl.Spec,Hacl.Spec.*,Hacl.Spe,Hacl.Spe.*,Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Prims,Seq.*  -skip-translation ../bignum/Hacl.Spec.Bignum.Field.fst ../bignum/Hacl.Bignum.Limb.fst ../bignum/Hacl.Bignum.Wide.fst ../bignum/Hacl.Spec.Bignum.Bigint.fst ../bignum/Hacl.Spec.Bignum.Fsum.fst ../bignum/Hacl.Spec.Bignum.Fproduct.fst ../bignum/Hacl.Spec.Bignum.Fmul.fst ../bignum/Hacl.Bignum.Fsum.fst ../bignum/Hacl.Bignum.Fproduct.fst ../bignum/Hacl.Bignum.Fmul.fst Hacl.Bignum.Constants.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.Bignum.AddAndMultiply.fst ../../specs/Spec.Poly1305.fst Hacl.Spec.Poly1305_64.fst Hacl.Spe.Poly1305_64.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.AddAndMultiply.fst Hacl.Impl.Poly1305_64.fst Hacl.Standalone.Poly1305_64.fst Hacl.Poly1305_64.fst Hacl.Spec.Poly1305_64.Lemmas1.fst AEAD.Poly1305_64.fst Hacl.Test.Poly1305_64.fst -o poly-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir poly-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib ../bignum/Hacl.Spec.Bignum.Field.fst ../bignum/Hacl.Bignum.Limb.fst ../bignum/Hacl.Bignum.Wide.fst ../bignum/Hacl.Spec.Bignum.Bigint.fst ../bignum/Hacl.Spec.Bignum.Fsum.fst ../bignum/Hacl.Spec.Bignum.Fproduct.fst ../bignum/Hacl.Spec.Bignum.Fmul.fst ../bignum/Hacl.Bignum.Fsum.fst ../bignum/Hacl.Bignum.Fproduct.fst ../bignum/Hacl.Bignum.Fmul.fst Hacl.Bignum.Constants.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.Bignum.AddAndMultiply.fst ../../specs/Spec.Poly1305.fst Hacl.Spec.Poly1305_64.fst Hacl.Spe.Poly1305_64.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.AddAndMultiply.fst Hacl.Impl.Poly1305_64.fst Hacl.Standalone.Poly1305_64.fst Hacl.Poly1305_64.fst Hacl.Spec.Poly1305_64.Lemmas1.fst AEAD.Poly1305_64.fst Hacl.Test.Poly1305_64.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -drop Prims,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Endianness,Hacl.Cast,Hacl.Spec.*,Spec.*,Seq.*  -tmpdir chacha-c \
-bundle 'Hacl.Chacha20=Hacl.Impl.*,Hacl.Chacha20,Hacl.Lib.*' \
-skip-translation Hacl.Lib.LoadStore32.fst Hacl.Lib.Create.fst Hacl.Impl.Xor.Lemmas.fst Hacl.Impl.Chacha20.fst Hacl.Chacha20.fst Hacl.Test.Chacha20.fst -o chacha-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir chacha-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Lib.LoadStore32.fst Hacl.Lib.Create.fst Hacl.Impl.Xor.Lemmas.fst Hacl.Impl.Chacha20.fst Hacl.Chacha20.fst Hacl.Test.Chacha20.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -drop Prims,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Endianness,Hacl.Cast,Hacl.Spec.*,Spec.*,Seq.*  -tmpdir salsa-c -skip-translation \
-bundle 'Hacl.Salsa20=Hacl.Salsa20,Hacl.Impl.*,Hacl.Lib.*' \
Hacl.Impl.Salsa20.fst Hacl.Salsa20.fst Hacl.Test.Salsa20.fst -o salsa-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir salsa-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Impl.Salsa20.fst Hacl.Salsa20.fst Hacl.Test.Salsa20.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -drop Prims,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Endianness,Hacl.Cast,Hacl.Spec.*,Spec.*,Seq.*  -tmpdir chacha-vec128-c \
-bundle "Hacl.Chacha20.Vec128=Hacl.Chacha20.Vec128,Hacl.Impl.*,Hacl.Lib.*" \
-add-include '"vec128.h"' \
-skip-translation Hacl.Impl.Chacha20.Vec128.State.fst Hacl.Impl.Chacha20.Vec128.fst Hacl.Chacha20.Vec128.fst Hacl.Test.Chacha20.Vec128.fst -o chacha-vec128-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir chacha-vec128-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Impl.Chacha20.Vec128.State.fst Hacl.Impl.Chacha20.Vec128.fst Hacl.Chacha20.Vec128.fst Hacl.Test.Chacha20.Vec128.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/salsa-family'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../salsa-family -I C:/build/agent1/_work/6/s/hacl-star/code/bignum -I ../curve25519 -I ../poly1305 -I ../hash -drop Prims,Spec.*,Hacl.Spec.*,Hacl.Spe.*,Hacl.Impl.*,Seq.*,Hacl.Constants,Hacl.Endianness -drop Hacl.UInt8,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Cast,Hacl.UInt16,Hacl.Types -tmpdir box-c NaCl.fst -skip-compilation \
-bundle "NaCl=NaCl,Hacl.SecretBox.ZeroPad,Hacl.Box.ZeroPad" \
-bundle "Hacl.Policies=Hacl.Policies"
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir box-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib NaCl.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305_32'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../bignum -tmpdir poly-c -bundle 'Hacl.Spec.*,Hacl.Spe.*' -fparentheses -drop Combinators,Hacl.Endianness,Spec.*,Hacl.Bignum.Parameters,Hacl.Endianness,Hacl.Spec,Hacl.Spec.*,Hacl.Spe,Hacl.Spe.*,Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Prims,Seq.*  -skip-translation C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Field.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Limb.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Wide.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Bigint.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fsum.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fproduct.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fmul.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fsum.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fproduct.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fmul.fst Hacl.Bignum.Constants.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.Bignum.AddAndMultiply.fst Hacl.Spec.Poly1305_32.State.fst Hacl.Spec.Poly1305_32.Lemmas.fst Hacl.Spec.Poly1305_32.fst Hacl.Spe.Poly1305_32.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.AddAndMultiply.fst Hacl.Impl.Poly1305_32.State.fst Hacl.Impl.Poly1305_32.fst Hacl.Standalone.Poly1305_32.fst Hacl.Poly1305_32.fst Hacl.Test.Poly1305_32.fst -o poly-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir poly-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Field.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Limb.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Wide.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Bigint.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fsum.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fproduct.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Spec.Bignum.Fmul.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fsum.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fproduct.fst C:/build/agent1/_work/6/s/hacl-star/code/bignum/Hacl.Bignum.Fmul.fst Hacl.Bignum.Constants.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.Bignum.AddAndMultiply.fst Hacl.Spec.Poly1305_32.State.fst Hacl.Spec.Poly1305_32.Lemmas.fst Hacl.Spec.Poly1305_32.fst Hacl.Spe.Poly1305_32.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.AddAndMultiply.fst Hacl.Impl.Poly1305_32.State.fst Hacl.Impl.Poly1305_32.fst Hacl.Standalone.Poly1305_32.fst Hacl.Poly1305_32.fst Hacl.Test.Poly1305_32.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/poly1305_32'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../salsa-family -I C:/build/agent1/_work/6/s/hacl-star/code/bignum -I ../curve25519 -I ../poly1305 -I ../hash -drop Prims,Spec.*,Hacl.Spec.*,Hacl.Spe.*,Hacl.Impl.*,Seq.*,Hacl.Constants,Hacl.Endianness -drop Hacl.UInt8,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Cast,Hacl.UInt16,Hacl.Types -tmpdir aead-c Hacl.Chacha20Poly1305.fst -skip-compilation \
-add-include '"Hacl_Chacha20.h"' -add-include '"AEAD_Poly1305_64.h"' \
-drop Hacl.Bignum.Constants,Hacl.Bignum.Parameters,Hacl.Bignum.Limb,Hacl.Bignum.Wide,Hacl.UInt16,Hacl.Types,Hacl.Bignum.*,AEAD_Poly1305_64,Hacl.Chacha20 \
# TODO: FIX FOR KREMLIN EXTRACTION ISSUE, CHECK WITH JP
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir aead-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Chacha20Poly1305.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/curve25519'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../bignum -tmpdir x25519-c -drop Spec.*,Hacl.Spec.*,Hacl.Cast,Hacl.UInt.*,Hacl.Endianness,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Prims  -skip-translation ../bignum/Hacl.Bignum.Fdifference.fst ../bignum/Hacl.Bignum.Fmul.fst ../bignum/Hacl.Bignum.Fproduct.fst ../bignum/Hacl.Bignum.Fscalar.fst ../bignum/Hacl.Bignum.Fsum.fst ../bignum/Hacl.Bignum.Limb.fst ../bignum/Hacl.Bignum.Wide.fst ../bignum/Hacl.Bignum.fst ../bignum/Hacl.Spec.Bignum.Bigint.fst ../bignum/Hacl.Spec.Bignum.Fdifference.fst ../bignum/Hacl.Spec.Bignum.Field.fst ../bignum/Hacl.Spec.Bignum.Fmul.fst ../bignum/Hacl.Spec.Bignum.Fproduct.fst ../bignum/Hacl.Spec.Bignum.Fscalar.fst ../bignum/Hacl.Spec.Bignum.Fsum.fst ../bignum/Hacl.Spec.Bignum.fst Hacl.Spec.Curve25519.Lemmas.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.EC.AddAndDouble.fst Hacl.Spec.Bignum.Fsquare.fst Hacl.Spec.Bignum.Crecip.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.Fsquare.fst Hacl.Bignum.Crecip.fst Hacl.Spec.EC.Point.fst Hacl.EC.Point.fst Hacl.Spec.EC.AddAndDouble2.fst Hacl.Spec.EC.AddAndDouble3.fst Hacl.Spec.EC.Format.Lemmas.fst Hacl.Spec.EC.Format.fst Hacl.EC.Format.fst Hacl.EC.AddAndDouble.fst Hacl.Spec.EC.Ladder.Lemmas.fst Hacl.Spec.EC.Ladder.fst Hacl.EC.Ladder.SmallLoop.fst Hacl.EC.Ladder.BigLoop.fst Hacl.EC.Ladder.fst Hacl.Spec.EC.fst Hacl.EC.fst Hacl.Curve25519.fst Hacl.Test.X25519.fst -o x25519-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir x25519-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include C:/build/agent1/_work/6/s/kremlin/kremlib ../bignum/Hacl.Bignum.Fdifference.fst ../bignum/Hacl.Bignum.Fmul.fst ../bignum/Hacl.Bignum.Fproduct.fst ../bignum/Hacl.Bignum.Fscalar.fst ../bignum/Hacl.Bignum.Fsum.fst ../bignum/Hacl.Bignum.Limb.fst ../bignum/Hacl.Bignum.Wide.fst ../bignum/Hacl.Bignum.fst ../bignum/Hacl.Spec.Bignum.Bigint.fst ../bignum/Hacl.Spec.Bignum.Fdifference.fst ../bignum/Hacl.Spec.Bignum.Field.fst ../bignum/Hacl.Spec.Bignum.Fmul.fst ../bignum/Hacl.Spec.Bignum.Fproduct.fst ../bignum/Hacl.Spec.Bignum.Fscalar.fst ../bignum/Hacl.Spec.Bignum.Fsum.fst ../bignum/Hacl.Spec.Bignum.fst Hacl.Spec.Curve25519.Lemmas.fst Hacl.Bignum.Parameters.fst Hacl.Spec.Bignum.Modulo.fst Hacl.Spec.EC.AddAndDouble.fst Hacl.Spec.Bignum.Fsquare.fst Hacl.Spec.Bignum.Crecip.fst Hacl.Bignum.Modulo.fst Hacl.Bignum.Fsquare.fst Hacl.Bignum.Crecip.fst Hacl.Spec.EC.Point.fst Hacl.EC.Point.fst Hacl.Spec.EC.AddAndDouble2.fst Hacl.Spec.EC.AddAndDouble3.fst Hacl.Spec.EC.Format.Lemmas.fst Hacl.Spec.EC.Format.fst Hacl.EC.Format.fst Hacl.EC.AddAndDouble.fst Hacl.Spec.EC.Ladder.Lemmas.fst Hacl.Spec.EC.Ladder.fst Hacl.EC.Ladder.SmallLoop.fst Hacl.EC.Ladder.BigLoop.fst Hacl.EC.Ladder.fst Hacl.Spec.EC.fst Hacl.EC.fst Hacl.Curve25519.fst Hacl.Test.X25519.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/curve25519'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/ed25519'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -tmpdir ed25519-c -I ../bignum -I ../curve25519 -I ../hash -drop C.Nullity,Hacl.Spec,Hacl.Spec.*,Hacl.Cast,Hacl.UInt.*,Hacl.Endianness,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Seq.*,Prims,Spec.* -bundle "Hacl.Ed25519=Hacl.Ed25519,Hacl.EC,Hacl.EC.*,Hacl.Impl.*,Hacl.Lib.*,Hacl.Bignum.*,Hacl.Bignum25519,Hacl.Bignum,Hacl.Spec.*,Hacl.SHA2_512,Hacl.Hash.*" Hacl.Bignum25519.fst ../hash/Hacl.Impl.SHA512.Ed25519.fst ../hash/Hacl.SHA2_512.fst Hacl.Impl.Load56.fst Hacl.Impl.Load51.fst Hacl.Impl.Store51.fst Hacl.Impl.BignumQ.Mul.fst Hacl.Impl.SHA512.ModQ.fst Hacl.Impl.Sha512.fst Hacl.Impl.Ed25519.Pow2_252m2.fst Hacl.Impl.Ed25519.PointAdd.fst Hacl.Impl.Ed25519.PointDouble.fst Hacl.Impl.Ed25519.SecretExpand.fst Hacl.Impl.Ed25519.PointCompress.fst Hacl.Impl.Ed25519.PointDecompress.fst Hacl.Impl.Ed25519.RecoverX.fst Hacl.Impl.Ed25519.Ladder.Step.fst Hacl.Impl.Ed25519.Ladder.fst Hacl.Impl.Ed25519.PointEqual.fst Hacl.Impl.Ed25519.SecretToPublic.fst Hacl.Ed25519.fst Hacl.Test.Ed25519.fst -skip-translation
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include ../curve25519 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir ed25519-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../bignum --include ../curve25519 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Bignum25519.fst ../hash/Hacl.Impl.SHA512.Ed25519.fst ../hash/Hacl.SHA2_512.fst Hacl.Impl.Load56.fst Hacl.Impl.Load51.fst Hacl.Impl.Store51.fst Hacl.Impl.BignumQ.Mul.fst Hacl.Impl.SHA512.ModQ.fst Hacl.Impl.Sha512.fst Hacl.Impl.Ed25519.Pow2_252m2.fst Hacl.Impl.Ed25519.PointAdd.fst Hacl.Impl.Ed25519.PointDouble.fst Hacl.Impl.Ed25519.SecretExpand.fst Hacl.Impl.Ed25519.PointCompress.fst Hacl.Impl.Ed25519.PointDecompress.fst Hacl.Impl.Ed25519.RecoverX.fst Hacl.Impl.Ed25519.Ladder.Step.fst Hacl.Impl.Ed25519.Ladder.fst Hacl.Impl.Ed25519.PointEqual.fst Hacl.Impl.Ed25519.SecretToPublic.fst Hacl.Ed25519.fst Hacl.Test.Ed25519.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/ed25519'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -I ../salsa-family -I C:/build/agent1/_work/6/s/hacl-star/code/bignum -I ../curve25519 -I ../poly1305 -I ../hash -drop Prims,Spec.*,Hacl.Spec.*,Hacl.Spe.*,Hacl.Impl.*,Seq.*,Hacl.Constants,Hacl.Endianness -drop Hacl.UInt8,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128,Hacl.Cast,Hacl.UInt16,Hacl.Types C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin/Hacl.Policies.fst -tmpdir policies-c -skip-compilation
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir policies-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include ../salsa-family --include C:/build/agent1/_work/6/s/hacl-star/code/bignum --include ../curve25519 --include ../poly1305 --include ../hash --include C:/build/agent1/_work/6/s/kremlin/kremlib C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin/Hacl.Policies.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/api'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hash'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -verbose -drop Prims,Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128 -drop Hacl.Spec.Endianness,Hacl.Endianness,Seq.Create,Spec.* -drop Hacl.Impl.SHA2_256.Lemmas,Hacl.Impl.SHA2_384.Lemmas,Hacl.Impl.SHA2_512.Lemmas  -ccopt -march=native -tmpdir sha2-c -skip-translation Hacl.Hash.Lib.LoadStore.fst Hacl.Hash.Lib.Create.fst Hacl.Impl.SHA2_512.Lemmas.fst Hacl.Impl.SHA2_512.fst Hacl.Impl.SHA2_384.Lemmas.fst Hacl.Impl.SHA2_384.fst Hacl.Impl.SHA2_256.Lemmas.fst Hacl.Impl.SHA2_256.fst Hacl.SHA2_256.fst Hacl.SHA2_384.fst Hacl.SHA2_512.fst Hacl.Test.SHA2_256.fst Hacl.Test.SHA2_384.fst Hacl.Test.SHA2_512.fst
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir sha2-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.Hash.Lib.LoadStore.fst Hacl.Hash.Lib.Create.fst Hacl.Impl.SHA2_512.Lemmas.fst Hacl.Impl.SHA2_512.fst Hacl.Impl.SHA2_384.Lemmas.fst Hacl.Impl.SHA2_384.fst Hacl.Impl.SHA2_256.Lemmas.fst Hacl.Impl.SHA2_256.fst Hacl.SHA2_256.fst Hacl.SHA2_384.fst Hacl.SHA2_512.fst Hacl.Test.SHA2_256.fst Hacl.Test.SHA2_384.fst Hacl.Test.SHA2_512.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hash'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hmac'
C:/build/agent1/_work/6/s/kremlin/krml  -drop FStar -fparentheses -I C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin -I C:/build/agent1/_work/6/s/kremlin/kremlib -I C:/build/agent1/_work/6/s/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -header C:/build/agent1/_work/6/s/hacl-star/snapshots/licenses/MIT -verbose -tmpdir hmac-c -I C:/build/agent1/_work/6/s/hacl-star/code/hash -drop Prims -drop Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128 -drop Hacl.Spec.Endianness,Hacl.Endianness,Seq.Create,Spec.*,Hacl.Impl.SHA2_256.Lemmas -bundle "Hacl.HMAC.SHA2_256=Hacl.Hash.Lib.Create,Hacl.Hash.Lib.LoadStore,Hacl.Impl.SHA2_256,Hacl.Impl.HMAC.SHA2_256,Hacl.HMAC.SHA2_256" -ccopt -Wno-error=strict-aliasing -ccopt -march=native -ccopt -std=gnu99  -skip-translation -no-prefix Hacl.HMAC.SHA2_256 \
Hacl.HMAC.SHA2_256.fst Hacl.Test.HMAC.SHA2_256.fst -o hmac-c/out.krml
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/hacl-star/code/hash --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --odir hmac-c --codegen Kremlin --lax --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/hacl-star/code/lib/kremlin --include C:/build/agent1/_work/6/s/kremlin/kremlib --include C:/build/agent1/_work/6/s/hacl-star/specs --include . --include C:/build/agent1/_work/6/s/hacl-star/code/hash --include C:/build/agent1/_work/6/s/kremlin/kremlib Hacl.HMAC.SHA2_256.fst Hacl.Test.HMAC.SHA2_256.fst
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/hmac'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
C:/build/agent1/_work/6/s/kremlin/krml -drop Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.Types -skip-compilation C:/build/agent1/_work/6/s/FStar/ulib/FStar.UInt128.fst C:/build/agent1/_work/6/s/FStar/ulib/FStar.Int.Cast.Full.fst Hacl.UInt128.fst Hacl.Cast.fst  -fnouint128 -fnostruct-passing -fnoanonymous-unions -tmpdir ccomp-c
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe C:/build/agent1/_work/6/s/FStar/ulib/FStar.UInt128.fst --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
make[5]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
C:/build/agent1/_work/6/s/kremlin/krml -drop Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.Types -skip-compilation Hacl.Policies.fst -tmpdir lib-c \
-drop Hacl.UInt128,FStar
[38;5;81m⚙ KreMLin auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKreMLin called via:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mthe Kremlin executable is:[0m C:\build\agent1\_work\6\s\kremlin\_build\src\Kremlin.native
[4mKreMLin home is:[0m C:/build/agent1/_work/6/s/kremlin
[38;5;81m⚙ KreMLin will drive F*.[0m Here's what we found:
read FSTAR_HOME via the environment
[4mfstar converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe
[4mfstar home converted to windows path:[0m C:/build/agent1/_work/6/s/FStar
[4mfstar lib converted to windows path:[0m C:/build/agent1/_work/6/s/FStar/ulib
fstar is on [38;5;202mbranch stable[0m
[4mfstar is:[0m C:/build/agent1/_work/6/s/FStar/bin/fstar.exe --no_extract FStar.Monotonic.HyperStack --no_extract FStar.Buffer --no_extract FStar.Monotonic.HyperHeap --no_extract FStar.Map --no_extract FStar.Math.Lib --no_extract FStar.HyperHeap --no_extract FStar.HyperStack --no_extract FStar.HyperStack.ST --no_extract FStar.Seq.Base --no_extract FStar.Int128 --no_extract FStar.UInt64 --no_extract FStar.Int64 --no_extract FStar.UInt63 --no_extract FStar.Int63 --no_extract FStar.UInt32 --no_extract FStar.Int32 --no_extract FStar.UInt31 --no_extract FStar.Int31 --no_extract FStar.UInt16 --no_extract FStar.Int16 --no_extract FStar.UInt8 --no_extract FStar.Int8 --trace_error --include C:/build/agent1/_work/6/s/kremlin/kremlib
[38;5;81m⚡ Calling F* (use -verbose to see the output)[0m
make[5]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/hacl-star/code/lib/kremlin'
================================================================================



================================================================================
Rebuilding mitls-fstar
Running: make -C mitls-fstar/src/tls -j 16 build -k
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Entering directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make mitls.exe
make[1]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
touch .fstarlib
make[1]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/mitls-fstar/src/tls'
make -C C:/build/agent1/_work/6/s/FStar/ulib/ml
make -C .. install-fstarlib
make[3]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/ulib'
make[4]: warning: jobserver unavailable: using -j1.  Add '+' to parent make rule.
make -C ../src/ocaml-output
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
warning: CRLF will be replaced by LF in src/parser/boot/parse.fsy.
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make[4]: Entering directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
The file will have its original line endings in your working directory.
cp "../extraction/ml/FStar_Extraction_ML_PrintML_4.05.X.ml" ../extraction/ml/FStar_Extraction_ML_PrintML.ml
echo 'open FStar_Util' > FStar_Version.ml
make[4]: *** [Makefile:104: fstar.exe] Error 10
echo 'let dummy () = ();;' >> FStar_Version.ml
make[4]: Target 'all' not remade because of errors.
echo 'FStar_Options._version := "0.9.5.0";;' >> FStar_Version.ml
echo 'FStar_Options._platform := "Windows_x64";;' >> FStar_Version.ml
make[3]: *** [Makefile:19: ../bin/fstar.ocaml] Error 2
echo 'FStar_Options._compiler := "OCaml 4.05.0";;' >> FStar_Version.ml
echo 'FStar_Options._date := "2018-08-06T17:32:03-07:00";;' >> FStar_Version.ml
make[3]: Target 'install-fstarlib' not remade because of errors.
echo 'FStar_Options._commit:= "d997d4461";;' >> FStar_Version.ml
make[2]: *** [Makefile:2: all] Error 2
cd ../../ && ocamlbuild -cflag -g -I src/ocaml-output -I src/basic/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/prettyprint/ml -I src/tactics/ml -I ulib/ml -j 24 -build-dir src/ocaml-output/_build -use-ocamlfind main.native
make[1]: *** [Makefile:190: .fstarlib] Error 2
ocamlfind ocamldep -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -modules src/ocaml-output/FStar_Version.ml > src/ocaml-output/FStar_Version.ml.depends
make[1]: Target 'mitls.exe' not remade because of errors.
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_Kremlin.cmo src/ocaml-output/FStar_Extraction_Kremlin.ml
make: *** [Makefile:26: build] Error 2
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Extraction_ML_Modul.cmo src/ocaml-output/FStar_Extraction_ML_Modul.ml
Command exited with non-zero status 255
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/extraction/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/extraction/ml/FStar_Extraction_ML_PrintML.cmo src/extraction/ml/FStar_Extraction_ML_PrintML.ml
139.77user 168.82system 8:09.06elapsed 63%CPU (0avgtext+0avgdata 1072582656maxresident)k
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Fsdoc_Generator.cmo src/ocaml-output/FStar_Fsdoc_Generator.ml
0inputs+0outputs (5887261major+0minor)pagefaults 0swaps
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Interactive.cmo src/ocaml-output/FStar_Interactive.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Legacy_Interactive.cmo src/ocaml-output/FStar_Legacy_Interactive.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/tactics/ml -I ulib/ml -I src/ocaml-output -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/tactics/ml/FStar_Tactics_Load.cmo src/tactics/ml/FStar_Tactics_Load.ml
ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -w -8-11-20-21-26-28 -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/ocaml-output -I ulib/ml -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/extraction/ml -I src/basic/ml -o src/ocaml-output/FStar_Version.cmo src/ocaml-output/FStar_Version.ml
+  ocamlfind ocamlc -c -g -annot -bin-annot -thread -package stdint -package compiler-libs -package compiler-libs.common -package menhirLib -package dynlink -package pprint -package ulex -package yojson -package batteries -package zarith -I src/extraction/ml -I ulib/ml -I src/ocaml-output -I src/tactics/ml -I src/prettyprint/ml -I src/parser/ml -I src/fstar/ml -I src/basic/ml -o src/extraction/ml/FStar_Extraction_ML_PrintML.cmo src/extraction/ml/FStar_Extraction_ML_PrintML.ml
File "src/extraction/ml/FStar_Extraction_ML_PrintML.ml", line 217, characters 2-1681:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
MLE_TApp _
File "src/extraction/ml/FStar_Extraction_ML_PrintML.ml", line 362, characters 23-30:
Error: Unbound type constructor tyattrs
Hint: Did you mean attrs?
Command exited with code 2.
make[4]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/src/ocaml-output'
make[3]: Leaving directory '/cygdrive/c/build/agent1/_work/6/s/FStar/ulib'
================================================================================



ERROR: build failed for one or more projects
FStar
hacl-star
mitls-fstar

